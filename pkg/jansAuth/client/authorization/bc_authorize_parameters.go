// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBcAuthorizeParams creates a new BcAuthorizeParams object
// with the default values initialized.
func NewBcAuthorizeParams() *BcAuthorizeParams {
	var ()
	return &BcAuthorizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBcAuthorizeParamsWithTimeout creates a new BcAuthorizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBcAuthorizeParamsWithTimeout(timeout time.Duration) *BcAuthorizeParams {
	var ()
	return &BcAuthorizeParams{

		timeout: timeout,
	}
}

// NewBcAuthorizeParamsWithContext creates a new BcAuthorizeParams object
// with the default values initialized, and the ability to set a context for a request
func NewBcAuthorizeParamsWithContext(ctx context.Context) *BcAuthorizeParams {
	var ()
	return &BcAuthorizeParams{

		Context: ctx,
	}
}

// NewBcAuthorizeParamsWithHTTPClient creates a new BcAuthorizeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBcAuthorizeParamsWithHTTPClient(client *http.Client) *BcAuthorizeParams {
	var ()
	return &BcAuthorizeParams{
		HTTPClient: client,
	}
}

/*BcAuthorizeParams contains all the parameters to send to the API endpoint
for the bc authorize operation typically these are written to a http.Request
*/
type BcAuthorizeParams struct {

	/*AcrValues
	  Requested Authentication Context Class Reference values.

	*/
	AcrValues *string
	/*BindingMessage
	  A human readable identifier or message intended to be displayed on both the consumption device and the authentication device to interlock them together for the transaction by way of a visual cue for the end-user.

	*/
	BindingMessage *string
	/*ClientID
	  OAuth 2.0 Client Identifier valid at the Authorization Server.

	*/
	ClientID string
	/*ClientNotificationToken
	  It is a bearer token provided by the Client that will be used by the OpenID Provider to authenticate the callback request to the Client. It is required if the Client is registered to use Ping or Push modes.

	*/
	ClientNotificationToken string
	/*IDTokenHint
	  An ID Token previously issued to the Client by the OpenID Provider being passed back as a hint to identify the end-user for whom authentication is being requested.

	*/
	IDTokenHint *string
	/*LoginHint
	  A hint to the OpenID Provider regarding the end-user for whom authentication is being requested.

	*/
	LoginHint *string
	/*LoginHintToken
	  A token containing information identifying the end-user for whom authentication is being requested.

	*/
	LoginHintToken *string
	/*RequestedExpiry
	  A positive integer allowing the client to request the expires_in value for the auth_req_id the server will return.

	*/
	RequestedExpiry *int32
	/*Scope
	  CIBA authentication requests must contain the openid scope value.

	*/
	Scope string
	/*UserCode
	  A secret code, such as password or pin, known only to the user but verifiable by the OP.

	*/
	UserCode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the bc authorize params
func (o *BcAuthorizeParams) WithTimeout(timeout time.Duration) *BcAuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the bc authorize params
func (o *BcAuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the bc authorize params
func (o *BcAuthorizeParams) WithContext(ctx context.Context) *BcAuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the bc authorize params
func (o *BcAuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the bc authorize params
func (o *BcAuthorizeParams) WithHTTPClient(client *http.Client) *BcAuthorizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the bc authorize params
func (o *BcAuthorizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcrValues adds the acrValues to the bc authorize params
func (o *BcAuthorizeParams) WithAcrValues(acrValues *string) *BcAuthorizeParams {
	o.SetAcrValues(acrValues)
	return o
}

// SetAcrValues adds the acrValues to the bc authorize params
func (o *BcAuthorizeParams) SetAcrValues(acrValues *string) {
	o.AcrValues = acrValues
}

// WithBindingMessage adds the bindingMessage to the bc authorize params
func (o *BcAuthorizeParams) WithBindingMessage(bindingMessage *string) *BcAuthorizeParams {
	o.SetBindingMessage(bindingMessage)
	return o
}

// SetBindingMessage adds the bindingMessage to the bc authorize params
func (o *BcAuthorizeParams) SetBindingMessage(bindingMessage *string) {
	o.BindingMessage = bindingMessage
}

// WithClientID adds the clientID to the bc authorize params
func (o *BcAuthorizeParams) WithClientID(clientID string) *BcAuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the bc authorize params
func (o *BcAuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithClientNotificationToken adds the clientNotificationToken to the bc authorize params
func (o *BcAuthorizeParams) WithClientNotificationToken(clientNotificationToken string) *BcAuthorizeParams {
	o.SetClientNotificationToken(clientNotificationToken)
	return o
}

// SetClientNotificationToken adds the clientNotificationToken to the bc authorize params
func (o *BcAuthorizeParams) SetClientNotificationToken(clientNotificationToken string) {
	o.ClientNotificationToken = clientNotificationToken
}

// WithIDTokenHint adds the iDTokenHint to the bc authorize params
func (o *BcAuthorizeParams) WithIDTokenHint(iDTokenHint *string) *BcAuthorizeParams {
	o.SetIDTokenHint(iDTokenHint)
	return o
}

// SetIDTokenHint adds the idTokenHint to the bc authorize params
func (o *BcAuthorizeParams) SetIDTokenHint(iDTokenHint *string) {
	o.IDTokenHint = iDTokenHint
}

// WithLoginHint adds the loginHint to the bc authorize params
func (o *BcAuthorizeParams) WithLoginHint(loginHint *string) *BcAuthorizeParams {
	o.SetLoginHint(loginHint)
	return o
}

// SetLoginHint adds the loginHint to the bc authorize params
func (o *BcAuthorizeParams) SetLoginHint(loginHint *string) {
	o.LoginHint = loginHint
}

// WithLoginHintToken adds the loginHintToken to the bc authorize params
func (o *BcAuthorizeParams) WithLoginHintToken(loginHintToken *string) *BcAuthorizeParams {
	o.SetLoginHintToken(loginHintToken)
	return o
}

// SetLoginHintToken adds the loginHintToken to the bc authorize params
func (o *BcAuthorizeParams) SetLoginHintToken(loginHintToken *string) {
	o.LoginHintToken = loginHintToken
}

// WithRequestedExpiry adds the requestedExpiry to the bc authorize params
func (o *BcAuthorizeParams) WithRequestedExpiry(requestedExpiry *int32) *BcAuthorizeParams {
	o.SetRequestedExpiry(requestedExpiry)
	return o
}

// SetRequestedExpiry adds the requestedExpiry to the bc authorize params
func (o *BcAuthorizeParams) SetRequestedExpiry(requestedExpiry *int32) {
	o.RequestedExpiry = requestedExpiry
}

// WithScope adds the scope to the bc authorize params
func (o *BcAuthorizeParams) WithScope(scope string) *BcAuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the bc authorize params
func (o *BcAuthorizeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithUserCode adds the userCode to the bc authorize params
func (o *BcAuthorizeParams) WithUserCode(userCode *string) *BcAuthorizeParams {
	o.SetUserCode(userCode)
	return o
}

// SetUserCode adds the userCode to the bc authorize params
func (o *BcAuthorizeParams) SetUserCode(userCode *string) {
	o.UserCode = userCode
}

// WriteToRequest writes these params to a swagger request
func (o *BcAuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcrValues != nil {

		// form param acr_values
		var frAcrValues string
		if o.AcrValues != nil {
			frAcrValues = *o.AcrValues
		}
		fAcrValues := frAcrValues
		if fAcrValues != "" {
			if err := r.SetFormParam("acr_values", fAcrValues); err != nil {
				return err
			}
		}

	}

	if o.BindingMessage != nil {

		// form param binding_message
		var frBindingMessage string
		if o.BindingMessage != nil {
			frBindingMessage = *o.BindingMessage
		}
		fBindingMessage := frBindingMessage
		if fBindingMessage != "" {
			if err := r.SetFormParam("binding_message", fBindingMessage); err != nil {
				return err
			}
		}

	}

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	// form param client_notification_token
	frClientNotificationToken := o.ClientNotificationToken
	fClientNotificationToken := frClientNotificationToken
	if fClientNotificationToken != "" {
		if err := r.SetFormParam("client_notification_token", fClientNotificationToken); err != nil {
			return err
		}
	}

	if o.IDTokenHint != nil {

		// form param id_token_hint
		var frIDTokenHint string
		if o.IDTokenHint != nil {
			frIDTokenHint = *o.IDTokenHint
		}
		fIDTokenHint := frIDTokenHint
		if fIDTokenHint != "" {
			if err := r.SetFormParam("id_token_hint", fIDTokenHint); err != nil {
				return err
			}
		}

	}

	if o.LoginHint != nil {

		// form param login_hint
		var frLoginHint string
		if o.LoginHint != nil {
			frLoginHint = *o.LoginHint
		}
		fLoginHint := frLoginHint
		if fLoginHint != "" {
			if err := r.SetFormParam("login_hint", fLoginHint); err != nil {
				return err
			}
		}

	}

	if o.LoginHintToken != nil {

		// form param login_hint_token
		var frLoginHintToken string
		if o.LoginHintToken != nil {
			frLoginHintToken = *o.LoginHintToken
		}
		fLoginHintToken := frLoginHintToken
		if fLoginHintToken != "" {
			if err := r.SetFormParam("login_hint_token", fLoginHintToken); err != nil {
				return err
			}
		}

	}

	if o.RequestedExpiry != nil {

		// form param requested_expiry
		var frRequestedExpiry int32
		if o.RequestedExpiry != nil {
			frRequestedExpiry = *o.RequestedExpiry
		}
		fRequestedExpiry := swag.FormatInt32(frRequestedExpiry)
		if fRequestedExpiry != "" {
			if err := r.SetFormParam("requested_expiry", fRequestedExpiry); err != nil {
				return err
			}
		}

	}

	// form param scope
	frScope := o.Scope
	fScope := frScope
	if fScope != "" {
		if err := r.SetFormParam("scope", fScope); err != nil {
			return err
		}
	}

	if o.UserCode != nil {

		// form param user_code
		var frUserCode string
		if o.UserCode != nil {
			frUserCode = *o.UserCode
		}
		fUserCode := frUserCode
		if fUserCode != "" {
			if err := r.SetFormParam("user_code", fUserCode); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
