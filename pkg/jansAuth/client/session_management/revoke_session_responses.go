// Code generated by go-swagger; DO NOT EDIT.

package session_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/pkg/jansAuth/models"
)

// RevokeSessionReader is a Reader for the RevokeSession structure.
type RevokeSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRevokeSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRevokeSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRevokeSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRevokeSessionOK creates a RevokeSessionOK with default headers values
func NewRevokeSessionOK() *RevokeSessionOK {
	return &RevokeSessionOK{}
}

/*RevokeSessionOK handles this case with default header values.

OK - Returned if request was processed successfully. Means it will return in case sessions are found as well as in case sessions are not found (error is not returned to not disclose internal information).
*/
type RevokeSessionOK struct {
}

func (o *RevokeSessionOK) Error() string {
	return fmt.Sprintf("[POST /revoke_session][%d] revokeSessionOK ", 200)
}

func (o *RevokeSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevokeSessionUnauthorized creates a RevokeSessionUnauthorized with default headers values
func NewRevokeSessionUnauthorized() *RevokeSessionUnauthorized {
	return &RevokeSessionUnauthorized{}
}

/*RevokeSessionUnauthorized handles this case with default header values.

Unauthorized access request.
*/
type RevokeSessionUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *RevokeSessionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /revoke_session][%d] revokeSessionUnauthorized  %+v", 401, o.Payload)
}

func (o *RevokeSessionUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RevokeSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeSessionInternalServerError creates a RevokeSessionInternalServerError with default headers values
func NewRevokeSessionInternalServerError() *RevokeSessionInternalServerError {
	return &RevokeSessionInternalServerError{}
}

/*RevokeSessionInternalServerError handles this case with default header values.

Internal error occured. Please check log file for details.
*/
type RevokeSessionInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *RevokeSessionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /revoke_session][%d] revokeSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *RevokeSessionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *RevokeSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
