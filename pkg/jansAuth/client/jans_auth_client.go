// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/pkg/jansAuth/client/authorization"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/client_info"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/client_registration"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/fido2"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/fido_u2f"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/json_web_key_set"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/registration"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/server_configuration"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/session_management"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/token"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/token_introspection"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/uma2_resource"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/uma_scope"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/uma_user_managed_access"
	"github.com/timdrysdale/gojans/pkg/jansAuth/client/user_info"
)

// Default jans auth HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "virtserver.swaggerhub.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/yuriyz1/oxauth/4.2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new jans auth HTTP client.
func NewHTTPClient(formats strfmt.Registry) *JansAuth {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new jans auth HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *JansAuth {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new jans auth client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *JansAuth {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(JansAuth)
	cli.Transport = transport
	cli.Authorization = authorization.New(transport, formats)
	cli.ClientInfo = client_info.New(transport, formats)
	cli.ClientRegistration = client_registration.New(transport, formats)
	cli.FIDO2 = fido2.New(transport, formats)
	cli.FIDOU2F = fido_u2f.New(transport, formats)
	cli.JSONWebKeySet = json_web_key_set.New(transport, formats)
	cli.Registration = registration.New(transport, formats)
	cli.ServerConfiguration = server_configuration.New(transport, formats)
	cli.SessionManagement = session_management.New(transport, formats)
	cli.Token = token.New(transport, formats)
	cli.TokenIntrospection = token_introspection.New(transport, formats)
	cli.UMA2Resource = uma2_resource.New(transport, formats)
	cli.UMAScope = uma_scope.New(transport, formats)
	cli.UMAUserManagedAccess = uma_user_managed_access.New(transport, formats)
	cli.UserInfo = user_info.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// JansAuth is a client for jans auth
type JansAuth struct {
	Authorization authorization.ClientService

	ClientInfo client_info.ClientService

	ClientRegistration client_registration.ClientService

	FIDO2 fido2.ClientService

	FIDOU2F fido_u2f.ClientService

	JSONWebKeySet json_web_key_set.ClientService

	Registration registration.ClientService

	ServerConfiguration server_configuration.ClientService

	SessionManagement session_management.ClientService

	Token token.ClientService

	TokenIntrospection token_introspection.ClientService

	UMA2Resource uma2_resource.ClientService

	UMAScope uma_scope.ClientService

	UMAUserManagedAccess uma_user_managed_access.ClientService

	UserInfo user_info.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *JansAuth) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Authorization.SetTransport(transport)
	c.ClientInfo.SetTransport(transport)
	c.ClientRegistration.SetTransport(transport)
	c.FIDO2.SetTransport(transport)
	c.FIDOU2F.SetTransport(transport)
	c.JSONWebKeySet.SetTransport(transport)
	c.Registration.SetTransport(transport)
	c.ServerConfiguration.SetTransport(transport)
	c.SessionManagement.SetTransport(transport)
	c.Token.SetTransport(transport)
	c.TokenIntrospection.SetTransport(transport)
	c.UMA2Resource.SetTransport(transport)
	c.UMAScope.SetTransport(transport)
	c.UMAUserManagedAccess.SetTransport(transport)
	c.UserInfo.SetTransport(transport)
}
