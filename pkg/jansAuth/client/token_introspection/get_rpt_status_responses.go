// Code generated by go-swagger; DO NOT EDIT.

package token_introspection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/pkg/jansAuth/models"
)

// GetRptStatusReader is a Reader for the GetRptStatus structure.
type GetRptStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRptStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRptStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 405:
		result := NewGetRptStatusMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRptStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRptStatusOK creates a GetRptStatusOK with default headers values
func NewGetRptStatusOK() *GetRptStatusOK {
	return &GetRptStatusOK{}
}

/*GetRptStatusOK handles this case with default header values.

OK
*/
type GetRptStatusOK struct {
	Payload *models.RptIntrospectionResponse
}

func (o *GetRptStatusOK) Error() string {
	return fmt.Sprintf("[GET /rpt/status][%d] getRptStatusOK  %+v", 200, o.Payload)
}

func (o *GetRptStatusOK) GetPayload() *models.RptIntrospectionResponse {
	return o.Payload
}

func (o *GetRptStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RptIntrospectionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRptStatusMethodNotAllowed creates a GetRptStatusMethodNotAllowed with default headers values
func NewGetRptStatusMethodNotAllowed() *GetRptStatusMethodNotAllowed {
	return &GetRptStatusMethodNotAllowed{}
}

/*GetRptStatusMethodNotAllowed handles this case with default header values.

Introspection of RPT is not allowed.
*/
type GetRptStatusMethodNotAllowed struct {
	Payload *models.ErrorResponse
}

func (o *GetRptStatusMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /rpt/status][%d] getRptStatusMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetRptStatusMethodNotAllowed) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRptStatusMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRptStatusInternalServerError creates a GetRptStatusInternalServerError with default headers values
func NewGetRptStatusInternalServerError() *GetRptStatusInternalServerError {
	return &GetRptStatusInternalServerError{}
}

/*GetRptStatusInternalServerError handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type GetRptStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetRptStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /rpt/status][%d] getRptStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRptStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetRptStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
