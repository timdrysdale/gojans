// Code generated by go-swagger; DO NOT EDIT.

package uma_scope

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/pkg/jansAuth/models"
)

// GetUMAScopesReader is a Reader for the GetUMAScopes structure.
type GetUMAScopesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUMAScopesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUMAScopesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetUMAScopesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUMAScopesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUMAScopesOK creates a GetUMAScopesOK with default headers values
func NewGetUMAScopesOK() *GetUMAScopesOK {
	return &GetUMAScopesOK{}
}

/*GetUMAScopesOK handles this case with default header values.

OK
*/
type GetUMAScopesOK struct {
	Payload *models.UMAScopeDescription
}

func (o *GetUMAScopesOK) Error() string {
	return fmt.Sprintf("[GET /uma/scopes][%d] getUmaScopesOK  %+v", 200, o.Payload)
}

func (o *GetUMAScopesOK) GetPayload() *models.UMAScopeDescription {
	return o.Payload
}

func (o *GetUMAScopesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UMAScopeDescription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUMAScopesNotFound creates a GetUMAScopesNotFound with default headers values
func NewGetUMAScopesNotFound() *GetUMAScopesNotFound {
	return &GetUMAScopesNotFound{}
}

/*GetUMAScopesNotFound handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type GetUMAScopesNotFound struct {
	Payload *models.ErrorResponse
}

func (o *GetUMAScopesNotFound) Error() string {
	return fmt.Sprintf("[GET /uma/scopes][%d] getUmaScopesNotFound  %+v", 404, o.Payload)
}

func (o *GetUMAScopesNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUMAScopesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUMAScopesInternalServerError creates a GetUMAScopesInternalServerError with default headers values
func NewGetUMAScopesInternalServerError() *GetUMAScopesInternalServerError {
	return &GetUMAScopesInternalServerError{}
}

/*GetUMAScopesInternalServerError handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type GetUMAScopesInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetUMAScopesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /uma/scopes][%d] getUmaScopesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUMAScopesInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUMAScopesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
