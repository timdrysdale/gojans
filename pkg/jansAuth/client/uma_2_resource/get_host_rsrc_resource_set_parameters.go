// Code generated by go-swagger; DO NOT EDIT.

package uma_2_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetHostRsrcResourceSetParams creates a new GetHostRsrcResourceSetParams object
// with the default values initialized.
func NewGetHostRsrcResourceSetParams() *GetHostRsrcResourceSetParams {
	var ()
	return &GetHostRsrcResourceSetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHostRsrcResourceSetParamsWithTimeout creates a new GetHostRsrcResourceSetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHostRsrcResourceSetParamsWithTimeout(timeout time.Duration) *GetHostRsrcResourceSetParams {
	var ()
	return &GetHostRsrcResourceSetParams{

		timeout: timeout,
	}
}

// NewGetHostRsrcResourceSetParamsWithContext creates a new GetHostRsrcResourceSetParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHostRsrcResourceSetParamsWithContext(ctx context.Context) *GetHostRsrcResourceSetParams {
	var ()
	return &GetHostRsrcResourceSetParams{

		Context: ctx,
	}
}

// NewGetHostRsrcResourceSetParamsWithHTTPClient creates a new GetHostRsrcResourceSetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHostRsrcResourceSetParamsWithHTTPClient(client *http.Client) *GetHostRsrcResourceSetParams {
	var ()
	return &GetHostRsrcResourceSetParams{
		HTTPClient: client,
	}
}

/*GetHostRsrcResourceSetParams contains all the parameters to send to the API endpoint
for the get host rsrc resource set operation typically these are written to a http.Request
*/
type GetHostRsrcResourceSetParams struct {

	/*Authorization*/
	Authorization string
	/*Scope
	  Scope uri.

	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) WithTimeout(timeout time.Duration) *GetHostRsrcResourceSetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) WithContext(ctx context.Context) *GetHostRsrcResourceSetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) WithHTTPClient(client *http.Client) *GetHostRsrcResourceSetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) WithAuthorization(authorization string) *GetHostRsrcResourceSetParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithScope adds the scope to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) WithScope(scope *string) *GetHostRsrcResourceSetParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get host rsrc resource set params
func (o *GetHostRsrcResourceSetParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GetHostRsrcResourceSetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
