// Code generated by go-swagger; DO NOT EDIT.

package uma_2_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new uma 2 resource API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for uma 2 resource API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteHostRsrcResourceSet(params *DeleteHostRsrcResourceSetParams) (*DeleteHostRsrcResourceSetNoContent, error)

	GetHostRsrcResourceSet(params *GetHostRsrcResourceSetParams) (*GetHostRsrcResourceSetOK, error)

	GetHostRsrcResourceSetRsid(params *GetHostRsrcResourceSetRsidParams) (*GetHostRsrcResourceSetRsidOK, error)

	PostHostRsrcResourceSet(params *PostHostRsrcResourceSetParams) (*PostHostRsrcResourceSetCreated, error)

	PutHostRsrcResourceSetRsid(params *PutHostRsrcResourceSetRsidParams) (*PutHostRsrcResourceSetRsidOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteHostRsrcResourceSet deletes host rsrc resource set

  Deletes a previously registered resource.
*/
func (a *Client) DeleteHostRsrcResourceSet(params *DeleteHostRsrcResourceSetParams) (*DeleteHostRsrcResourceSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHostRsrcResourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "delete-host-rsrc-resource_set",
		Method:             "DELETE",
		PathPattern:        "/host/rsrc/resource_set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHostRsrcResourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHostRsrcResourceSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete-host-rsrc-resource_set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHostRsrcResourceSet gets host rsrc resource set

  Lists all previously registered resource.
*/
func (a *Client) GetHostRsrcResourceSet(params *GetHostRsrcResourceSetParams) (*GetHostRsrcResourceSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostRsrcResourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-host-rsrc-resource_set",
		Method:             "GET",
		PathPattern:        "/host/rsrc/resource_set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostRsrcResourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostRsrcResourceSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-host-rsrc-resource_set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHostRsrcResourceSetRsid gets host rsrc resource set rsid

  Reads a previously registered resource.
*/
func (a *Client) GetHostRsrcResourceSetRsid(params *GetHostRsrcResourceSetRsidParams) (*GetHostRsrcResourceSetRsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostRsrcResourceSetRsidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-host-rsrc-resource_set/{rsid}",
		Method:             "GET",
		PathPattern:        "/host/rsrc/resource_set/{rsid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHostRsrcResourceSetRsidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostRsrcResourceSetRsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-host-rsrc-resource_set/{rsid}: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostHostRsrcResourceSet posts host rsrc resource set

  Adds a new resource description.
*/
func (a *Client) PostHostRsrcResourceSet(params *PostHostRsrcResourceSetParams) (*PostHostRsrcResourceSetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHostRsrcResourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-host-rsrc-resource_set",
		Method:             "POST",
		PathPattern:        "/host/rsrc/resource_set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostHostRsrcResourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHostRsrcResourceSetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-host-rsrc-resource_set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutHostRsrcResourceSetRsid puts host rsrc resource set rsid

  Updates a previously registered resource.
*/
func (a *Client) PutHostRsrcResourceSetRsid(params *PutHostRsrcResourceSetRsidParams) (*PutHostRsrcResourceSetRsidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutHostRsrcResourceSetRsidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "put-host-rsrc-resource_set{rsid}",
		Method:             "PUT",
		PathPattern:        "/host/rsrc/resource_set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutHostRsrcResourceSetRsidReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutHostRsrcResourceSetRsidOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for put-host-rsrc-resource_set{rsid}: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
