// Code generated by go-swagger; DO NOT EDIT.

package fido2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/src/jansAuth/models"
)

// OptionsReader is a Reader for the Options structure.
type OptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOptionsOK creates a OptionsOK with default headers values
func NewOptionsOK() *OptionsOK {
	return &OptionsOK{}
}

/*OptionsOK handles this case with default header values.

OK
*/
type OptionsOK struct {
	Payload *models.AssertionOptionsResponse
}

func (o *OptionsOK) Error() string {
	return fmt.Sprintf("[POST /fido2/assertion/options][%d] optionsOK  %+v", 200, o.Payload)
}

func (o *OptionsOK) GetPayload() *models.AssertionOptionsResponse {
	return o.Payload
}

func (o *OptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssertionOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOptionsForbidden creates a OptionsForbidden with default headers values
func NewOptionsForbidden() *OptionsForbidden {
	return &OptionsForbidden{}
}

/*OptionsForbidden handles this case with default header values.

Invalid details provided hence access denied.
*/
type OptionsForbidden struct {
	Payload *models.ErrorResponse
}

func (o *OptionsForbidden) Error() string {
	return fmt.Sprintf("[POST /fido2/assertion/options][%d] optionsForbidden  %+v", 403, o.Payload)
}

func (o *OptionsForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOptionsInternalServerError creates a OptionsInternalServerError with default headers values
func NewOptionsInternalServerError() *OptionsInternalServerError {
	return &OptionsInternalServerError{}
}

/*OptionsInternalServerError handles this case with default header values.

Internal error occured. Please check log file for details.
*/
type OptionsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *OptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fido2/assertion/options][%d] optionsInternalServerError  %+v", 500, o.Payload)
}

func (o *OptionsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *OptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
