// Code generated by go-swagger; DO NOT EDIT.

package fido_u2f

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFIDOU2FAuthenticationParams creates a new GetFIDOU2FAuthenticationParams object
// with the default values initialized.
func NewGetFIDOU2FAuthenticationParams() *GetFIDOU2FAuthenticationParams {
	var ()
	return &GetFIDOU2FAuthenticationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFIDOU2FAuthenticationParamsWithTimeout creates a new GetFIDOU2FAuthenticationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFIDOU2FAuthenticationParamsWithTimeout(timeout time.Duration) *GetFIDOU2FAuthenticationParams {
	var ()
	return &GetFIDOU2FAuthenticationParams{

		timeout: timeout,
	}
}

// NewGetFIDOU2FAuthenticationParamsWithContext creates a new GetFIDOU2FAuthenticationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFIDOU2FAuthenticationParamsWithContext(ctx context.Context) *GetFIDOU2FAuthenticationParams {
	var ()
	return &GetFIDOU2FAuthenticationParams{

		Context: ctx,
	}
}

// NewGetFIDOU2FAuthenticationParamsWithHTTPClient creates a new GetFIDOU2FAuthenticationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFIDOU2FAuthenticationParamsWithHTTPClient(client *http.Client) *GetFIDOU2FAuthenticationParams {
	var ()
	return &GetFIDOU2FAuthenticationParams{
		HTTPClient: client,
	}
}

/*GetFIDOU2FAuthenticationParams contains all the parameters to send to the API endpoint
for the get fido u2f authentication operation typically these are written to a http.Request
*/
type GetFIDOU2FAuthenticationParams struct {

	/*Application
	  The application id that the RP would like to assert.

	*/
	Application *string
	/*Keyhandle*/
	Keyhandle *string
	/*SessionID*/
	SessionID *string
	/*Username*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithTimeout(timeout time.Duration) *GetFIDOU2FAuthenticationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithContext(ctx context.Context) *GetFIDOU2FAuthenticationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithHTTPClient(client *http.Client) *GetFIDOU2FAuthenticationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithApplication(application *string) *GetFIDOU2FAuthenticationParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetApplication(application *string) {
	o.Application = application
}

// WithKeyhandle adds the keyhandle to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithKeyhandle(keyhandle *string) *GetFIDOU2FAuthenticationParams {
	o.SetKeyhandle(keyhandle)
	return o
}

// SetKeyhandle adds the keyhandle to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetKeyhandle(keyhandle *string) {
	o.Keyhandle = keyhandle
}

// WithSessionID adds the sessionID to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithSessionID(sessionID *string) *GetFIDOU2FAuthenticationParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetSessionID(sessionID *string) {
	o.SessionID = sessionID
}

// WithUsername adds the username to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) WithUsername(username string) *GetFIDOU2FAuthenticationParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get fido u2f authentication params
func (o *GetFIDOU2FAuthenticationParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetFIDOU2FAuthenticationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Application != nil {

		// query param application
		var qrApplication string
		if o.Application != nil {
			qrApplication = *o.Application
		}
		qApplication := qrApplication
		if qApplication != "" {
			if err := r.SetQueryParam("application", qApplication); err != nil {
				return err
			}
		}

	}

	if o.Keyhandle != nil {

		// query param keyhandle
		var qrKeyhandle string
		if o.Keyhandle != nil {
			qrKeyhandle = *o.Keyhandle
		}
		qKeyhandle := qrKeyhandle
		if qKeyhandle != "" {
			if err := r.SetQueryParam("keyhandle", qKeyhandle); err != nil {
				return err
			}
		}

	}

	if o.SessionID != nil {

		// query param session_id
		var qrSessionID string
		if o.SessionID != nil {
			qrSessionID = *o.SessionID
		}
		qSessionID := qrSessionID
		if qSessionID != "" {
			if err := r.SetQueryParam("session_id", qSessionID); err != nil {
				return err
			}
		}

	}

	// query param username
	qrUsername := o.Username
	qUsername := qrUsername
	if qUsername != "" {
		if err := r.SetQueryParam("username", qUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
