// Code generated by go-swagger; DO NOT EDIT.

package uma_user_managed_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/src/jansAuth/models"
)

// PostUMAGatherClaimsReader is a Reader for the PostUMAGatherClaims structure.
type PostUMAGatherClaimsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostUMAGatherClaimsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostUMAGatherClaimsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostUMAGatherClaimsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostUMAGatherClaimsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostUMAGatherClaimsOK creates a PostUMAGatherClaimsOK with default headers values
func NewPostUMAGatherClaimsOK() *PostUMAGatherClaimsOK {
	return &PostUMAGatherClaimsOK{}
}

/*PostUMAGatherClaimsOK handles this case with default header values.

PostUMAGatherClaimsOK post Uma gather claims o k
*/
type PostUMAGatherClaimsOK struct {
}

func (o *PostUMAGatherClaimsOK) Error() string {
	return fmt.Sprintf("[POST /uma/gather_claims][%d] postUmaGatherClaimsOK ", 200)
}

func (o *PostUMAGatherClaimsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostUMAGatherClaimsBadRequest creates a PostUMAGatherClaimsBadRequest with default headers values
func NewPostUMAGatherClaimsBadRequest() *PostUMAGatherClaimsBadRequest {
	return &PostUMAGatherClaimsBadRequest{}
}

/*PostUMAGatherClaimsBadRequest handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type PostUMAGatherClaimsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PostUMAGatherClaimsBadRequest) Error() string {
	return fmt.Sprintf("[POST /uma/gather_claims][%d] postUmaGatherClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *PostUMAGatherClaimsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostUMAGatherClaimsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostUMAGatherClaimsInternalServerError creates a PostUMAGatherClaimsInternalServerError with default headers values
func NewPostUMAGatherClaimsInternalServerError() *PostUMAGatherClaimsInternalServerError {
	return &PostUMAGatherClaimsInternalServerError{}
}

/*PostUMAGatherClaimsInternalServerError handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type PostUMAGatherClaimsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PostUMAGatherClaimsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /uma/gather_claims][%d] postUmaGatherClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostUMAGatherClaimsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PostUMAGatherClaimsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
