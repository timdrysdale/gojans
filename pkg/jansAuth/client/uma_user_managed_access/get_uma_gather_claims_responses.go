// Code generated by go-swagger; DO NOT EDIT.

package uma_user_managed_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/src/jansAuth/models"
)

// GetUMAGatherClaimsReader is a Reader for the GetUMAGatherClaims structure.
type GetUMAGatherClaimsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUMAGatherClaimsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUMAGatherClaimsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUMAGatherClaimsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUMAGatherClaimsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUMAGatherClaimsOK creates a GetUMAGatherClaimsOK with default headers values
func NewGetUMAGatherClaimsOK() *GetUMAGatherClaimsOK {
	return &GetUMAGatherClaimsOK{}
}

/*GetUMAGatherClaimsOK handles this case with default header values.

GetUMAGatherClaimsOK get Uma gather claims o k
*/
type GetUMAGatherClaimsOK struct {
}

func (o *GetUMAGatherClaimsOK) Error() string {
	return fmt.Sprintf("[GET /uma/gather_claims][%d] getUmaGatherClaimsOK ", 200)
}

func (o *GetUMAGatherClaimsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUMAGatherClaimsBadRequest creates a GetUMAGatherClaimsBadRequest with default headers values
func NewGetUMAGatherClaimsBadRequest() *GetUMAGatherClaimsBadRequest {
	return &GetUMAGatherClaimsBadRequest{}
}

/*GetUMAGatherClaimsBadRequest handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type GetUMAGatherClaimsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetUMAGatherClaimsBadRequest) Error() string {
	return fmt.Sprintf("[GET /uma/gather_claims][%d] getUmaGatherClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *GetUMAGatherClaimsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUMAGatherClaimsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUMAGatherClaimsInternalServerError creates a GetUMAGatherClaimsInternalServerError with default headers values
func NewGetUMAGatherClaimsInternalServerError() *GetUMAGatherClaimsInternalServerError {
	return &GetUMAGatherClaimsInternalServerError{}
}

/*GetUMAGatherClaimsInternalServerError handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type GetUMAGatherClaimsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetUMAGatherClaimsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /uma/gather_claims][%d] getUmaGatherClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetUMAGatherClaimsInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetUMAGatherClaimsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
