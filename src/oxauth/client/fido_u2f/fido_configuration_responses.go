// Code generated by go-swagger; DO NOT EDIT.

package fido_u2f

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/timdrysdale/gojans/go-swagger/gluu-4.2.1/oxauth/models"
)

// FIDOConfigurationReader is a Reader for the FIDOConfiguration structure.
type FIDOConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FIDOConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFIDOConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewFIDOConfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFIDOConfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFIDOConfigurationOK creates a FIDOConfigurationOK with default headers values
func NewFIDOConfigurationOK() *FIDOConfigurationOK {
	return &FIDOConfigurationOK{}
}

/*FIDOConfigurationOK handles this case with default header values.

OK
*/
type FIDOConfigurationOK struct {
	Payload *models.U2FConfiguration
}

func (o *FIDOConfigurationOK) Error() string {
	return fmt.Sprintf("[GET /fido-configuration][%d] fidoConfigurationOK  %+v", 200, o.Payload)
}

func (o *FIDOConfigurationOK) GetPayload() *models.U2FConfiguration {
	return o.Payload
}

func (o *FIDOConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.U2FConfiguration)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFIDOConfigurationForbidden creates a FIDOConfigurationForbidden with default headers values
func NewFIDOConfigurationForbidden() *FIDOConfigurationForbidden {
	return &FIDOConfigurationForbidden{}
}

/*FIDOConfigurationForbidden handles this case with default header values.

Invalid details provided hence access denied.
*/
type FIDOConfigurationForbidden struct {
	Payload *models.ErrorResponse
}

func (o *FIDOConfigurationForbidden) Error() string {
	return fmt.Sprintf("[GET /fido-configuration][%d] fidoConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *FIDOConfigurationForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *FIDOConfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFIDOConfigurationInternalServerError creates a FIDOConfigurationInternalServerError with default headers values
func NewFIDOConfigurationInternalServerError() *FIDOConfigurationInternalServerError {
	return &FIDOConfigurationInternalServerError{}
}

/*FIDOConfigurationInternalServerError handles this case with default header values.

Invalid parameters provided to endpoint.
*/
type FIDOConfigurationInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *FIDOConfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fido-configuration][%d] fidoConfigurationInternalServerError  %+v", 500, o.Payload)
}

func (o *FIDOConfigurationInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *FIDOConfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
