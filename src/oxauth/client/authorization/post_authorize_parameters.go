// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostAuthorizeParams creates a new PostAuthorizeParams object
// with the default values initialized.
func NewPostAuthorizeParams() *PostAuthorizeParams {
	var ()
	return &PostAuthorizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostAuthorizeParamsWithTimeout creates a new PostAuthorizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostAuthorizeParamsWithTimeout(timeout time.Duration) *PostAuthorizeParams {
	var ()
	return &PostAuthorizeParams{

		timeout: timeout,
	}
}

// NewPostAuthorizeParamsWithContext creates a new PostAuthorizeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostAuthorizeParamsWithContext(ctx context.Context) *PostAuthorizeParams {
	var ()
	return &PostAuthorizeParams{

		Context: ctx,
	}
}

// NewPostAuthorizeParamsWithHTTPClient creates a new PostAuthorizeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostAuthorizeParamsWithHTTPClient(client *http.Client) *PostAuthorizeParams {
	var ()
	return &PostAuthorizeParams{
		HTTPClient: client,
	}
}

/*PostAuthorizeParams contains all the parameters to send to the API endpoint
for the post authorize operation typically these are written to a http.Request
*/
type PostAuthorizeParams struct {

	/*AcrValues
	  Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference.

	*/
	AcrValues *string
	/*AmrValues
	  AMR Values.

	*/
	AmrValues *string
	/*Claims
	  Requested Claims.

	*/
	Claims *string
	/*ClientID
	  OAuth 2.0 Client Identifier valid at the Authorization Server.

	*/
	ClientID string
	/*CodeChallenge
	  PKCE code challenge.

	*/
	CodeChallenge *string
	/*CodeChallengeMethod
	  PKCE code challenge method.

	*/
	CodeChallengeMethod *string
	/*CustomResponseHeaders
	  Custom Response Headers.

	*/
	CustomResponseHeaders *string
	/*Display
	  ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.

	*/
	Display *string
	/*IDTokenHint
	  ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response.

	*/
	IDTokenHint *string
	/*LoginHint
	  Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary).

	*/
	LoginHint *string
	/*MaxAge
	  Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.

	*/
	MaxAge *int32
	/*Nonce
	  String value used to associate a Client session with an ID Token, and to mitigate replay attacks.

	*/
	Nonce *string
	/*OriginHeaders
	  Origin headers. Used in custom workflows.

	*/
	OriginHeaders *string
	/*Prompt
	  Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent.

	*/
	Prompt *string
	/*RedirectURI
	  Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.

	*/
	RedirectURI string
	/*Request
	  This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value. It represents the request as a JWT whose Claims are the request parameters.

	*/
	Request *string
	/*RequestSessionID
	  Request session id.

	*/
	RequestSessionID *string
	/*RequestURI
	  This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.

	*/
	RequestURI *string
	/*ResponseMode
	  Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.

	*/
	ResponseMode *string
	/*ResponseType
	  OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used.

	*/
	ResponseType string
	/*Scope
	  OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present.

	*/
	Scope string
	/*SessionID
	  Session id of this call.

	*/
	SessionID *string
	/*State
	  Opaque value used to maintain state between the request and the callback.

	*/
	State *string
	/*UILocales
	  End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference.

	*/
	UILocales *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post authorize params
func (o *PostAuthorizeParams) WithTimeout(timeout time.Duration) *PostAuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post authorize params
func (o *PostAuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post authorize params
func (o *PostAuthorizeParams) WithContext(ctx context.Context) *PostAuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post authorize params
func (o *PostAuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post authorize params
func (o *PostAuthorizeParams) WithHTTPClient(client *http.Client) *PostAuthorizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post authorize params
func (o *PostAuthorizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcrValues adds the acrValues to the post authorize params
func (o *PostAuthorizeParams) WithAcrValues(acrValues *string) *PostAuthorizeParams {
	o.SetAcrValues(acrValues)
	return o
}

// SetAcrValues adds the acrValues to the post authorize params
func (o *PostAuthorizeParams) SetAcrValues(acrValues *string) {
	o.AcrValues = acrValues
}

// WithAmrValues adds the amrValues to the post authorize params
func (o *PostAuthorizeParams) WithAmrValues(amrValues *string) *PostAuthorizeParams {
	o.SetAmrValues(amrValues)
	return o
}

// SetAmrValues adds the amrValues to the post authorize params
func (o *PostAuthorizeParams) SetAmrValues(amrValues *string) {
	o.AmrValues = amrValues
}

// WithClaims adds the claims to the post authorize params
func (o *PostAuthorizeParams) WithClaims(claims *string) *PostAuthorizeParams {
	o.SetClaims(claims)
	return o
}

// SetClaims adds the claims to the post authorize params
func (o *PostAuthorizeParams) SetClaims(claims *string) {
	o.Claims = claims
}

// WithClientID adds the clientID to the post authorize params
func (o *PostAuthorizeParams) WithClientID(clientID string) *PostAuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the post authorize params
func (o *PostAuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithCodeChallenge adds the codeChallenge to the post authorize params
func (o *PostAuthorizeParams) WithCodeChallenge(codeChallenge *string) *PostAuthorizeParams {
	o.SetCodeChallenge(codeChallenge)
	return o
}

// SetCodeChallenge adds the codeChallenge to the post authorize params
func (o *PostAuthorizeParams) SetCodeChallenge(codeChallenge *string) {
	o.CodeChallenge = codeChallenge
}

// WithCodeChallengeMethod adds the codeChallengeMethod to the post authorize params
func (o *PostAuthorizeParams) WithCodeChallengeMethod(codeChallengeMethod *string) *PostAuthorizeParams {
	o.SetCodeChallengeMethod(codeChallengeMethod)
	return o
}

// SetCodeChallengeMethod adds the codeChallengeMethod to the post authorize params
func (o *PostAuthorizeParams) SetCodeChallengeMethod(codeChallengeMethod *string) {
	o.CodeChallengeMethod = codeChallengeMethod
}

// WithCustomResponseHeaders adds the customResponseHeaders to the post authorize params
func (o *PostAuthorizeParams) WithCustomResponseHeaders(customResponseHeaders *string) *PostAuthorizeParams {
	o.SetCustomResponseHeaders(customResponseHeaders)
	return o
}

// SetCustomResponseHeaders adds the customResponseHeaders to the post authorize params
func (o *PostAuthorizeParams) SetCustomResponseHeaders(customResponseHeaders *string) {
	o.CustomResponseHeaders = customResponseHeaders
}

// WithDisplay adds the display to the post authorize params
func (o *PostAuthorizeParams) WithDisplay(display *string) *PostAuthorizeParams {
	o.SetDisplay(display)
	return o
}

// SetDisplay adds the display to the post authorize params
func (o *PostAuthorizeParams) SetDisplay(display *string) {
	o.Display = display
}

// WithIDTokenHint adds the iDTokenHint to the post authorize params
func (o *PostAuthorizeParams) WithIDTokenHint(iDTokenHint *string) *PostAuthorizeParams {
	o.SetIDTokenHint(iDTokenHint)
	return o
}

// SetIDTokenHint adds the idTokenHint to the post authorize params
func (o *PostAuthorizeParams) SetIDTokenHint(iDTokenHint *string) {
	o.IDTokenHint = iDTokenHint
}

// WithLoginHint adds the loginHint to the post authorize params
func (o *PostAuthorizeParams) WithLoginHint(loginHint *string) *PostAuthorizeParams {
	o.SetLoginHint(loginHint)
	return o
}

// SetLoginHint adds the loginHint to the post authorize params
func (o *PostAuthorizeParams) SetLoginHint(loginHint *string) {
	o.LoginHint = loginHint
}

// WithMaxAge adds the maxAge to the post authorize params
func (o *PostAuthorizeParams) WithMaxAge(maxAge *int32) *PostAuthorizeParams {
	o.SetMaxAge(maxAge)
	return o
}

// SetMaxAge adds the maxAge to the post authorize params
func (o *PostAuthorizeParams) SetMaxAge(maxAge *int32) {
	o.MaxAge = maxAge
}

// WithNonce adds the nonce to the post authorize params
func (o *PostAuthorizeParams) WithNonce(nonce *string) *PostAuthorizeParams {
	o.SetNonce(nonce)
	return o
}

// SetNonce adds the nonce to the post authorize params
func (o *PostAuthorizeParams) SetNonce(nonce *string) {
	o.Nonce = nonce
}

// WithOriginHeaders adds the originHeaders to the post authorize params
func (o *PostAuthorizeParams) WithOriginHeaders(originHeaders *string) *PostAuthorizeParams {
	o.SetOriginHeaders(originHeaders)
	return o
}

// SetOriginHeaders adds the originHeaders to the post authorize params
func (o *PostAuthorizeParams) SetOriginHeaders(originHeaders *string) {
	o.OriginHeaders = originHeaders
}

// WithPrompt adds the prompt to the post authorize params
func (o *PostAuthorizeParams) WithPrompt(prompt *string) *PostAuthorizeParams {
	o.SetPrompt(prompt)
	return o
}

// SetPrompt adds the prompt to the post authorize params
func (o *PostAuthorizeParams) SetPrompt(prompt *string) {
	o.Prompt = prompt
}

// WithRedirectURI adds the redirectURI to the post authorize params
func (o *PostAuthorizeParams) WithRedirectURI(redirectURI string) *PostAuthorizeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the post authorize params
func (o *PostAuthorizeParams) SetRedirectURI(redirectURI string) {
	o.RedirectURI = redirectURI
}

// WithRequest adds the request to the post authorize params
func (o *PostAuthorizeParams) WithRequest(request *string) *PostAuthorizeParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the post authorize params
func (o *PostAuthorizeParams) SetRequest(request *string) {
	o.Request = request
}

// WithRequestSessionID adds the requestSessionID to the post authorize params
func (o *PostAuthorizeParams) WithRequestSessionID(requestSessionID *string) *PostAuthorizeParams {
	o.SetRequestSessionID(requestSessionID)
	return o
}

// SetRequestSessionID adds the requestSessionId to the post authorize params
func (o *PostAuthorizeParams) SetRequestSessionID(requestSessionID *string) {
	o.RequestSessionID = requestSessionID
}

// WithRequestURI adds the requestURI to the post authorize params
func (o *PostAuthorizeParams) WithRequestURI(requestURI *string) *PostAuthorizeParams {
	o.SetRequestURI(requestURI)
	return o
}

// SetRequestURI adds the requestUri to the post authorize params
func (o *PostAuthorizeParams) SetRequestURI(requestURI *string) {
	o.RequestURI = requestURI
}

// WithResponseMode adds the responseMode to the post authorize params
func (o *PostAuthorizeParams) WithResponseMode(responseMode *string) *PostAuthorizeParams {
	o.SetResponseMode(responseMode)
	return o
}

// SetResponseMode adds the responseMode to the post authorize params
func (o *PostAuthorizeParams) SetResponseMode(responseMode *string) {
	o.ResponseMode = responseMode
}

// WithResponseType adds the responseType to the post authorize params
func (o *PostAuthorizeParams) WithResponseType(responseType string) *PostAuthorizeParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the post authorize params
func (o *PostAuthorizeParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the post authorize params
func (o *PostAuthorizeParams) WithScope(scope string) *PostAuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the post authorize params
func (o *PostAuthorizeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithSessionID adds the sessionID to the post authorize params
func (o *PostAuthorizeParams) WithSessionID(sessionID *string) *PostAuthorizeParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the post authorize params
func (o *PostAuthorizeParams) SetSessionID(sessionID *string) {
	o.SessionID = sessionID
}

// WithState adds the state to the post authorize params
func (o *PostAuthorizeParams) WithState(state *string) *PostAuthorizeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the post authorize params
func (o *PostAuthorizeParams) SetState(state *string) {
	o.State = state
}

// WithUILocales adds the uILocales to the post authorize params
func (o *PostAuthorizeParams) WithUILocales(uILocales *string) *PostAuthorizeParams {
	o.SetUILocales(uILocales)
	return o
}

// SetUILocales adds the uiLocales to the post authorize params
func (o *PostAuthorizeParams) SetUILocales(uILocales *string) {
	o.UILocales = uILocales
}

// WriteToRequest writes these params to a swagger request
func (o *PostAuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcrValues != nil {

		// form param acr_values
		var frAcrValues string
		if o.AcrValues != nil {
			frAcrValues = *o.AcrValues
		}
		fAcrValues := frAcrValues
		if fAcrValues != "" {
			if err := r.SetFormParam("acr_values", fAcrValues); err != nil {
				return err
			}
		}

	}

	if o.AmrValues != nil {

		// form param amr_values
		var frAmrValues string
		if o.AmrValues != nil {
			frAmrValues = *o.AmrValues
		}
		fAmrValues := frAmrValues
		if fAmrValues != "" {
			if err := r.SetFormParam("amr_values", fAmrValues); err != nil {
				return err
			}
		}

	}

	if o.Claims != nil {

		// form param claims
		var frClaims string
		if o.Claims != nil {
			frClaims = *o.Claims
		}
		fClaims := frClaims
		if fClaims != "" {
			if err := r.SetFormParam("claims", fClaims); err != nil {
				return err
			}
		}

	}

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	if o.CodeChallenge != nil {

		// form param code_challenge
		var frCodeChallenge string
		if o.CodeChallenge != nil {
			frCodeChallenge = *o.CodeChallenge
		}
		fCodeChallenge := frCodeChallenge
		if fCodeChallenge != "" {
			if err := r.SetFormParam("code_challenge", fCodeChallenge); err != nil {
				return err
			}
		}

	}

	if o.CodeChallengeMethod != nil {

		// form param code_challenge_method
		var frCodeChallengeMethod string
		if o.CodeChallengeMethod != nil {
			frCodeChallengeMethod = *o.CodeChallengeMethod
		}
		fCodeChallengeMethod := frCodeChallengeMethod
		if fCodeChallengeMethod != "" {
			if err := r.SetFormParam("code_challenge_method", fCodeChallengeMethod); err != nil {
				return err
			}
		}

	}

	if o.CustomResponseHeaders != nil {

		// form param custom_response_headers
		var frCustomResponseHeaders string
		if o.CustomResponseHeaders != nil {
			frCustomResponseHeaders = *o.CustomResponseHeaders
		}
		fCustomResponseHeaders := frCustomResponseHeaders
		if fCustomResponseHeaders != "" {
			if err := r.SetFormParam("custom_response_headers", fCustomResponseHeaders); err != nil {
				return err
			}
		}

	}

	if o.Display != nil {

		// form param display
		var frDisplay string
		if o.Display != nil {
			frDisplay = *o.Display
		}
		fDisplay := frDisplay
		if fDisplay != "" {
			if err := r.SetFormParam("display", fDisplay); err != nil {
				return err
			}
		}

	}

	if o.IDTokenHint != nil {

		// form param id_token_hint
		var frIDTokenHint string
		if o.IDTokenHint != nil {
			frIDTokenHint = *o.IDTokenHint
		}
		fIDTokenHint := frIDTokenHint
		if fIDTokenHint != "" {
			if err := r.SetFormParam("id_token_hint", fIDTokenHint); err != nil {
				return err
			}
		}

	}

	if o.LoginHint != nil {

		// form param login_hint
		var frLoginHint string
		if o.LoginHint != nil {
			frLoginHint = *o.LoginHint
		}
		fLoginHint := frLoginHint
		if fLoginHint != "" {
			if err := r.SetFormParam("login_hint", fLoginHint); err != nil {
				return err
			}
		}

	}

	if o.MaxAge != nil {

		// form param max_age
		var frMaxAge int32
		if o.MaxAge != nil {
			frMaxAge = *o.MaxAge
		}
		fMaxAge := swag.FormatInt32(frMaxAge)
		if fMaxAge != "" {
			if err := r.SetFormParam("max_age", fMaxAge); err != nil {
				return err
			}
		}

	}

	if o.Nonce != nil {

		// form param nonce
		var frNonce string
		if o.Nonce != nil {
			frNonce = *o.Nonce
		}
		fNonce := frNonce
		if fNonce != "" {
			if err := r.SetFormParam("nonce", fNonce); err != nil {
				return err
			}
		}

	}

	if o.OriginHeaders != nil {

		// form param origin_headers
		var frOriginHeaders string
		if o.OriginHeaders != nil {
			frOriginHeaders = *o.OriginHeaders
		}
		fOriginHeaders := frOriginHeaders
		if fOriginHeaders != "" {
			if err := r.SetFormParam("origin_headers", fOriginHeaders); err != nil {
				return err
			}
		}

	}

	if o.Prompt != nil {

		// form param prompt
		var frPrompt string
		if o.Prompt != nil {
			frPrompt = *o.Prompt
		}
		fPrompt := frPrompt
		if fPrompt != "" {
			if err := r.SetFormParam("prompt", fPrompt); err != nil {
				return err
			}
		}

	}

	// form param redirect_uri
	frRedirectURI := o.RedirectURI
	fRedirectURI := frRedirectURI
	if fRedirectURI != "" {
		if err := r.SetFormParam("redirect_uri", fRedirectURI); err != nil {
			return err
		}
	}

	if o.Request != nil {

		// form param request
		var frRequest string
		if o.Request != nil {
			frRequest = *o.Request
		}
		fRequest := frRequest
		if fRequest != "" {
			if err := r.SetFormParam("request", fRequest); err != nil {
				return err
			}
		}

	}

	if o.RequestSessionID != nil {

		// form param request_session_id
		var frRequestSessionID string
		if o.RequestSessionID != nil {
			frRequestSessionID = *o.RequestSessionID
		}
		fRequestSessionID := frRequestSessionID
		if fRequestSessionID != "" {
			if err := r.SetFormParam("request_session_id", fRequestSessionID); err != nil {
				return err
			}
		}

	}

	if o.RequestURI != nil {

		// form param request_uri
		var frRequestURI string
		if o.RequestURI != nil {
			frRequestURI = *o.RequestURI
		}
		fRequestURI := frRequestURI
		if fRequestURI != "" {
			if err := r.SetFormParam("request_uri", fRequestURI); err != nil {
				return err
			}
		}

	}

	if o.ResponseMode != nil {

		// form param response_mode
		var frResponseMode string
		if o.ResponseMode != nil {
			frResponseMode = *o.ResponseMode
		}
		fResponseMode := frResponseMode
		if fResponseMode != "" {
			if err := r.SetFormParam("response_mode", fResponseMode); err != nil {
				return err
			}
		}

	}

	// form param response_type
	frResponseType := o.ResponseType
	fResponseType := frResponseType
	if fResponseType != "" {
		if err := r.SetFormParam("response_type", fResponseType); err != nil {
			return err
		}
	}

	// form param scope
	frScope := o.Scope
	fScope := frScope
	if fScope != "" {
		if err := r.SetFormParam("scope", fScope); err != nil {
			return err
		}
	}

	if o.SessionID != nil {

		// form param session_id
		var frSessionID string
		if o.SessionID != nil {
			frSessionID = *o.SessionID
		}
		fSessionID := frSessionID
		if fSessionID != "" {
			if err := r.SetFormParam("session_id", fSessionID); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// form param state
		var frState string
		if o.State != nil {
			frState = *o.State
		}
		fState := frState
		if fState != "" {
			if err := r.SetFormParam("state", fState); err != nil {
				return err
			}
		}

	}

	if o.UILocales != nil {

		// form param ui_locales
		var frUILocales string
		if o.UILocales != nil {
			frUILocales = *o.UILocales
		}
		fUILocales := frUILocales
		if fUILocales != "" {
			if err := r.SetFormParam("ui_locales", fUILocales); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
