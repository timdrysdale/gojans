// Code generated by go-swagger; DO NOT EDIT.

package user_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserinfoParams creates a new GetUserinfoParams object
// with the default values initialized.
func NewGetUserinfoParams() *GetUserinfoParams {
	var ()
	return &GetUserinfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserinfoParamsWithTimeout creates a new GetUserinfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserinfoParamsWithTimeout(timeout time.Duration) *GetUserinfoParams {
	var ()
	return &GetUserinfoParams{

		timeout: timeout,
	}
}

// NewGetUserinfoParamsWithContext creates a new GetUserinfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserinfoParamsWithContext(ctx context.Context) *GetUserinfoParams {
	var ()
	return &GetUserinfoParams{

		Context: ctx,
	}
}

// NewGetUserinfoParamsWithHTTPClient creates a new GetUserinfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserinfoParamsWithHTTPClient(client *http.Client) *GetUserinfoParams {
	var ()
	return &GetUserinfoParams{
		HTTPClient: client,
	}
}

/*GetUserinfoParams contains all the parameters to send to the API endpoint
for the get userinfo operation typically these are written to a http.Request
*/
type GetUserinfoParams struct {

	/*Authorization*/
	Authorization *string
	/*AccessToken
	  OAuth 2.0 Access Token.

	*/
	AccessToken string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get userinfo params
func (o *GetUserinfoParams) WithTimeout(timeout time.Duration) *GetUserinfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get userinfo params
func (o *GetUserinfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get userinfo params
func (o *GetUserinfoParams) WithContext(ctx context.Context) *GetUserinfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get userinfo params
func (o *GetUserinfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get userinfo params
func (o *GetUserinfoParams) WithHTTPClient(client *http.Client) *GetUserinfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get userinfo params
func (o *GetUserinfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get userinfo params
func (o *GetUserinfoParams) WithAuthorization(authorization *string) *GetUserinfoParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get userinfo params
func (o *GetUserinfoParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithAccessToken adds the accessToken to the get userinfo params
func (o *GetUserinfoParams) WithAccessToken(accessToken string) *GetUserinfoParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the get userinfo params
func (o *GetUserinfoParams) SetAccessToken(accessToken string) {
	o.AccessToken = accessToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserinfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// query param access_token
	qrAccessToken := o.AccessToken
	qAccessToken := qrAccessToken
	if qAccessToken != "" {
		if err := r.SetQueryParam("access_token", qAccessToken); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
