// Code generated by go-swagger; DO NOT EDIT.

package session_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new session management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	EndSession(params *EndSessionParams) (*EndSessionOK, error)

	RevokeSession(params *RevokeSessionParams) (*RevokeSessionOK, error)

	SessionStatus(params *SessionStatusParams) (*SessionStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  EndSession ends session

  End current session.
*/
func (a *Client) EndSession(params *EndSessionParams) (*EndSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEndSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "end_session",
		Method:             "GET",
		PathPattern:        "/end_session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EndSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EndSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for end_session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeSession revokes session

  Revoke all sessions for user (requires revoke_session scope).
*/
func (a *Client) RevokeSession(params *RevokeSessionParams) (*RevokeSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revoke-session",
		Method:             "POST",
		PathPattern:        "/revoke_session",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeSessionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revoke-session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SessionStatus sessions status

  Determine current sesion status.
*/
func (a *Client) SessionStatus(params *SessionStatusParams) (*SessionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "session_status",
		Method:             "GET",
		PathPattern:        "/session_status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SessionStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for session_status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
