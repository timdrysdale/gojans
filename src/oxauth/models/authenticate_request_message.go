// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthenticateRequestMessage AuthenticateRequestMessage
//
// FIDO U2F device authentication request.
//
// swagger:model AuthenticateRequestMessage
type AuthenticateRequestMessage struct {

	// The application id that the RP would like to assert.
	// Required: true
	AppID *string `json:"appId"`

	// The websafe-base64-encoded challenge.
	// Required: true
	Challenge *string `json:"challenge"`

	// Websafe-base64 encoding of the key handle obtained from the U2F token during registration.
	// Required: true
	KeyHandle *string `json:"keyHandle"`

	// Version of the protocol that the to-be-registered U2F token must speak.
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this authenticate request message
func (m *AuthenticateRequestMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChallenge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticateRequestMessage) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("appId", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticateRequestMessage) validateChallenge(formats strfmt.Registry) error {

	if err := validate.Required("challenge", "body", m.Challenge); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticateRequestMessage) validateKeyHandle(formats strfmt.Registry) error {

	if err := validate.Required("keyHandle", "body", m.KeyHandle); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticateRequestMessage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticateRequestMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticateRequestMessage) UnmarshalBinary(b []byte) error {
	var res AuthenticateRequestMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
