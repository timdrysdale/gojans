// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FIDO2configuration FIDO2configuration
//
// FIDO2 configuration.
//
// swagger:model FIDO2configuration
type FIDO2configuration struct {

	// assertion
	Assertion []*Assertion `json:"assertion"`

	// attestation
	// Required: true
	Attestation []*Attestation `json:"attestation"`

	// A URI indicating the party operating the FIDO U2F server.
	// Required: true
	Issuer *string `json:"issuer"`

	// The version of the FIDO2 U2F core protocol to which this server conforms. The value MUST be the string 1.0.
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this FIDO 2configuration
func (m *FIDO2configuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssertion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttestation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FIDO2configuration) validateAssertion(formats strfmt.Registry) error {

	if swag.IsZero(m.Assertion) { // not required
		return nil
	}

	for i := 0; i < len(m.Assertion); i++ {
		if swag.IsZero(m.Assertion[i]) { // not required
			continue
		}

		if m.Assertion[i] != nil {
			if err := m.Assertion[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assertion" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FIDO2configuration) validateAttestation(formats strfmt.Registry) error {

	if err := validate.Required("attestation", "body", m.Attestation); err != nil {
		return err
	}

	for i := 0; i < len(m.Attestation); i++ {
		if swag.IsZero(m.Attestation[i]) { // not required
			continue
		}

		if m.Attestation[i] != nil {
			if err := m.Attestation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attestation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FIDO2configuration) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	return nil
}

func (m *FIDO2configuration) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FIDO2configuration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FIDO2configuration) UnmarshalBinary(b []byte) error {
	var res FIDO2configuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
