/*
 * oxauth_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package OxAuthClient

import(
	"oxauth_lib/configuration_pkg"
	"oxauth_lib/authorization_pkg"
	"oxauth_lib/registration_pkg"
	"oxauth_lib/clientinfo_pkg"
	"oxauth_lib/serverconfiguration_pkg"
	"oxauth_lib/token_pkg"
	"oxauth_lib/jwkjsonwebkeysetjwks_pkg"
	"oxauth_lib/clientregistration_pkg"
	"oxauth_lib/sessionmanagement_pkg"
	"oxauth_lib/umausermanagedaccess_pkg"
	"oxauth_lib/uma2resource_pkg"
	"oxauth_lib/tokenintrospection_pkg"
	"oxauth_lib/umascope_pkg"
	"oxauth_lib/userinfo_pkg"
	"oxauth_lib/fidou2f_pkg"
	"oxauth_lib/fido2_pkg"
)
/*
 * Client structure as interface implementation
 */
type OXAUTH_IMPL struct {
     authorization authorization_pkg.AUTHORIZATION
     registration registration_pkg.REGISTRATION
     clientinfo clientinfo_pkg.CLIENTINFO
     serverconfiguration serverconfiguration_pkg.SERVERCONFIGURATION
     token token_pkg.TOKEN
     jwkjsonwebkeysetjwks jwkjsonwebkeysetjwks_pkg.JWKJSONWEBKEYSETJWKS
     clientregistration clientregistration_pkg.CLIENTREGISTRATION
     sessionmanagement sessionmanagement_pkg.SESSIONMANAGEMENT
     umausermanagedaccess umausermanagedaccess_pkg.UMAUSERMANAGEDACCESS
     uma2resource uma2resource_pkg.UMA2RESOURCE
     tokenintrospection tokenintrospection_pkg.TOKENINTROSPECTION
     umascope umascope_pkg.UMASCOPE
     userinfo userinfo_pkg.USERINFO
     fidou2f fidou2f_pkg.FIDOU2F
     fido2 fido2_pkg.FIDO2
     config  configuration_pkg.CONFIGURATION
}

/**
     * Access to Configuration
     * @return Returns the Configuration instance
*/
func (me *OXAUTH_IMPL) Configuration() configuration_pkg.CONFIGURATION {
    return me.config
}
/**
     * Access to Authorization controller
     * @return Returns the Authorization() instance
*/
func (me *OXAUTH_IMPL) Authorization() authorization_pkg.AUTHORIZATION {
    if(me.authorization) == nil {
        me.authorization = authorization_pkg.NewAUTHORIZATION(me.config)
    }
    return me.authorization
}
/**
     * Access to Registration controller
     * @return Returns the Registration() instance
*/
func (me *OXAUTH_IMPL) Registration() registration_pkg.REGISTRATION {
    if(me.registration) == nil {
        me.registration = registration_pkg.NewREGISTRATION(me.config)
    }
    return me.registration
}
/**
     * Access to ClientInfo controller
     * @return Returns the ClientInfo() instance
*/
func (me *OXAUTH_IMPL) ClientInfo() clientinfo_pkg.CLIENTINFO {
    if(me.clientinfo) == nil {
        me.clientinfo = clientinfo_pkg.NewCLIENTINFO(me.config)
    }
    return me.clientinfo
}
/**
     * Access to ServerConfiguration controller
     * @return Returns the ServerConfiguration() instance
*/
func (me *OXAUTH_IMPL) ServerConfiguration() serverconfiguration_pkg.SERVERCONFIGURATION {
    if(me.serverconfiguration) == nil {
        me.serverconfiguration = serverconfiguration_pkg.NewSERVERCONFIGURATION(me.config)
    }
    return me.serverconfiguration
}
/**
     * Access to Token controller
     * @return Returns the Token() instance
*/
func (me *OXAUTH_IMPL) Token() token_pkg.TOKEN {
    if(me.token) == nil {
        me.token = token_pkg.NewTOKEN(me.config)
    }
    return me.token
}
/**
     * Access to JWKJSONWebKeySetJWKs controller
     * @return Returns the JWKJSONWebKeySetJWKs() instance
*/
func (me *OXAUTH_IMPL) JWKJSONWebKeySetJWKs() jwkjsonwebkeysetjwks_pkg.JWKJSONWEBKEYSETJWKS {
    if(me.jwkjsonwebkeysetjwks) == nil {
        me.jwkjsonwebkeysetjwks = jwkjsonwebkeysetjwks_pkg.NewJWKJSONWEBKEYSETJWKS(me.config)
    }
    return me.jwkjsonwebkeysetjwks
}
/**
     * Access to ClientRegistration controller
     * @return Returns the ClientRegistration() instance
*/
func (me *OXAUTH_IMPL) ClientRegistration() clientregistration_pkg.CLIENTREGISTRATION {
    if(me.clientregistration) == nil {
        me.clientregistration = clientregistration_pkg.NewCLIENTREGISTRATION(me.config)
    }
    return me.clientregistration
}
/**
     * Access to SessionManagement controller
     * @return Returns the SessionManagement() instance
*/
func (me *OXAUTH_IMPL) SessionManagement() sessionmanagement_pkg.SESSIONMANAGEMENT {
    if(me.sessionmanagement) == nil {
        me.sessionmanagement = sessionmanagement_pkg.NewSESSIONMANAGEMENT(me.config)
    }
    return me.sessionmanagement
}
/**
     * Access to UMAUserManagedAccess controller
     * @return Returns the UMAUserManagedAccess() instance
*/
func (me *OXAUTH_IMPL) UMAUserManagedAccess() umausermanagedaccess_pkg.UMAUSERMANAGEDACCESS {
    if(me.umausermanagedaccess) == nil {
        me.umausermanagedaccess = umausermanagedaccess_pkg.NewUMAUSERMANAGEDACCESS(me.config)
    }
    return me.umausermanagedaccess
}
/**
     * Access to UMA2Resource controller
     * @return Returns the UMA2Resource() instance
*/
func (me *OXAUTH_IMPL) UMA2Resource() uma2resource_pkg.UMA2RESOURCE {
    if(me.uma2resource) == nil {
        me.uma2resource = uma2resource_pkg.NewUMA2RESOURCE(me.config)
    }
    return me.uma2resource
}
/**
     * Access to TokenIntrospection controller
     * @return Returns the TokenIntrospection() instance
*/
func (me *OXAUTH_IMPL) TokenIntrospection() tokenintrospection_pkg.TOKENINTROSPECTION {
    if(me.tokenintrospection) == nil {
        me.tokenintrospection = tokenintrospection_pkg.NewTOKENINTROSPECTION(me.config)
    }
    return me.tokenintrospection
}
/**
     * Access to UMAScope controller
     * @return Returns the UMAScope() instance
*/
func (me *OXAUTH_IMPL) UMAScope() umascope_pkg.UMASCOPE {
    if(me.umascope) == nil {
        me.umascope = umascope_pkg.NewUMASCOPE(me.config)
    }
    return me.umascope
}
/**
     * Access to UserInfo controller
     * @return Returns the UserInfo() instance
*/
func (me *OXAUTH_IMPL) UserInfo() userinfo_pkg.USERINFO {
    if(me.userinfo) == nil {
        me.userinfo = userinfo_pkg.NewUSERINFO(me.config)
    }
    return me.userinfo
}
/**
     * Access to FIDOU2F controller
     * @return Returns the FIDOU2F() instance
*/
func (me *OXAUTH_IMPL) FIDOU2F() fidou2f_pkg.FIDOU2F {
    if(me.fidou2f) == nil {
        me.fidou2f = fidou2f_pkg.NewFIDOU2F(me.config)
    }
    return me.fidou2f
}
/**
     * Access to FIDO2 controller
     * @return Returns the FIDO2() instance
*/
func (me *OXAUTH_IMPL) FIDO2() fido2_pkg.FIDO2 {
    if(me.fido2) == nil {
        me.fido2 = fido2_pkg.NewFIDO2(me.config)
    }
    return me.fido2
}

