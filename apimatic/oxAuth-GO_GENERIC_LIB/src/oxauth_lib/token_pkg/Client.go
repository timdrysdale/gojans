/*
 * oxauth_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package token_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"oxauth_lib/apihelper_pkg"
	"oxauth_lib/configuration_pkg"
	"oxauth_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type TOKEN_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * The Introspection OAuth 2 Endpoint.
 * @param    string         authorization       parameter: Required
 * @param    string         token               parameter: Required
 * @param    *string        tokenTypeHint       parameter: Optional
 * @param    *bool          responseAsJwt       parameter: Optional
 * @return	Returns the *models_pkg.IntrospectionResponse response from the API call
 */
func (me *TOKEN_IMPL) GetIntrospection (
            authorization string,
            token string,
            tokenTypeHint *string,
            responseAsJwt *bool) (*models_pkg.IntrospectionResponse, error) {
    //the endpoint path uri
    _pathUrl := "/introspection"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "token" : token,
        "token_type_hint" : tokenTypeHint,
        "response_as_jwt" : responseAsJwt,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "Authorization" : apihelper_pkg.ToString(authorization, ""),
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Error codes for introspection endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Unauthorized access request.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Internal error occured. Please check log file for details.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.IntrospectionResponse = &models_pkg.IntrospectionResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * The Introspection OAuth 2 Endpoint.
 * @param    string        authorization     parameter: Required
 * @param    string        token             parameter: Required
 * @return	Returns the *models_pkg.IntrospectionResponse response from the API call
 */
func (me *TOKEN_IMPL) PostIntrospection (
            authorization string,
            token string) (*models_pkg.IntrospectionResponse, error) {
    //the endpoint path uri
    _pathUrl := "/introspection"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "Authorization" : apihelper_pkg.ToString(authorization, ""),
    }

    //form parameters
    parameters := map[string]interface{} {

        "token" : token,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Error codes for introspection endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Unauthorized access request.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Internal error occured. Please check log file for details.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.IntrospectionResponse = &models_pkg.IntrospectionResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Revoke an Access Token or a Refresh Token, the RP (Client).
 * @param    string         token               parameter: Required
 * @param    *string        tokenTypeHint       parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *TOKEN_IMPL) CreateRevoke (
            token string,
            tokenTypeHint *string) (interface{}, error) {
    //the endpoint path uri
    _pathUrl := "/revoke"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //form parameters
    parameters := map[string]interface{} {

        "token" : token,
        "token_type_hint" : tokenTypeHint,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * To obtain an Access Token, an ID Token, and optionally a Refresh Token, the RP (Client).
 * @param    []string        grantType              parameter: Required
 * @param    *string         code                   parameter: Optional
 * @param    *string         redirectUri            parameter: Optional
 * @param    *string         username               parameter: Optional
 * @param    *string         password               parameter: Optional
 * @param    []string        scope                  parameter: Optional
 * @param    *string         assertion              parameter: Optional
 * @param    *string         refreshToken           parameter: Optional
 * @param    *string         clientId               parameter: Optional
 * @param    *string         clientSecret           parameter: Optional
 * @param    *string         codeVerifier           parameter: Optional
 * @param    *string         ticket                 parameter: Optional
 * @param    *string         claimToken             parameter: Optional
 * @param    *string         claimTokenFormat       parameter: Optional
 * @param    *string         pct                    parameter: Optional
 * @param    *string         rpt                    parameter: Optional
 * @return	Returns the *models_pkg.TokenResponse response from the API call
 */
func (me *TOKEN_IMPL) PostToken (
            grantType []string,
            code *string,
            redirectUri *string,
            username *string,
            password *string,
            scope []string,
            assertion *string,
            refreshToken *string,
            clientId *string,
            clientSecret *string,
            codeVerifier *string,
            ticket *string,
            claimToken *string,
            claimTokenFormat *string,
            pct *string,
            rpt *string) (*models_pkg.TokenResponse, error) {
    //the endpoint path uri
    _pathUrl := "/token"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //form parameters
    parameters := map[string]interface{} {

        "grant_type" : grantType,
        "code" : code,
        "redirect_uri" : redirectUri,
        "username" : username,
        "password" : password,
        "scope" : scope,
        "assertion" : assertion,
        "refresh_token" : refreshToken,
        "client_id" : clientId,
        "client_secret" : clientSecret,
        "code_verifier" : codeVerifier,
        "ticket" : ticket,
        "claim_token" : claimToken,
        "claim_token_format" : claimTokenFormat,
        "pct" : pct,
        "rpt" : rpt,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Unauthorized access request.", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("Invalid details provided hence access denied.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Internal error occured. Please check log file for details.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.TokenResponse = &models_pkg.TokenResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

