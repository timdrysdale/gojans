/*
 * oxauth_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import "time"


/*
 * Structure for the custom type ErrorResponse
 */
type ErrorResponse struct {
    Error             string          `json:"error" form:"error"` //TODO: Write general description for this field
    ErrorDescription  string          `json:"error_description" form:"error_description"` //TODO: Write general description for this field
    Details           *string         `json:"details,omitempty" form:"details,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type JsonWebKey
 */
type JsonWebKey struct {
    Kid             string          `json:"kid" form:"kid"` //TODO: Write general description for this field
    Kty             string          `json:"kty" form:"kty"` //TODO: Write general description for this field
    Use             string          `json:"use" form:"use"` //TODO: Write general description for this field
    Alg             string          `json:"alg" form:"alg"` //TODO: Write general description for this field
    Crv             *string         `json:"crv,omitempty" form:"crv,omitempty"` //TODO: Write general description for this field
    Exp             int64           `json:"exp" form:"exp"` //TODO: Write general description for this field
    X5c             []string        `json:"x5c" form:"x5c"` //TODO: Write general description for this field
    N               *string         `json:"n,omitempty" form:"n,omitempty"` //TODO: Write general description for this field
    E               *string         `json:"e,omitempty" form:"e,omitempty"` //TODO: Write general description for this field
    X               *string         `json:"x,omitempty" form:"x,omitempty"` //TODO: Write general description for this field
    Y               *string         `json:"y,omitempty" form:"y,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Assertion
 */
type Assertion struct {
    BasePath        *string         `json:"base_path,omitempty" form:"base_path,omitempty"` //fido2 assertion endpoint
    OptionsEnpoint  *string         `json:"options_enpoint,omitempty" form:"options_enpoint,omitempty"` //fido2 assertion options endpoint
    ResultEnpoint   *string         `json:"result_enpoint,omitempty" form:"result_enpoint,omitempty"` //fido2 assertion result endpoint
}

/*
 * Structure for the custom type AssertionOptions
 */
type AssertionOptions struct {
    Content         *Content        `json:"content,omitempty" form:"content,omitempty"` //An object that contains the extensions to enable, and the options to use for each of them.
}

/*
 * Structure for the custom type AssertionOptions1
 */
type AssertionOptions1 struct {
    Id              *string         `json:"id,omitempty" form:"id,omitempty"` //The base64url encoded id returned by the client
    Type            *[]string       `json:"type,omitempty" form:"type,omitempty"` //TODO: Write general description for this field
    RawId           *string         `json:"rawId,omitempty" form:"rawId,omitempty"` //The base64url encoded rawId returned by the client. If res.rawId is missing, res.id will be used instead. If both are missing an error will be thrown.
    UserHandle      *string         `json:"userHandle,omitempty" form:"userHandle,omitempty"` //The base64url encoded userHandle returned by the client. May be null or an empty string.
    ClientDataJSON  []string        `json:"clientDataJSON" form:"clientDataJSON"` //The base64url encoded clientDataJSON returned by the client
}

/*
 * Structure for the custom type AssertionOptionsResponse
 */
type AssertionOptionsResponse struct {
    Challenge        string          `json:"challenge" form:"challenge"` //Websafe-base64 encoding of the challenge.
    User             string          `json:"user" form:"user"` //username
    AllowCredentials []string        `json:"allowCredentials" form:"allowCredentials"` //TODO: Write general description for this field
    UserVerification string          `json:"userVerification" form:"userVerification"` //TODO: Write general description for this field
    Extensions       string          `json:"extensions" form:"extensions"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Attestation
 */
type Attestation struct {
    BasePath        *string         `json:"base_path,omitempty" form:"base_path,omitempty"` //fido2 attestation endpoint
    OptionsEnpoint  *string         `json:"options_enpoint,omitempty" form:"options_enpoint,omitempty"` //fido2 attestation options endpoint
    ResultEnpoint   *string         `json:"result_enpoint,omitempty" form:"result_enpoint,omitempty"` //fido2 attestation result endpoint
}

/*
 * Structure for the custom type AttestationOptions
 */
type AttestationOptions struct {
    Username               *string         `json:"username,omitempty" form:"username,omitempty"` //TODO: Write general description for this field
    DisplayName            *string         `json:"displayName,omitempty" form:"displayName,omitempty"` //TODO: Write general description for this field
    DocumentDomain         *string         `json:"documentDomain,omitempty" form:"documentDomain,omitempty"` //TODO: Write general description for this field
    CredentialType         *string         `json:"credentialType,omitempty" form:"credentialType,omitempty"` //TODO: Write general description for this field
    AuthenticatorSelection *[]string       `json:"authenticatorSelection,omitempty" form:"authenticatorSelection,omitempty"` //TODO: Write general description for this field
    Extensions             *string         `json:"extensions,omitempty" form:"extensions,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AttestationOptions1
 */
type AttestationOptions1 struct {
    Type            *string         `json:"type,omitempty" form:"type,omitempty"` //TODO: Write general description for this field
    ClientDataJSON  []string        `json:"clientDataJSON" form:"clientDataJSON"` //The base64url encoded clientDataJSON returned by the client
    Id              *string         `json:"id,omitempty" form:"id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type AuthenticateRequest
 */
type AuthenticateRequest struct {
    Version         *string         `json:"version,omitempty" form:"version,omitempty"` //Version of the protocol that the to-be-registered U2F token must speak.
    Challenge       *string         `json:"challenge,omitempty" form:"challenge,omitempty"` //The websafe-base64-encoded challenge.
    AppId           *string         `json:"appId,omitempty" form:"appId,omitempty"` //The application id that the RP would like to assert.
    KeyHandle       *string         `json:"keyHandle,omitempty" form:"keyHandle,omitempty"` //websafe-base64 encoding of the key handle obtained from the U2F token during registration
}

/*
 * Structure for the custom type AuthenticateRequestMessage
 */
type AuthenticateRequestMessage struct {
    Version         string          `json:"version" form:"version"` //Version of the protocol that the to-be-registered U2F token must speak.
    Challenge       string          `json:"challenge" form:"challenge"` //The websafe-base64-encoded challenge.
    AppId           string          `json:"appId" form:"appId"` //The application id that the RP would like to assert.
    KeyHandle       string          `json:"keyHandle" form:"keyHandle"` //Websafe-base64 encoding of the key handle obtained from the U2F token during registration.
}

/*
 * Structure for the custom type AuthenticateStatus
 */
type AuthenticateStatus struct {
    Status          string          `json:"status" form:"status"` //Version of the protocol that the to-be-registered U2F token must speak.
    Challenge       string          `json:"challenge" form:"challenge"` //The websafe-base64-encoded challenge.
}

/*
 * Structure for the custom type BackchannelAuthorization
 */
type BackchannelAuthorization struct {
    AUTHREQID       string          `json:"AUTH_REQ_ID" form:"AUTH_REQ_ID"` //TODO: Write general description for this field
    EXPIRESIN       int64           `json:"EXPIRES_IN" form:"EXPIRES_IN"` //TODO: Write general description for this field
    INTERVAL        int64           `json:"INTERVAL" form:"INTERVAL"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ClientInfoResponse
 */
type ClientInfoResponse struct {
    DisplayName                    *string         `json:"displayName,omitempty" form:"displayName,omitempty"` //TODO: Write general description for this field
    Inum                           *string         `json:"inum,omitempty" form:"inum,omitempty"` //XRI i-number
    OxAuthAppType                  *string         `json:"oxAuthAppType,omitempty" form:"oxAuthAppType,omitempty"` //oxAuth Appication type
    OxAuthIdTokenSignedResponseAlg *string         `json:"oxAuthIdTokenSignedResponseAlg,omitempty" form:"oxAuthIdTokenSignedResponseAlg,omitempty"` //oxAuth ID Token Signed Response Algorithm
    OxAuthRedirectURI              *[]string       `json:"oxAuthRedirectURI,omitempty" form:"oxAuthRedirectURI,omitempty"` //Array of redirect URIs values used in the Authorization
    OxId                           *string         `json:"oxId,omitempty" form:"oxId,omitempty"` //oxAuth Attribute Scope Id
    CustomAttributes               *[]string       `json:"custom_attributes,omitempty" form:"custom_attributes,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type ClientResponse
 */
type ClientResponse struct {
    RedirectUris                                                                    *[]string       `json:"redirect_uris,omitempty" form:"redirect_uris,omitempty"` //Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request
    ClaimsRedirectUri                                                               *[]string       `json:"claims_redirect_uri,omitempty" form:"claims_redirect_uri,omitempty"` //Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.
    ResponseTypes                                                                   *[]string       `json:"response_types,omitempty" form:"response_types,omitempty"` //A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.
    GrantTypes                                                                      *[]string       `json:"grant_types,omitempty" form:"grant_types,omitempty"` //A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.
    Contacts                                                                        *[]string       `json:"contacts,omitempty" form:"contacts,omitempty"` //e-mail addresses of people responsible for this Client.
    ClientName                                                                      *string         `json:"client_name,omitempty" form:"client_name,omitempty"` //Name of the Client to be presented to the user.
    LogoUri                                                                         *string         `json:"logo_uri,omitempty" form:"logo_uri,omitempty"` //URL that references a logo for the Client application
    ClientUri                                                                       *string         `json:"client_uri,omitempty" form:"client_uri,omitempty"` //URL of the home page of the Client. The value of this field must point to a valid Web page.
    PolicyUri                                                                       *string         `json:"policy_uri,omitempty" form:"policy_uri,omitempty"` //URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.
    TosUri                                                                          *string         `json:"tos_uri,omitempty" form:"tos_uri,omitempty"` //URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.
    JwksUri                                                                         *string         `json:"jwks_uri,omitempty" form:"jwks_uri,omitempty"` //URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client's encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage .
    Jwks                                                                            *string         `json:"jwks,omitempty" form:"jwks,omitempty"` //Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation. The jwks_uri and jwks parameters must not be used together.
    SectorIdentifierUri                                                             *string         `json:"sector_identifier_uri,omitempty" form:"sector_identifier_uri,omitempty"` //URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
    SubjectType                                                                     *string         `json:"subject_type,omitempty" form:"subject_type,omitempty"` //Subject type requested for the Client ID. Valid types include pairwise and public.
    RptAsJwt                                                                        *bool           `json:"rpt_as_jwt,omitempty" form:"rpt_as_jwt,omitempty"` //Specifies whether RPT should be return as signed JWT.
    AccessTokenAsJwt                                                                *bool           `json:"access_token_as_jwt,omitempty" form:"access_token_as_jwt,omitempty"` //Specifies whether access token as signed JWT.
    AccessTokenSigningAlg                                                           *string         `json:"access_token_signing_alg,omitempty" form:"access_token_signing_alg,omitempty"` //Specifies signing algorithm that has to be used during JWT signing. If it's not specified, then the default OP signing algorithm will be used .
    IdTokenSignedResponseAlg                                                        *string         `json:"id_token_signed_response_alg,omitempty" form:"id_token_signed_response_alg,omitempty"` //JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.
    IdTokenEncryptedResponseAlg                                                     *string         `json:"id_token_encrypted_response_alg,omitempty" form:"id_token_encrypted_response_alg,omitempty"` //JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.
    IdTokenEncryptedResponseEnc                                                     *string         `json:"id_token_encrypted_response_enc,omitempty" form:"id_token_encrypted_response_enc,omitempty"` //JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.
    UserinfoSignedResponseAlg                                                       *string         `json:"userinfo_signed_response_alg,omitempty" form:"userinfo_signed_response_alg,omitempty"` //JWS alg algorithm (JWA) required for signing UserInfo Responses.
    UserinfoEncryptedResponseAlg                                                    *string         `json:"userinfo_encrypted_response_alg,omitempty" form:"userinfo_encrypted_response_alg,omitempty"` //JWE alg algorithm (JWA) required for encrypting UserInfo Responses.
    UserinfoEncryptedResponseEnc                                                    *string         `json:"userinfo_encrypted_response_enc,omitempty" form:"userinfo_encrypted_response_enc,omitempty"` //JWE enc algorithm (JWA) required for encrypting UserInfo Responses.
    RequestObjectSigningAlg                                                         *string         `json:"request_object_signing_alg,omitempty" form:"request_object_signing_alg,omitempty"` //JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.
    RequestObjectEncryptionAlg                                                      *string         `json:"request_object_encryption_alg,omitempty" form:"request_object_encryption_alg,omitempty"` //JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
    RequestObjectEncryptionEnc                                                      *string         `json:"request_object_encryption_enc,omitempty" form:"request_object_encryption_enc,omitempty"` //JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
    TokenEndpointAuthMethod                                                         *string         `json:"token_endpoint_auth_method,omitempty" form:"token_endpoint_auth_method,omitempty"` //Requested Client Authentication method for the Token Endpoint.
    TokenEndpointAuthSigningAlg                                                     *string         `json:"token_endpoint_auth_signing_alg,omitempty" form:"token_endpoint_auth_signing_alg,omitempty"` //JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.
    DefaultMaxAge                                                                   *int64          `json:"default_max_age,omitempty" form:"default_max_age,omitempty"` //Specifies the Default Maximum Authentication Age.
    RequireAuthTime                                                                 *bool           `json:"require_auth_time,omitempty" form:"require_auth_time,omitempty"` //Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.
    DefaultAcrValues                                                                *[]string       `json:"default_acr_values,omitempty" form:"default_acr_values,omitempty"` //Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.
    InitiateLoginUri                                                                *string         `json:"initiate_login_uri,omitempty" form:"initiate_login_uri,omitempty"` //Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.
    PostLogoutRedirectUris                                                          *[]string       `json:"post_logout_redirect_uris,omitempty" form:"post_logout_redirect_uris,omitempty"` //Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.
    FrontchannelLogoutUri                                                           *string         `json:"frontchannel_logout_uri,omitempty" form:"frontchannel_logout_uri,omitempty"` //RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.
    FrontchannelLogoutSessionRequired                                               *bool           `json:"frontchannel_logout_session_required,omitempty" form:"frontchannel_logout_session_required,omitempty"` //Boolean value specifying whether the RP requires that a session ID query parameter be included to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.
    BackchannelLogoutUri                                                            *string         `json:"backchannel_logout_uri,omitempty" form:"backchannel_logout_uri,omitempty"` //RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
    BackchannelLogoutSessionRequired                                                *bool           `json:"backchannel_logout_session_required,omitempty" form:"backchannel_logout_session_required,omitempty"` //Boolean value specifying whether the RP requires that a session ID Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
    RequestUris                                                                     *[]string       `json:"request_uris,omitempty" form:"request_uris,omitempty"` //Provide a list of request_uri values that are pre-registered by the Client for use at the Authorization Server.
    Scopes                                                                          *string         `json:"scopes,omitempty" form:"scopes,omitempty"` //This param will be removed in a future version because the correct is 'scope' not 'scopes', see (rfc7591).
    Claims                                                                          *string         `json:"claims,omitempty" form:"claims,omitempty"` //String containing a space-separated list of claims that can be requested individually.
    IdTokenTokenBindingCnf                                                          *string         `json:"id_token_token_binding_cnf,omitempty" form:"id_token_token_binding_cnf,omitempty"` //Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.
    TlsClientAuthSubjectDn                                                          *string         `json:"tls_client_auth_subject_dn,omitempty" form:"tls_client_auth_subject_dn,omitempty"` //An string representation of the expected subject distinguished name of the certificate, which the OAuth client will use in mutual TLS authentication.
    AllowSpontaneousScopes                                                          *bool           `json:"allow_spontaneous_scopes,omitempty" form:"allow_spontaneous_scopes,omitempty"` //Specifies whether to allow spontaneous scopes for client. The default value is false.
    SpontaneousScopes                                                               *[]string       `json:"spontaneous_scopes,omitempty" form:"spontaneous_scopes,omitempty"` //List of spontaneous scopes
    RunIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims            *bool           `json:"run_introspection_script_before_access_token_as_jwt_creation_and_include_claims,omitempty" form:"run_introspection_script_before_access_token_as_jwt_creation_and_include_claims,omitempty"` //Boolean value with default value false. If true and access_token_as_jwt=true then run introspection script and transfer claims into JWT.
    KeepClientAuthorizationAfterExpiration                                          *bool           `json:"keep_client_authorization_after_expiration,omitempty" form:"keep_client_authorization_after_expiration,omitempty"` //Boolean value indicating if the client authorization will not be removed afer expiration (expiration date is same as client's expiration that created it). The default value is false.
    Scope                                                                           *[]string       `json:"scope,omitempty" form:"scope,omitempty"` //Provide list of scope which are used during authentication to authorize access to resource.
    AuthorizedOrigins                                                               *[]string       `json:"authorized_origins,omitempty" form:"authorized_origins,omitempty"` //specifies authorized JavaScript origins.
    AccessTokenLifetime                                                             *int64          `json:"access_token_lifetime,omitempty" form:"access_token_lifetime,omitempty"` //Specifies the Client-specific access token expiration.
    SoftwareId                                                                      *string         `json:"software_id,omitempty" form:"software_id,omitempty"` //Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
    SoftwareVersion                                                                 *string         `json:"software_version,omitempty" form:"software_version,omitempty"` //Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.
    SoftwareStatement                                                               *string         `json:"software_statement,omitempty" form:"software_statement,omitempty"` //specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.
    BackchannelTokenDeliveryMode                                                    *string         `json:"backchannel_token_delivery_mode,omitempty" form:"backchannel_token_delivery_mode,omitempty"` //specifies how backchannel token will be deliveried.
    BackchannelClientNotificationEndpoint                                           *string         `json:"backchannel_client_notification_endpoint,omitempty" form:"backchannel_client_notification_endpoint,omitempty"` //Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.
    BackchannelAuthenticationRequestSigningAlg                                      *string         `json:"backchannel_authentication_request_signing_alg,omitempty" form:"backchannel_authentication_request_signing_alg,omitempty"` //The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.
    BackchannelUserCodeParameter                                                    *bool           `json:"backchannel_user_code_parameter,omitempty" form:"backchannel_user_code_parameter,omitempty"` //Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.
}

/*
 * Structure for the custom type Content
 */
type Content struct {
    Username               *string         `json:"username,omitempty" form:"username,omitempty"` //TODO: Write general description for this field
    AuthenticatorSelection *[]string       `json:"authenticatorSelection,omitempty" form:"authenticatorSelection,omitempty"` //TODO: Write general description for this field
    DocumentDomain         *string         `json:"documentDomain,omitempty" form:"documentDomain,omitempty"` //TODO: Write general description for this field
    Extensions             *string         `json:"extensions,omitempty" form:"extensions,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type CredentialCreationOptions
 */
type CredentialCreationOptions struct {
    Challenge              string          `json:"challenge" form:"challenge"` //The base64url encoded challenge that was sent to the client, as generated by assertionOptions.
    Rp                     []string        `json:"rp" form:"rp"` //RP credentials
    User                   User            `json:"user" form:"user"` //User object
    Attestation            string          `json:"attestation" form:"attestation"` //TODO: Write general description for this field
    PubKeyCredParams       []string        `json:"pubKeyCredParams" form:"pubKeyCredParams"` //TODO: Write general description for this field
    AuthenticatorSelection []string        `json:"authenticatorSelection" form:"authenticatorSelection"` //TODO: Write general description for this field
    ExcludeCredentials     []string        `json:"excludeCredentials" form:"excludeCredentials"` //TODO: Write general description for this field
    Extensions             string          `json:"extensions" form:"extensions"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type FIDO2Configuration
 */
type FIDO2Configuration struct {
    Version         string          `json:"version" form:"version"` //The version of the FIDO2 U2F core protocol to which this server conforms. The value MUST be the string 1.0.
    Issuer          string          `json:"issuer" form:"issuer"` //A URI indicating the party operating the FIDO U2F server.
    Attestation     []*Attestation  `json:"attestation" form:"attestation"` //TODO: Write general description for this field
    Assertion       []*Assertion    `json:"assertion,omitempty" form:"assertion,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type GetClientTokenParams
 */
type GetClientTokenParams struct {
    Username        string          `json:"username" form:"username"` //TODO: Write general description for this field
    TokenResponse   TokenResponse1  `json:"tokenResponse" form:"tokenResponse"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type GluuConfigurationResponse
 */
type GluuConfigurationResponse struct {
    IdGenerationEndpoint    string          `json:"id_generation_endpoint" form:"id_generation_endpoint"` //TODO: Write general description for this field
    IntrospectionEndpoint   string          `json:"introspection_endpoint" form:"introspection_endpoint"` //TODO: Write general description for this field
    AuthLevelMapping        *map[string]string `json:"auth_level_mapping,omitempty" form:"auth_level_mapping,omitempty"` //TODO: Write general description for this field
    ScopeToClaimsMapping    *map[string]string `json:"scope_to_claims_mapping,omitempty" form:"scope_to_claims_mapping,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type IntrospectionResponse
 */
type IntrospectionResponse struct {
    Active          bool            `json:"active" form:"active"` //Boolean indicator of whether or not the presented token is currently active.
    Scope           *[]string       `json:"scope,omitempty" form:"scope,omitempty"` //Provide list of scopes to which access was granted for this resource.
    ClientId        *string         `json:"client_id,omitempty" form:"client_id,omitempty"` //Client identifier for the OAuth 2.0 client that requested this token.
    Username        *string         `json:"username,omitempty" form:"username,omitempty"` //Human-readable identifier for the resource owner who authorized this token.
    TokenType       *string         `json:"token_type,omitempty" form:"token_type,omitempty"` //Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749].
    Exp             *int64          `json:"exp,omitempty" form:"exp,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.
    Iat             *int64          `json:"iat,omitempty" form:"iat,omitempty"` //TODO: Write general description for this field
    Sub             *string         `json:"sub,omitempty" form:"sub,omitempty"` //Subject of the token, as defined in JWT [RFC7519].
    Aud             *string         `json:"aud,omitempty" form:"aud,omitempty"` //Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].
    Iss             *string         `json:"iss,omitempty" form:"iss,omitempty"` //String representing the issuer of this token, as defined in JWT [RFC7519].
    AcrValues       *string         `json:"acr_values,omitempty" form:"acr_values,omitempty"` //Authentication Context Class Reference values.
    Jti             *string         `json:"jti,omitempty" form:"jti,omitempty"` //String identifier for the token, as defined in JWT.
}

/*
 * Structure for the custom type Permission
 */
type Permission struct {
    ResourceId      string          `json:"resource_id" form:"resource_id"` //A string that uniquely identifies the protected resource, access to which has been granted to this client on behalf of this requesting party. The identifier MUST correspond to a resource that was previously registered as protected.
    ResourceScopes  []string        `json:"resource_scopes" form:"resource_scopes"` //An array referencing zero or more strings representing scopes to which access was granted for this resource. Each string MUST correspond to a scope that was registered by this resource server for the referenced resource.
    Exp             *int64          `json:"exp,omitempty" form:"exp,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire. If the token-level exp value pre-dates a permission-level exp value, the token-level value takes precedence.
    Iat             *int64          `json:"iat,omitempty" form:"iat,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued. If the token-level iat value post-dates a permission-level iat value, the token-level value takes precedence.
    Nbf             *int64          `json:"nbf,omitempty" form:"nbf,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before which this permission is not valid. If the token-level nbf value post-dates a permission-level nbf value, the token-level value takes precedence.
}

/*
 * Structure for the custom type RegisterParams
 */
type RegisterParams struct {
    RedirectUris                                                                    []string        `json:"redirect_uris" form:"redirect_uris"` //Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request
    ClaimsRedirectUri                                                               *[]string       `json:"claims_redirect_uri,omitempty" form:"claims_redirect_uri,omitempty"` //Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.
    ResponseTypes                                                                   *[]string       `json:"response_types,omitempty" form:"response_types,omitempty"` //A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.
    GrantTypes                                                                      *[]string       `json:"grant_types,omitempty" form:"grant_types,omitempty"` //A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.
    Contacts                                                                        *[]string       `json:"contacts,omitempty" form:"contacts,omitempty"` //e-mail addresses of people responsible for this Client.
    ClientName                                                                      *string         `json:"client_name,omitempty" form:"client_name,omitempty"` //Name of the Client to be presented to the user.
    LogoUri                                                                         *string         `json:"logo_uri,omitempty" form:"logo_uri,omitempty"` //URL that references a logo for the Client application
    ClientUri                                                                       *string         `json:"client_uri,omitempty" form:"client_uri,omitempty"` //URL of the home page of the Client. The value of this field must point to a valid Web page.
    PolicyUri                                                                       *string         `json:"policy_uri,omitempty" form:"policy_uri,omitempty"` //URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.
    TosUri                                                                          *string         `json:"tos_uri,omitempty" form:"tos_uri,omitempty"` //URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.
    JwksUri                                                                         *string         `json:"jwks_uri,omitempty" form:"jwks_uri,omitempty"` //URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client's encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage .
    Jwks                                                                            []*JsonWebKey   `json:"jwks,omitempty" form:"jwks,omitempty"` //List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value. "{ \"keys\" : [ { \"e\" : \"AQAB\", \"n\" : \"gmlDX_mgMcHX..\" ] }"
    SectorIdentifierUri                                                             *string         `json:"sector_identifier_uri,omitempty" form:"sector_identifier_uri,omitempty"` //URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
    SubjectType                                                                     *string         `json:"subject_type,omitempty" form:"subject_type,omitempty"` //Subject type requested for the Client ID. Valid types include pairwise and public.
    RptAsJwt                                                                        *bool           `json:"rpt_as_jwt,omitempty" form:"rpt_as_jwt,omitempty"` //Specifies whether RPT should be return as signed JWT.
    AccessTokenAsJwt                                                                *bool           `json:"access_token_as_jwt,omitempty" form:"access_token_as_jwt,omitempty"` //Specifies whether access token as signed JWT.
    AccessTokenSigningAlg                                                           *string         `json:"access_token_signing_alg,omitempty" form:"access_token_signing_alg,omitempty"` //Specifies signing algorithm that has to be used during JWT signing. If it's not specified, then the default OP signing algorithm will be used .
    IdTokenSignedResponseAlg                                                        *string         `json:"id_token_signed_response_alg,omitempty" form:"id_token_signed_response_alg,omitempty"` //JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.
    IdTokenEncryptedResponseAlg                                                     *string         `json:"id_token_encrypted_response_alg,omitempty" form:"id_token_encrypted_response_alg,omitempty"` //JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.
    IdTokenEncryptedResponseEnc                                                     *string         `json:"id_token_encrypted_response_enc,omitempty" form:"id_token_encrypted_response_enc,omitempty"` //JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.
    UserinfoSignedResponseAlg                                                       *string         `json:"userinfo_signed_response_alg,omitempty" form:"userinfo_signed_response_alg,omitempty"` //JWS alg algorithm (JWA) required for signing UserInfo Responses.
    UserinfoEncryptedResponseAlg                                                    *string         `json:"userinfo_encrypted_response_alg,omitempty" form:"userinfo_encrypted_response_alg,omitempty"` //JWE alg algorithm (JWA) required for encrypting UserInfo Responses.
    UserinfoEncryptedResponseEnc                                                    *string         `json:"userinfo_encrypted_response_enc,omitempty" form:"userinfo_encrypted_response_enc,omitempty"` //JWE enc algorithm (JWA) required for encrypting UserInfo Responses.
    RequestObjectSigningAlg                                                         *string         `json:"request_object_signing_alg,omitempty" form:"request_object_signing_alg,omitempty"` //JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.
    RequestObjectEncryptionAlg                                                      *string         `json:"request_object_encryption_alg,omitempty" form:"request_object_encryption_alg,omitempty"` //JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
    RequestObjectEncryptionEnc                                                      *string         `json:"request_object_encryption_enc,omitempty" form:"request_object_encryption_enc,omitempty"` //JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
    TokenEndpointAuthMethod                                                         *string         `json:"token_endpoint_auth_method,omitempty" form:"token_endpoint_auth_method,omitempty"` //Requested Client Authentication method for the Token Endpoint.
    TokenEndpointAuthSigningAlg                                                     *string         `json:"token_endpoint_auth_signing_alg,omitempty" form:"token_endpoint_auth_signing_alg,omitempty"` //JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.
    DefaultMaxAge                                                                   *int64          `json:"default_max_age,omitempty" form:"default_max_age,omitempty"` //Specifies the Default Maximum Authentication Age.
    RequireAuthTime                                                                 *bool           `json:"require_auth_time,omitempty" form:"require_auth_time,omitempty"` //Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.
    DefaultAcrValues                                                                *[]string       `json:"default_acr_values,omitempty" form:"default_acr_values,omitempty"` //Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.
    InitiateLoginUri                                                                *string         `json:"initiate_login_uri,omitempty" form:"initiate_login_uri,omitempty"` //Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.
    PostLogoutRedirectUris                                                          *[]string       `json:"post_logout_redirect_uris,omitempty" form:"post_logout_redirect_uris,omitempty"` //Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.
    FrontchannelLogoutUri                                                           *string         `json:"frontchannel_logout_uri,omitempty" form:"frontchannel_logout_uri,omitempty"` //RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.
    FrontchannelLogoutSessionRequired                                               *bool           `json:"frontchannel_logout_session_required,omitempty" form:"frontchannel_logout_session_required,omitempty"` //Boolean value specifying whether the RP requires that a session ID query parameter be included to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.
    BackchannelLogoutUri                                                            *string         `json:"backchannel_logout_uri,omitempty" form:"backchannel_logout_uri,omitempty"` //RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
    BackchannelLogoutSessionRequired                                                *bool           `json:"backchannel_logout_session_required,omitempty" form:"backchannel_logout_session_required,omitempty"` //Boolean value specifying whether the RP requires that a session ID Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
    RequestUris                                                                     *[]string       `json:"request_uris,omitempty" form:"request_uris,omitempty"` //Provide a list of request_uri values that are pre-registered by the Client for use at the Authorization Server.
    Scopes                                                                          *string         `json:"scopes,omitempty" form:"scopes,omitempty"` //This param will be removed in a future version because the correct is 'scope' not 'scopes', see (rfc7591).
    Claims                                                                          *string         `json:"claims,omitempty" form:"claims,omitempty"` //String containing a space-separated list of claims that can be requested individually.
    IdTokenTokenBindingCnf                                                          *string         `json:"id_token_token_binding_cnf,omitempty" form:"id_token_token_binding_cnf,omitempty"` //Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.
    TlsClientAuthSubjectDn                                                          *string         `json:"tls_client_auth_subject_dn,omitempty" form:"tls_client_auth_subject_dn,omitempty"` //An string representation of the expected subject distinguished name of the certificate, which the OAuth client will use in mutual TLS authentication.
    AllowSpontaneousScopes                                                          *bool           `json:"allow_spontaneous_scopes,omitempty" form:"allow_spontaneous_scopes,omitempty"` //Specifies whether to allow spontaneous scopes for client. The default value is false.
    SpontaneousScopes                                                               *[]string       `json:"spontaneous_scopes,omitempty" form:"spontaneous_scopes,omitempty"` //List of spontaneous scopes
    RunIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims            *bool           `json:"run_introspection_script_before_access_token_as_jwt_creation_and_include_claims,omitempty" form:"run_introspection_script_before_access_token_as_jwt_creation_and_include_claims,omitempty"` //Boolean value with default value false. If true and access_token_as_jwt=true then run introspection script and transfer claims into JWT.
    KeepClientAuthorizationAfterExpiration                                          *bool           `json:"keep_client_authorization_after_expiration,omitempty" form:"keep_client_authorization_after_expiration,omitempty"` //Boolean value indicating if the client authorization will not be removed afer expiration (expiration date is same as client's expiration that created it). The default value is false.
    Scope                                                                           *[]string       `json:"scope,omitempty" form:"scope,omitempty"` //Provide list of scope which are used during authentication to authorize access to resource.
    AuthorizedOrigins                                                               *[]string       `json:"authorized_origins,omitempty" form:"authorized_origins,omitempty"` //specifies authorized JavaScript origins.
    AccessTokenLifetime                                                             *int64          `json:"access_token_lifetime,omitempty" form:"access_token_lifetime,omitempty"` //Specifies the Client-specific access token expiration.
    SoftwareId                                                                      *string         `json:"software_id,omitempty" form:"software_id,omitempty"` //Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
    SoftwareVersion                                                                 *string         `json:"software_version,omitempty" form:"software_version,omitempty"` //Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.
    SoftwareStatement                                                               *string         `json:"software_statement,omitempty" form:"software_statement,omitempty"` //specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.
    BackchannelTokenDeliveryMode                                                    *string         `json:"backchannel_token_delivery_mode,omitempty" form:"backchannel_token_delivery_mode,omitempty"` //specifies how backchannel token will be deliveried.
    BackchannelClientNotificationEndpoint                                           *string         `json:"backchannel_client_notification_endpoint,omitempty" form:"backchannel_client_notification_endpoint,omitempty"` //Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.
    BackchannelAuthenticationRequestSigningAlg                                      *string         `json:"backchannel_authentication_request_signing_alg,omitempty" form:"backchannel_authentication_request_signing_alg,omitempty"` //The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.
    BackchannelUserCodeParameter                                                    *bool           `json:"backchannel_user_code_parameter,omitempty" form:"backchannel_user_code_parameter,omitempty"` //Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.
    AdditionalAudience                                                              *[]string       `json:"additional_audience,omitempty" form:"additional_audience,omitempty"` //Additional audiences.
}

/*
 * Structure for the custom type RegisterRequest
 */
type RegisterRequest struct {
    Version         *string         `json:"version,omitempty" form:"version,omitempty"` //Version of the protocol that the to-be-registered U2F token must speak.
    Challenge       *string         `json:"challenge,omitempty" form:"challenge,omitempty"` //The websafe-base64-encoded challenge.
    AppId           *string         `json:"appId,omitempty" form:"appId,omitempty"` //The application id that the RP would like to assert.
}

/*
 * Structure for the custom type RegisterRequestMessage
 */
type RegisterRequestMessage struct {
    AuthenticateRequests []*AuthenticateRequest `json:"authenticateRequests" form:"authenticateRequests"` //TODO: Write general description for this field
    RegisterRequests     []*RegisterRequest `json:"registerRequests" form:"registerRequests"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type RegisterResponseParam
 */
type RegisterResponseParam struct {
    ClientId                  string          `json:"client_id" form:"client_id"` //Unique Client Identifier. It MUST NOT be currently valid for any other registered Client.
    ClientSecret              *string         `json:"client_secret,omitempty" form:"client_secret,omitempty"` //This value is used by Confidential Clients to authenticate to the Token Endpoint
    RegistrationAccessToken   *string         `json:"registration_access_token,omitempty" form:"registration_access_token,omitempty"` //Registration Access Token that can be used at the Client Configuration Endpoint to perform subsequent operations upon the Client registration.
    RegistrationClientUri     *string         `json:"registration_client_uri,omitempty" form:"registration_client_uri,omitempty"` //Location of the Client Configuration Endpoint where the Registration Access Token can be used to perform subsequent operations upon the resulting Client registration.
    ClientIdIssuedAt          *int64          `json:"client_id_issued_at,omitempty" form:"client_id_issued_at,omitempty"` //Time at which the Client Identifier was issued.
    ClientSecretExpiresAt     *int64          `json:"client_secret_expires_at,omitempty" form:"client_secret_expires_at,omitempty"` //Time at which the client_secret will expire or 0 if it will not expire.
}

/*
 * Structure for the custom type RegisterSiteParams
 */
type RegisterSiteParams struct {
    Username        string          `json:"username" form:"username"` //TODO: Write general description for this field
    TokenResponse   *TokenResponse2 `json:"tokenResponse,omitempty" form:"tokenResponse,omitempty"` //FIDO U2F device registration details
}

/*
 * Structure for the custom type RegisterStatus
 */
type RegisterStatus struct {
    Status          *string         `json:"status,omitempty" form:"status,omitempty"` //TODO: Write general description for this field
    Challenge       *string         `json:"challenge,omitempty" form:"challenge,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type RptIntrospectionResponse
 */
type RptIntrospectionResponse struct {
    Active          bool            `json:"active" form:"active"` //Boolean indicator of whether or not the presented token is currently active.
    Exp             *int64          `json:"exp,omitempty" form:"exp,omitempty"` //Integer timestamp, in seconds since January 1 1970 UTC, indicating when this token will expire.
    Iat             *int64          `json:"iat,omitempty" form:"iat,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.
    ClientId        *string         `json:"clientId,omitempty" form:"clientId,omitempty"` //Client id used to obtain RPT.
    Sub             *string         `json:"sub,omitempty" form:"sub,omitempty"` //Subject of the token. Usually a machine-readable identifier of the resource owner who authorized this token.
    Aud             *string         `json:"aud,omitempty" form:"aud,omitempty"` //Service-specific string identifier or list of string identifiers representing the intended audience for this token.
    Permissions     []*Permission   `json:"permissions" form:"permissions"` //TODO: Write general description for this field
    PctClaims       *map[string]string `json:"pct_claims,omitempty" form:"pct_claims,omitempty"` //PCT token claims.
    Iss             *string         `json:"iss,omitempty" form:"iss,omitempty"` //String representing the issuer of this token, as defined in JWT [RFC7519].
    Jti             *string         `json:"jti,omitempty" form:"jti,omitempty"` //String identifier for the token, as defined in JWT [RFC7519].
    Nbf             *int64          `json:"nbf,omitempty" form:"nbf,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before which this permission is not valid.
    ResourceId      string          `json:"resource_id" form:"resource_id"` //Resource ID.
    ResourceScopes  []string        `json:"resource_scopes" form:"resource_scopes"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type RptIntrospectionResponse1
 */
type RptIntrospectionResponse1 struct {
    Active          bool            `json:"active" form:"active"` //Boolean indicator of whether or not the presented token is currently active.
    Exp             *int64          `json:"exp,omitempty" form:"exp,omitempty"` //Integer timestamp, in seconds since January 1 1970 UTC, indicating when this token will expire.
    Iat             *int64          `json:"iat,omitempty" form:"iat,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.
    ClientId        *string         `json:"clientId,omitempty" form:"clientId,omitempty"` //Client id used to obtain RPT.
    Sub             *string         `json:"sub,omitempty" form:"sub,omitempty"` //Subject of the token. Usually a machine-readable identifier of the resource owner who authorized this token.
    Aud             *string         `json:"aud,omitempty" form:"aud,omitempty"` //Service-specific string identifier or list of string identifiers representing the intended audience for this token.
    Permissions     []*Permission   `json:"permissions" form:"permissions"` //TODO: Write general description for this field
    PctClaims       *map[string]string `json:"pct_claims,omitempty" form:"pct_claims,omitempty"` //TODO: Write general description for this field
    Iss             *string         `json:"iss,omitempty" form:"iss,omitempty"` //String representing the issuer of this token, as defined in JWT [RFC7519].
    Jti             *string         `json:"jti,omitempty" form:"jti,omitempty"` //String identifier for the token, as defined in JWT [RFC7519].
    Nbf             *int64          `json:"nbf,omitempty" form:"nbf,omitempty"` //Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before which this permission is not valid.
    ResourceId      string          `json:"resource_id" form:"resource_id"` //Resource ID.
    ResourceScopes  []string        `json:"resource_scopes" form:"resource_scopes"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type SessionStateObject
 */
type SessionStateObject struct {
    State           *string         `json:"state,omitempty" form:"state,omitempty"` //String that represents the End-User's login state at the OP. It MUST NOT contain the space (\" \") character.
    AuthTime        *time.Time      `json:"auth_time,omitempty" form:"auth_time,omitempty"` //specifies the time at which session was authenticated.
    CustomState     *string         `json:"custom_state,omitempty" form:"custom_state,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TokenResponse
 */
type TokenResponse struct {
    AccessToken     string          `json:"access_token" form:"access_token"` //The access token issued by the authorization server.
    TokenType       string          `json:"token_type" form:"token_type"` //The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).
    ExpiresIn       *int64          `json:"expires_in,omitempty" form:"expires_in,omitempty"` //The lifetime in seconds of the access token. For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated.
    RefreshToken    *string         `json:"refresh_token,omitempty" form:"refresh_token,omitempty"` //The refresh token, which can be used to obtain new access tokens using the same authorization grant
    Scope           *[]string       `json:"scope,omitempty" form:"scope,omitempty"` //TODO: Write general description for this field
    IdToken         *string         `json:"id_token,omitempty" form:"id_token,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type TokenResponse1
 */
type TokenResponse1 struct {
    ClientData      *string         `json:"clientData,omitempty" form:"clientData,omitempty"` //base64(UTF8(client data))
    SignatureData   *string         `json:"signatureData,omitempty" form:"signatureData,omitempty"` //base64(raw response from U2F device)
    KeyHandle       *string         `json:"keyHandle,omitempty" form:"keyHandle,omitempty"` //keyHandle originally passed
}

/*
 * Structure for the custom type TokenResponse2
 */
type TokenResponse2 struct {
    RegistrationData *string         `json:"registrationData,omitempty" form:"registrationData,omitempty"` //TODO: Write general description for this field
    ClientData       *string         `json:"clientData,omitempty" form:"clientData,omitempty"` //TODO: Write general description for this field
    DeviceData       *string         `json:"deviceData,omitempty" form:"deviceData,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type U2fConfiguration
 */
type U2fConfiguration struct {
    Version                 string          `json:"version" form:"version"` //The version of the FIDO U2F core protocol to which this server conforms. The value MUST be the string 1.0.
    Issuer                  string          `json:"issuer" form:"issuer"` //A URI indicating the party operating the FIDO U2F server.
    RegistrationEndpoint    *string         `json:"registration_endpoint,omitempty" form:"registration_endpoint,omitempty"` //TODO: Write general description for this field
    AuthenticationEndpoint  *string         `json:"authentication_endpoint,omitempty" form:"authentication_endpoint,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Uma2ConfigurationResponse
 */
type Uma2ConfigurationResponse struct {
    Issuer                         string          `json:"issuer" form:"issuer"` //The authorization server's issuer identifier, which is\n a URL that uses the \"https\" scheme and has no query or fragment\n components.  This is the location where \".well-known\" RFC 5785\n [RFC5785] resources containing information about the authorization\n server are published.  Using these well-known resources is\n described in Section 3.  The issuer identifier is used to prevent\n authorization server mix-up attacks, as described in \"OAuth 2.0 Mix-Up Mitigation\"
    AuthorizationEndpoint          string          `json:"authorization_endpoint" form:"authorization_endpoint"` //URL of the authorization server's authorization endpoint. example: https://sample.com/oxauth/restv1/authorize token_endpoint: type: string description: URL of the authorization server's token endpoint [RFC6749].  This is REQUIRED unless only the implicit grant type is used. example: https://sample.com/oxauth/restv1/token jwks_uri: type: string description: URL of the authorization server's JWK Set [JWK] document.  The referenced document contains the signing key(s) the client uses to validate signatures from the authorization server. This URL MUST use the "https" scheme.  The JWK Set MAY also contain the server's encryption key(s), which are used by clients to encrypt requests to the server.  When both signing and encryption keys are made available, a "use" (public key use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. example: https://sample.com/oxauth/restv1/jwks registration_endpoint: type: string description: URL of the authorization server's OAuth 2.0 Dynamic Client Registration endpoint [RFC7591] example: https://sample.com/oxauth/restv1/register response_types_supported: type: array items: type: string description: JSON array containing a list of the OAuth 2.0 "response_type" values that this authorization server supports. The array values used are the same as those used with the "response_types" parameter defined by "OAuth 2.0 Dynamic Client Registration Protocol" [RFC7591]. example: - code - id_token - token grant_types_supported: type: array items: type: string description: JSON array containing a list of the OAuth 2.0 grant type values that this authorization server supports.  The array values used are the same as those used with the "grant_types" parameter defined by "OAuth 2.0 Dynamic Client Registration Protocol" [RFC7591].  If omitted, the default value is "["authorization_code", "implicit"]". example: - authorization_code - implicit - client_credentials token_endpoint_auth_methods_supported: type: array items: type: string description: JSON array containing a list of client authentication methods supported by this token endpoint.  Client authentication method values are used in the "token_endpoint_auth_method" parameter defined in Section 2 of [RFC7591].  If omitted, the default is "client_secret_basic" -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of OAuth 2.0 [RFC6749]. example: - client_secret_basic - client_secret_post - client_secret_jwt - private_key_jwt token_endpoint_auth_signing_alg_values_supported: type: array items: type: string description: JSON array containing a list of the JWS signing algorithms ("alg" values) supported by the token endpoint for the signature on the JWT [JWT] used to authenticate the client at the token endpoint for the "private_key_jwt" and "client_secret_jwt" authentication methods.  Servers SHOULD support "RS256".  The value "none" MUST NOT be used. example: - HS256 - HS384 - HS512 - RS256 - RS384 - RS512 - ES256 - ES384 - ES512 service_documentation: type: string description: URL of a page containing human-readable information that developers might want or need to know when using the authorization server.  In particular, if the authorization server does not support Dynamic Client Registration, then information on how to register clients needs to be provided in this documentation. example: http://<op_docs> ui_locales_supported: type: array items: type: string description: Languages and scripts supported for the user interface, represented as a JSON array of BCP47 [RFC5646] language tag values. example: - en - es op_policy_uri: type: string description: URL that the authorization server provides to the person registering the client to read about the authorization server's requirements on how the client can use the data provided by the authorization server.  The registration process SHOULD display this URL to the person registering the client if it is given.  As described in Section 5, despite the identifier "op_policy_uri", appearing to be OpenID-specific, its usage in this specification is actually referring to a general OAuth 2.0 feature that is not specific to OpenID Connect. example: http://ox.sample.com/doku.php?id=oxauth:policy op_tos_uri: type: string description: URL that the authorization server provides to the person registering the client to read about the authorization server's terms of service.  The registration process SHOULD display this URL to the person registering the client if it is given.  As described in Section 5, despite the identifier "op_tos_uri", appearing to be OpenID-specific, its usage in this specification is actually referring to a general OAuth 2.0 feature that is not specific to OpenID Connect. example: http://ox.sample.com/doku.php?id=oxauth:tos introspection_endpoint: type: string description: URL of the authorization server's OAuth 2.0 introspection endpoint [RFC7662]. example: https://sample.com/oxauth/restv1/rpt/status code_challenge_methods_supported: type: array items: type: string description: JSON array containing a list of PKCE [RFC7636] code challenge methods supported by this authorization server.  Code challenge method values are used in the "code_challenge_method" parameter defined in Section 4.3 of [RFC7636].  The valid code challenge method values are those registered in the IANA "PKCE Code Challenge Methods" registry [IANA.OAuth.Parameters] claims_interaction_endpoint: type: string description: Static endpoint URI at which the authorization server declares that it interacts with end-user requesting parties to gather claims. If the authorization server also provides a claims interaction endpoint URI as part of its redirect_user hint in a need_info response to a client on authorization failure (see Section 3.3.6), that value overrides this metadata value. Providing the static endpoint URI is useful for enabling interactive claims gathering prior to any pushed-claims flows taking place, so that, for example, it is possible to gather requesting party authorization interactively for collecting all other claims in a "silent" fashion.
    UmaProfilesSupported           *[]string       `json:"uma_profiles_supported,omitempty" form:"uma_profiles_supported,omitempty"` //UMA profiles supported by this authorization server. The value is an array of string values, where each string value is a URI identifying an UMA profile
    PermissionEndpoint             *string         `json:"permission_endpoint,omitempty" form:"permission_endpoint,omitempty"` //The endpoint URI at which the resource server requests permissions on the client's behalf.
    ResourceRegistrationEndpoint   *string         `json:"resource_registration_endpoint,omitempty" form:"resource_registration_endpoint,omitempty"` //The endpoint URI at which the resource server registers resources to put them under authorization manager protection.
    ScopeEndpoint                  *string         `json:"scope_endpoint,omitempty" form:"scope_endpoint,omitempty"` //The Scope endpoint URI.
}

/*
 * Structure for the custom type UmaPermissionList
 */
type UmaPermissionList struct {
    ResourceId      string          `json:"resource_id" form:"resource_id"` //The identifier for a resource to which this client is seeking access. The identifier MUST correspond to a resource that was previously registered.
    ResourceScopes  []string        `json:"resource_scopes" form:"resource_scopes"` //An array referencing zero or more strings representing scopes to which access was granted for this resource. Each string MUST correspond to a scope that was registered by this resource server for the referenced resource.
    Params          *map[string]string `json:"params,omitempty" form:"params,omitempty"` //A key/value map that can contain custom parameters.
    Exp             *int64          `json:"exp,omitempty" form:"exp,omitempty"` //Number of seconds since January 1 1970 UTC, indicating when this token will expire.
}

/*
 * Structure for the custom type UmaResource
 */
type UmaResource struct {
    Name             *string         `json:"name,omitempty" form:"name,omitempty"` //A human-readable string describing a set of one or more resources. This name MAY be used by the authorization server in its resource owner user interface for the resource owner.
    IconUri          *string         `json:"icon_uri,omitempty" form:"icon_uri,omitempty"` //A URI for a graphic icon representing the resource set. The referenced icon MAY be used by the authorization server in its resource owner user interface for the resource owner.
    Type             *string         `json:"type,omitempty" form:"type,omitempty"` //A string uniquely identifying the semantics of the resource set. For example, if the resource set consists of a single resource that is an identity claim that leverages standardized claim semantics for \"verified email address\", the value of this property could be an identifying URI for this claim.
    ResourceScopes   []string        `json:"resource_scopes" form:"resource_scopes"` //An array of strings, any of which MAY be a URI, indicating the available scopes for this resource set. URIs MUST resolve to scope descriptions as defined in Section 2.1. Published scope descriptions MAY reside anywhere on the web; a resource server is not required to self-host scope descriptions and may wish to point to standardized scope descriptions residing elsewhere. It is the resource server's responsibility to ensure that scope description documents are accessible to authorization servers through GET calls to support any user interface requirements. The resource server and authorization server are presumed to have separately negotiated any required interpretation of scope handling not conveyed through scope descriptions.
    ScopeExpression  *string         `json:"scope_expression,omitempty" form:"scope_expression,omitempty"` //TODO: Write general description for this field
    Description      *string         `json:"description,omitempty" form:"description,omitempty"` //A human-readable string describing the resource
    Iat              *int64          `json:"iat,omitempty" form:"iat,omitempty"` //number of seconds since January 1 1970 UTC, indicating when the token was issued at
    Exp              *int64          `json:"exp,omitempty" form:"exp,omitempty"` //number of seconds since January 1 1970 UTC, indicating when this token will expire.
}

/*
 * Structure for the custom type UmaResourceResponse
 */
type UmaResourceResponse struct {
    Id                     string          `json:"_id" form:"_id"` //UMA Resource identifier
    UserAccessPolicyUri    *string         `json:"user_access_policy_uri,omitempty" form:"user_access_policy_uri,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UmaResourceWithId
 */
type UmaResourceWithId struct {
    Id               string          `json:"_id" form:"_id"` //UMA Resource identifier
    Name             *string         `json:"name,omitempty" form:"name,omitempty"` //A human-readable string describing a set of one or more resources. This name MAY be used by the authorization server in its resource owner user interface for the resource owner.
    Uri              *string         `json:"uri,omitempty" form:"uri,omitempty"` //A human-readable string describing the resource
    Type             *string         `json:"type,omitempty" form:"type,omitempty"` //A string uniquely identifying the semantics of the resource set. For example, if the resource set consists of a single resource that is an identity claim that leverages standardized claim semantics for \"verified email address\", the value of this property could be an identifying URI for this claim.
    Scopes           *[]string       `json:"scopes,omitempty" form:"scopes,omitempty"` //An array of strings, any of which MAY be a URI, indicating the available scopes for this resource set. URIs MUST resolve to scope descriptions as defined in Section 2.1. Published scope descriptions MAY reside anywhere on the web; a resource server is not required to self-host scope descriptions and may wish to point to standardized scope descriptions residing elsewhere. It is the resource server's responsibility to ensure that scope description documents are accessible to authorization servers through GET calls to support any user interface requirements. The resource server and authorization server are presumed to have separately negotiated any required interpretation of scope handling not conveyed through scope descriptions.
    ScopeExpression  *string         `json:"scope_expression,omitempty" form:"scope_expression,omitempty"` //TODO: Write general description for this field
    Description      *string         `json:"description,omitempty" form:"description,omitempty"` //A human-readable string describing the resource
    IconUri          *string         `json:"icon_uri,omitempty" form:"icon_uri,omitempty"` //A URI for a graphic icon representing the resource set. The referenced icon MAY be used by the authorization server in its resource owner user interface for the resource owner.
    Iat              int64           `json:"iat" form:"iat"` //number of seconds since January 1 1970 UTC, indicating when the token was issued at
    Exp              int64           `json:"exp" form:"exp"` //number of seconds since January 1 1970 UTC, indicating when this token will expire.
}

/*
 * Structure for the custom type UmaScopeDescription
 */
type UmaScopeDescription struct {
    Description     *string         `json:"description,omitempty" form:"description,omitempty"` //A human-readable string describing the resource at length. The authorization server MAY use this description in any user interface it presents to a resource owner, for example, for resource protection monitoring or policy setting.
    IconUri         *string         `json:"iconUri,omitempty" form:"iconUri,omitempty"` //A URI for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.
    Name            string          `json:"name" form:"name"` //A human-readable string describing some scope (extent) of access. This name MAY be used by the authorization server in any user interface it presents to the resource owner.
}

/*
 * Structure for the custom type User
 */
type User struct {
    Id              string          `json:"id" form:"id"` //TODO: Write general description for this field
    Name            string          `json:"name" form:"name"` //TODO: Write general description for this field
    DisplayName     string          `json:"displayName" form:"displayName"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type WebKeysConfiguration
 */
type WebKeysConfiguration struct {
    Keys            []*JsonWebKey   `json:"keys" form:"keys"` //List of JSON Web Key (JWK) - A JSON object that represents a cryptographic key. The members of the object represent properties of the key, including its value.
}
