/*
 * oxauth_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package umausermanagedaccess_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"oxauth_lib/apihelper_pkg"
	"oxauth_lib/configuration_pkg"
	"oxauth_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type UMAUSERMANAGEDACCESS_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * UMA Claims Gathering Endpoint.
 * @param    *string        clientId                parameter: Optional
 * @param    *string        ticket                  parameter: Optional
 * @param    *string        claimsRedirectUri       parameter: Optional
 * @param    *string        state                   parameter: Optional
 * @param    *bool          reset                   parameter: Optional
 * @param    *bool          authentication          parameter: Optional
 * @return	Returns the  response from the API call
 */
func (me *UMAUSERMANAGEDACCESS_IMPL) GetUmaGatherClaims (
            clientId *string,
            ticket *string,
            claimsRedirectUri *string,
            state *string,
            reset *bool,
            authentication *bool) (error) {
    //the endpoint path uri
    _pathUrl := "/uma/gather_claims"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "client_id" : clientId,
        "ticket" : ticket,
        "claims_redirect_uri" : claimsRedirectUri,
        "state" : state,
        "reset" : reset,
        "authentication" : authentication,
    })
    if err != nil {
        //error in query param handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil

}

/**
 * UMA Claims Gathering Endpoint
 * @param    *string        clientId                parameter: Optional
 * @param    *string        ticket                  parameter: Optional
 * @param    *string        claimsRedirectUri       parameter: Optional
 * @param    *string        state                   parameter: Optional
 * @param    *bool          reset                   parameter: Optional
 * @param    *bool          authentication          parameter: Optional
 * @return	Returns the  response from the API call
 */
func (me *UMAUSERMANAGEDACCESS_IMPL) PostUmaGatherClaims (
            clientId *string,
            ticket *string,
            claimsRedirectUri *string,
            state *string,
            reset *bool,
            authentication *bool) (error) {
    //the endpoint path uri
    _pathUrl := "/uma/gather_claims"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "client_id" : clientId,
        "ticket" : ticket,
        "claims_redirect_uri" : claimsRedirectUri,
        "state" : state,
        "reset" : reset,
        "authentication" : authentication,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil

}

/**
 * Gets UMA configuration data.
 * @return	Returns the *models_pkg.Uma2ConfigurationResponse response from the API call
 */
func (me *UMAUSERMANAGEDACCESS_IMPL) GetUma2Configuration () (*models_pkg.Uma2ConfigurationResponse, error) {
    //the endpoint path uri
    _pathUrl := "/uma2-configuration"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.Uma2ConfigurationResponse = &models_pkg.Uma2ConfigurationResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * Registers permission.
 * @param    string                   authorization       parameter: Required
 * @param    string                   resourceId          parameter: Required
 * @param    []string                 resourceScopes      parameter: Required
 * @param    map[string]string        params              parameter: Optional
 * @return	Returns the []*models_pkg.UmaPermissionList response from the API call
 */
func (me *UMAUSERMANAGEDACCESS_IMPL) CreateHostRsrcPr (
            authorization string,
            resourceId string,
            resourceScopes []string,
            params map[string]string) ([]*models_pkg.UmaPermissionList, error) {
    //the endpoint path uri
    _pathUrl := "/host/rsrc_pr"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "Authorization" : apihelper_pkg.ToString(authorization, ""),
    }

    //form parameters
    parameters := map[string]interface{} {

        "resource_id" : resourceId,
        "resource_scopes" : resourceScopes,
        "params" : params,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Invalid parameters provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal []*models_pkg.UmaPermissionList
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

