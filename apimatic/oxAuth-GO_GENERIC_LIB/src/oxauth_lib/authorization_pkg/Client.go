/*
 * oxauth_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package authorization_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"oxauth_lib/apihelper_pkg"
	"oxauth_lib/configuration_pkg"
	"oxauth_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type AUTHORIZATION_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * End-User Authentication and Authorization done by sending the User Agent to the Authorization Endpoint using request parameters defined by OAuth 2.0 and OpenID Connect.
 * @param    string         scope                       parameter: Required
 * @param    string         responseType                parameter: Required
 * @param    string         clientId                    parameter: Required
 * @param    string         redirectUri                 parameter: Required
 * @param    *string        state                       parameter: Optional
 * @param    *string        responseMode                parameter: Optional
 * @param    *string        nonce                       parameter: Optional
 * @param    *string        display                     parameter: Optional
 * @param    *string        prompt                      parameter: Optional
 * @param    *int64         maxAge                      parameter: Optional
 * @param    *string        uiLocales                   parameter: Optional
 * @param    *string        idTokenHint                 parameter: Optional
 * @param    *string        loginHint                   parameter: Optional
 * @param    *string        acrValues                   parameter: Optional
 * @param    *string        amrValues                   parameter: Optional
 * @param    *string        request                     parameter: Optional
 * @param    *string        requestUri                  parameter: Optional
 * @param    *string        requestSessionId            parameter: Optional
 * @param    *string        sessionId                   parameter: Optional
 * @param    *string        originHeaders               parameter: Optional
 * @param    *string        codeChallenge               parameter: Optional
 * @param    *string        codeChallengeMethod         parameter: Optional
 * @param    *string        customResponseHeaders       parameter: Optional
 * @param    *string        claims                      parameter: Optional
 * @param    *string        authReqId                   parameter: Optional
 * @return	Returns the  response from the API call
 */
func (me *AUTHORIZATION_IMPL) GetAuthorize (
            scope string,
            responseType string,
            clientId string,
            redirectUri string,
            state *string,
            responseMode *string,
            nonce *string,
            display *string,
            prompt *string,
            maxAge *int64,
            uiLocales *string,
            idTokenHint *string,
            loginHint *string,
            acrValues *string,
            amrValues *string,
            request *string,
            requestUri *string,
            requestSessionId *string,
            sessionId *string,
            originHeaders *string,
            codeChallenge *string,
            codeChallengeMethod *string,
            customResponseHeaders *string,
            claims *string,
            authReqId *string) (error) {
    //the endpoint path uri
    _pathUrl := "/authorize"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "scope" : scope,
        "response_type" : responseType,
        "client_id" : clientId,
        "redirect_uri" : redirectUri,
        "state" : state,
        "response_mode" : responseMode,
        "nonce" : nonce,
        "display" : display,
        "prompt" : prompt,
        "max_age" : maxAge,
        "ui_locales" : uiLocales,
        "id_token_hint" : idTokenHint,
        "login_hint" : loginHint,
        "acr_values" : acrValues,
        "amr_values" : amrValues,
        "request" : request,
        "request_uri" : requestUri,
        "request_session_id" : requestSessionId,
        "session_id" : sessionId,
        "origin_headers" : originHeaders,
        "code_challenge" : codeChallenge,
        "code_challenge_method" : codeChallengeMethod,
        "custom_response_headers" : customResponseHeaders,
        "claims" : claims,
        "auth_req_id" : authReqId,
    })
    if err != nil {
        //error in query param handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters are provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Unauthorized access request.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Internal error occured. Please check log file for details.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil

}

/**
 * End-User Authentication and Authorization done by sending the User Agent to the Authorization Endpoint using request parameters defined by OAuth 2.0 and OpenID Connect.
 * @param    string         scope                       parameter: Required
 * @param    string         responseType                parameter: Required
 * @param    string         clientId                    parameter: Required
 * @param    string         redirectUri                 parameter: Required
 * @param    *string        state                       parameter: Optional
 * @param    *string        responseMode                parameter: Optional
 * @param    *string        nonce                       parameter: Optional
 * @param    *string        display                     parameter: Optional
 * @param    *string        prompt                      parameter: Optional
 * @param    *int64         maxAge                      parameter: Optional
 * @param    *string        uiLocales                   parameter: Optional
 * @param    *string        idTokenHint                 parameter: Optional
 * @param    *string        loginHint                   parameter: Optional
 * @param    *string        acrValues                   parameter: Optional
 * @param    *string        amrValues                   parameter: Optional
 * @param    *string        request                     parameter: Optional
 * @param    *string        requestUri                  parameter: Optional
 * @param    *string        requestSessionId            parameter: Optional
 * @param    *string        sessionId                   parameter: Optional
 * @param    *string        originHeaders               parameter: Optional
 * @param    *string        codeChallenge               parameter: Optional
 * @param    *string        codeChallengeMethod         parameter: Optional
 * @param    *string        customResponseHeaders       parameter: Optional
 * @param    *string        claims                      parameter: Optional
 * @return	Returns the  response from the API call
 */
func (me *AUTHORIZATION_IMPL) PostAuthorize (
            scope string,
            responseType string,
            clientId string,
            redirectUri string,
            state *string,
            responseMode *string,
            nonce *string,
            display *string,
            prompt *string,
            maxAge *int64,
            uiLocales *string,
            idTokenHint *string,
            loginHint *string,
            acrValues *string,
            amrValues *string,
            request *string,
            requestUri *string,
            requestSessionId *string,
            sessionId *string,
            originHeaders *string,
            codeChallenge *string,
            codeChallengeMethod *string,
            customResponseHeaders *string,
            claims *string) (error) {
    //the endpoint path uri
    _pathUrl := "/authorize"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //form parameters
    parameters := map[string]interface{} {

        "scope" : scope,
        "response_type" : responseType,
        "client_id" : clientId,
        "redirect_uri" : redirectUri,
        "state" : state,
        "response_mode" : responseMode,
        "nonce" : nonce,
        "display" : display,
        "prompt" : prompt,
        "max_age" : maxAge,
        "ui_locales" : uiLocales,
        "id_token_hint" : idTokenHint,
        "login_hint" : loginHint,
        "acr_values" : acrValues,
        "amr_values" : amrValues,
        "request" : request,
        "request_uri" : requestUri,
        "request_session_id" : requestSessionId,
        "session_id" : sessionId,
        "origin_headers" : originHeaders,
        "code_challenge" : codeChallenge,
        "code_challenge_method" : codeChallengeMethod,
        "custom_response_headers" : customResponseHeaders,
        "claims" : claims,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters are provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Unauthorized access request.", _response.Code, _response.RawBody)
    } else if (_response.Code == 500) {
        err = apihelper_pkg.NewAPIError("Internal error occured. Please check log file for details.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil

}

/**
 * The Backchannel Authentication Endpoint is used to initiate an out-of-band authentication of the end-user.
 * @param    string         clientId                      parameter: Required
 * @param    string         scope                         parameter: Required
 * @param    string         clientNotificationToken       parameter: Required
 * @param    *string        acrValues                     parameter: Optional
 * @param    *string        loginHintToken                parameter: Optional
 * @param    *string        idTokenHint                   parameter: Optional
 * @param    *string        loginHint                     parameter: Optional
 * @param    *string        bindingMessage                parameter: Optional
 * @param    *string        userCode                      parameter: Optional
 * @param    *int64         requestedExpiry               parameter: Optional
 * @return	Returns the *models_pkg.BackchannelAuthorization response from the API call
 */
func (me *AUTHORIZATION_IMPL) CreateBcAuthorize (
            clientId string,
            scope string,
            clientNotificationToken string,
            acrValues *string,
            loginHintToken *string,
            idTokenHint *string,
            loginHint *string,
            bindingMessage *string,
            userCode *string,
            requestedExpiry *int64) (*models_pkg.BackchannelAuthorization, error) {
    //the endpoint path uri
    _pathUrl := "/bc-authorize"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //form parameters
    parameters := map[string]interface{} {

        "client_id" : clientId,
        "scope" : scope,
        "client_notification_token" : clientNotificationToken,
        "acr_values" : acrValues,
        "login_hint_token" : loginHintToken,
        "id_token_hint" : idTokenHint,
        "login_hint" : loginHint,
        "binding_message" : bindingMessage,
        "user_code" : userCode,
        "requested_expiry" : requestedExpiry,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 400) {
        err = apihelper_pkg.NewAPIError("Invalid parameters are provided to endpoint.", _response.Code, _response.RawBody)
    } else if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("Unauthorized CIBA (Client Initiated Backchannel Authentication) access.", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("Invalid details provided hence access denied.", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.BackchannelAuthorization = &models_pkg.BackchannelAuthorization{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

