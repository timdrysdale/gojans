basePath: /yuriyz1/oxauth/4.2
definitions:
  ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
      error_description:
        type: string
    required:
      - error
      - error_description
    type: object
  JsonWebKey:
    properties:
      alg:
        type: string
      crv:
        type: string
      e:
        type: string
      exp:
        format: int64
        type: integer
      kid:
        type: string
      kty:
        type: string
      'n':
        type: string
      use:
        type: string
      x:
        type: string
      x5c:
        items:
          type: string
        type: array
      'y':
        type: string
    required:
      - alg
      - exp
      - key_ops
      - kid
      - kty
      - use
      - x5c
    type: object
host: virtserver.swaggerhub.com
info:
  contact:
    email: yuriyz@gluu.org
  description: >-
    oxAuth - OAuth 2.0 server; OpenID Connect Provider (OP) & UMA Authorization
    Server (AS)
  license:
    name: License
    url: 'https://github.com/GluuFederation/oxAuth/blob/master/LICENSE'
  title: oxAuth
  version: '4.2'
paths:
  /.well-known/gluu-configuration:
    post:
      description: >-
        Gets GluuServer configuration data that contains non-standard OpenID
        Connect discovery metadata.
      operationId: well-known-gluu-configuration
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: >-
              Client GluuAttribute by Dn(Distinguished Name) based on
              Authorization Scope.
            properties:
              auth_level_mapping:
                additionalProperties:
                  description: Additional Custom Acr's map object
                  type: string
                type: object
              id_generation_endpoint:
                type: string
              introspection_endpoint:
                type: string
              scope_to_claims_mapping:
                additionalProperties:
                  description: Scope map object
                  type: string
                type: object
            required:
              - id_generation_endpoint
              - introspection_endpoint
            title: GluuConfigurationResponse
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: >-
        Gets GluuServer configuration data that contains non-standard OpenID
        Connect discovery metadata.
      tags:
        - Server Configuration
  /authorize:
    get:
      description: >-
        End-User Authentication and Authorization done by sending the User Agent
        to the Authorization Endpoint using request parameters defined by OAuth
        2.0 and OpenID Connect.
      operationId: get_authorize
      parameters:
        - description: >-
            OpenID Connect requests MUST contain the openid scope value. If the
            openid scope value is not present, the behavior is entirely
            unspecified. Other scope values MAY be present.
          in: query
          name: scope
          required: true
          type: string
        - description: >-
            OAuth 2.0 Response Type value that determines the authorization
            processing flow to be used, including what parameters are returned
            from the endpoints used.
          in: query
          name: response_type
          required: true
          type: string
        - description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          in: query
          name: client_id
          required: true
          type: string
        - description: >-
            Redirection URI to which the response will be sent. This URI MUST
            exactly match one of the Redirection URI values for the Client
            pre-registered at the OpenID Provider.
          in: query
          name: redirect_uri
          required: true
          type: string
        - description: >-
            Opaque value used to maintain state between the request and the
            callback.
          in: query
          name: state
          required: false
          type: string
        - description: >-
            Informs the Authorization Server of the mechanism to be used for
            returning parameters from the Authorization Endpoint.
          in: query
          name: response_mode
          required: false
          type: string
        - description: >-
            String value used to associate a Client session with an ID Token,
            and to mitigate replay attacks.
          in: query
          name: nonce
          required: false
          type: string
        - description: >-
            ASCII string value that specifies how the Authorization Server
            displays the authentication and consent user interface pages to the
            End-User.
          in: query
          name: display
          required: false
          type: string
        - description: >-
            Space delimited, case sensitive list of ASCII string values that
            specifies whether the Authorization Server prompts the End-User for
            reauthentication and consent. The defined values are - none, login,
            consent, select_account.
          in: query
          name: prompt
          required: false
          type: string
        - description: >-
            Maximum Authentication Age. Specifies the allowable elapsed time in
            seconds since the last time the End-User was actively authenticated
            by the OP.
          in: query
          name: max_age
          required: false
          type: integer
        - description: >-
            End-User's preferred languages and scripts for the user interface,
            represented as a space-separated list of BCP47 [RFC5646] language
            tag values, ordered by preference.
          in: query
          name: ui_locales
          required: false
          type: string
        - description: >-
            ID Token previously issued by the Authorization Server being passed
            as a hint about the End-User's current or past authenticated session
            with the Client. If the End-User identified by the ID Token is
            logged in or is logged in by the request, then the Authorization
            Server returns a positive response.
          in: query
          name: id_token_hint
          required: false
          type: string
        - description: >-
            Hint to the Authorization Server about the login identifier the
            End-User might use to log in (if necessary).
          in: query
          name: login_hint
          required: false
          type: string
        - description: >-
            Requested Authentication Context Class Reference values.
            Space-separated string that specifies the acr values that the
            Authorization Server is being requested to use for processing this
            Authentication Request, with the values appearing in order of
            preference.
          in: query
          name: acr_values
          required: false
          type: string
        - description: AMR Values.
          in: query
          name: amr_values
          required: false
          type: string
        - description: >-
            This parameter enables OpenID Connect requests to be passed in a
            single, self-contained parameter and to be optionally signed and/or
            encrypted. The parameter value is a Request Object value. It
            represents the request as a JWT whose Claims are the request
            parameters.
          in: query
          name: request
          required: false
          type: string
        - description: >-
            This parameter enables OpenID Connect requests to be passed by
            reference, rather than by value. The request_uri value is a URL
            using the https scheme referencing a resource containing a Request
            Object value, which is a JWT containing the request parameters.
          in: query
          name: request_uri
          required: false
          type: string
        - description: Request session id.
          in: query
          name: request_session_id
          required: false
          type: string
        - description: Session id of this call.
          in: query
          name: session_id
          required: false
          type: string
        - description: Origin headers. Used in custom workflows.
          in: query
          name: origin_headers
          required: false
          type: string
        - description: PKCE code challenge.
          in: query
          name: code_challenge
          required: false
          type: string
        - description: PKCE code challenge method.
          in: query
          name: code_challenge_method
          required: false
          type: string
        - description: Custom Response Headers.
          in: query
          name: custom_response_headers
          required: false
          type: string
        - description: Requested Claims.
          in: query
          name: claims
          required: false
          type: string
        - description: CIBA authentication request Id.
          in: query
          name: auth_req_id
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '302':
          description: Error codes for authorization endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - unauthorized_client
                  - disabled_client
                  - access_denied
                  - retry
                  - unsupported_response_type
                  - invalid_scope
                  - server_error
                  - temporarily_unavailable
                  - invalid_request_redirect_uri
                  - login_required
                  - session_selection_required
                  - consent_required
                  - user_mismatched
                  - invalid_request_uri
                  - invalid_request_object
                  - authentication_session_invalid
                  - invalid_authentication_method
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            title: AuthorizeError
            type: object
        '400':
          description: Invalid parameters are provided to endpoint.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized access request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: The Authorization Endpoint performs Authentication of the End-User.
      tags:
        - Authorization
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: >-
        End-User Authentication and Authorization done by sending the User Agent
        to the Authorization Endpoint using request parameters defined by OAuth
        2.0 and OpenID Connect.
      operationId: post_authorize
      parameters:
        - description: >-
            OpenID Connect requests MUST contain the openid scope value. If the
            openid scope value is not present, the behavior is entirely
            unspecified. Other scope values MAY be present.
          in: formData
          name: scope
          required: true
          type: string
        - description: >-
            OAuth 2.0 Response Type value that determines the authorization
            processing flow to be used, including what parameters are returned
            from the endpoints used.
          in: formData
          name: response_type
          required: true
          type: string
        - description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          in: formData
          name: client_id
          required: true
          type: string
        - description: >-
            Redirection URI to which the response will be sent. This URI MUST
            exactly match one of the Redirection URI values for the Client
            pre-registered at the OpenID Provider.
          in: formData
          name: redirect_uri
          required: true
          type: string
        - description: >-
            Opaque value used to maintain state between the request and the
            callback.
          in: formData
          name: state
          type: string
        - description: >-
            Informs the Authorization Server of the mechanism to be used for
            returning parameters from the Authorization Endpoint.
          in: formData
          name: response_mode
          type: string
        - description: >-
            String value used to associate a Client session with an ID Token,
            and to mitigate replay attacks.
          in: formData
          name: nonce
          type: string
        - description: >-
            ASCII string value that specifies how the Authorization Server
            displays the authentication and consent user interface pages to the
            End-User.
          in: formData
          name: display
          type: string
        - description: >-
            Space delimited, case sensitive list of ASCII string values that
            specifies whether the Authorization Server prompts the End-User for
            reauthentication and consent.
          in: formData
          name: prompt
          type: string
        - description: >-
            Maximum Authentication Age. Specifies the allowable elapsed time in
            seconds since the last time the End-User was actively authenticated
            by the OP.
          in: formData
          name: max_age
          type: integer
        - description: >-
            End-User's preferred languages and scripts for the user interface,
            represented as a space-separated list of BCP47 [RFC5646] language
            tag values, ordered by preference.
          in: formData
          name: ui_locales
          type: string
        - description: >-
            ID Token previously issued by the Authorization Server being passed
            as a hint about the End-User's current or past authenticated session
            with the Client. If the End-User identified by the ID Token is
            logged in or is logged in by the request, then the Authorization
            Server returns a positive response.
          in: formData
          name: id_token_hint
          type: string
        - description: >-
            Hint to the Authorization Server about the login identifier the
            End-User might use to log in (if necessary).
          in: formData
          name: login_hint
          type: string
        - description: >-
            Requested Authentication Context Class Reference values.
            Space-separated string that specifies the acr values that the
            Authorization Server is being requested to use for processing this
            Authentication Request, with the values appearing in order of
            preference.
          in: formData
          name: acr_values
          type: string
        - description: AMR Values.
          in: formData
          name: amr_values
          type: string
        - description: >-
            This parameter enables OpenID Connect requests to be passed in a
            single, self-contained parameter and to be optionally signed and/or
            encrypted. The parameter value is a Request Object value. It
            represents the request as a JWT whose Claims are the request
            parameters.
          in: formData
          name: request
          type: string
        - description: >-
            This parameter enables OpenID Connect requests to be passed by
            reference, rather than by value. The request_uri value is a URL
            using the https scheme referencing a resource containing a Request
            Object value, which is a JWT containing the request parameters.
          in: formData
          name: request_uri
          type: string
        - description: Request session id.
          in: formData
          name: request_session_id
          type: string
        - description: Session id of this call.
          in: formData
          name: session_id
          type: string
        - description: Origin headers. Used in custom workflows.
          in: formData
          name: origin_headers
          type: string
        - description: PKCE code challenge.
          in: formData
          name: code_challenge
          type: string
        - description: PKCE code challenge method.
          in: formData
          name: code_challenge_method
          type: string
        - description: Custom Response Headers.
          in: formData
          name: custom_response_headers
          type: string
        - description: Requested Claims.
          in: formData
          name: claims
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '302':
          description: Error codes for authorization endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - unauthorized_client
                  - disabled_client
                  - access_denied
                  - retry
                  - unsupported_response_type
                  - invalid_scope
                  - server_error
                  - temporarily_unavailable
                  - invalid_request_redirect_uri
                  - login_required
                  - session_selection_required
                  - consent_required
                  - user_mismatched
                  - invalid_request_uri
                  - invalid_request_object
                  - authentication_session_invalid
                  - invalid_authentication_method
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            title: AuthorizeError
            type: object
        '400':
          description: Invalid parameters are provided to endpoint.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized access request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: The Authorization Endpoint performs Authentication of the End-User.
      tags:
        - Authorization
  /bc-authorize:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: >-
        The Backchannel Authentication Endpoint is used to initiate an
        out-of-band authentication of the end-user.
      operationId: bc-authorize
      parameters:
        - description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          in: formData
          name: client_id
          required: true
          type: string
        - description: CIBA authentication requests must contain the openid scope value.
          in: formData
          name: scope
          required: true
          type: string
        - description: >-
            It is a bearer token provided by the Client that will be used by the
            OpenID Provider to authenticate the callback request to the Client.
            It is required if the Client is registered to use Ping or Push
            modes.
          in: formData
          name: client_notification_token
          required: true
          type: string
        - description: Requested Authentication Context Class Reference values.
          in: formData
          name: acr_values
          type: string
        - description: >-
            A token containing information identifying the end-user for whom
            authentication is being requested.
          in: formData
          name: login_hint_token
          type: string
        - description: >-
            An ID Token previously issued to the Client by the OpenID Provider
            being passed back as a hint to identify the end-user for whom
            authentication is being requested.
          in: formData
          name: id_token_hint
          type: string
        - description: >-
            A hint to the OpenID Provider regarding the end-user for whom
            authentication is being requested.
          in: formData
          name: login_hint
          type: string
        - description: >-
            A human readable identifier or message intended to be displayed on
            both the consumption device and the authentication device to
            interlock them together for the transaction by way of a visual cue
            for the end-user.
          in: formData
          name: binding_message
          type: string
        - description: >-
            A secret code, such as password or pin, known only to the user but
            verifiable by the OP.
          in: formData
          name: user_code
          type: string
        - description: >-
            A positive integer allowing the client to request the expires_in
            value for the auth_req_id the server will return.
          in: formData
          name: requested_expiry
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              AUTH_REQ_ID:
                type: string
              EXPIRES_IN:
                type: integer
              INTERVAL:
                type: integer
            required:
              - AUTH_REQ_ID
              - EXPIRES_IN
              - INTERVAL
            title: Backchannel Authorization
            type: object
        '400':
          description: Invalid parameters are provided to endpoint.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: >-
            Unauthorized CIBA (Client Initiated Backchannel Authentication)
            access.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - invalid_scope
                  - expired_login_hint_token
                  - unknown_user_id
                  - unauthorized_client
                  - missing_user_code
                  - invalid_user_code
                  - invalid_binding_message
                  - invalid_client
                  - unauthorized_end_user_device
                  - access_denied
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Performs backchannel authorization of the end-user.
      tags:
        - Authorization
  /bc-deviceRegistration:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Performs backchannel device registration.
      operationId: bc-deviceRegistration
      parameters:
        - description: >-
            An ID Token previously issued to the Client by the OpenID Provider
            being passed back as a hint to identify the end-user for whom the
            device registration is being requested.
          in: formData
          name: id_token_hint
          required: true
          type: string
        - description: OAuth 2.0 Client Identifier valid at the Authorization Serve
          in: formData
          name: device_registration_token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '400':
          description: Invalid parameters are provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - invalid_scope
                  - expired_login_hint_token
                  - unknown_user_id
                  - unauthorized_client
                  - missing_user_code
                  - invalid_user_code
                  - invalid_binding_message
                  - invalid_client
                  - unauthorized_end_user_device
                  - access_denied
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Performs backchannel device registration.
      tags:
        - Registration
  /clientinfo:
    get:
      description: >-
        The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns
        Claims about the registered client.
      operationId: get_clientinfo
      parameters:
        - description: Client-specific access token.
          in: query
          name: access_token
          type: string
        - in: header
          name: Authorization
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: Client details in response.
            properties:
              custom_attributes:
                items:
                  type: string
                type: array
              displayName:
                type: string
              inum:
                description: XRI i-number
                type: string
              oxAuthAppType:
                description: oxAuth Appication type
                type: string
              oxAuthIdTokenSignedResponseAlg:
                description: oxAuth ID Token Signed Response Algorithm
                type: string
              oxAuthRedirectURI:
                description: Array of redirect URIs values used in the Authorization
                items:
                  type: string
                type: array
              oxId:
                description: oxAuth Attribute Scope Id
                example: null
                type: string
            title: ClientInfoResponse
            type: object
        '400':
          description: Invalid Request are provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - invalid_token
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: To get Claims details about the registered client.
      tags:
        - Client Info
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: >-
        The ClientInfo Endpoint is an OAuth 2.0 Protected Resource that returns
        Claims about the registered client.
      operationId: post_clientinfo
      parameters:
        - in: header
          name: Authorization
          type: string
        - description: Client-specific access token.
          in: formData
          name: access_token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: Client details in response.
            properties:
              custom_attributes:
                items:
                  type: string
                type: array
              displayName:
                type: string
              inum:
                description: XRI i-number
                type: string
              oxAuthAppType:
                description: oxAuth Appication type
                type: string
              oxAuthIdTokenSignedResponseAlg:
                description: oxAuth ID Token Signed Response Algorithm
                type: string
              oxAuthRedirectURI:
                description: Array of redirect URIs values used in the Authorization
                items:
                  type: string
                type: array
              oxId:
                description: oxAuth Attribute Scope Id
                example: null
                type: string
            title: ClientInfoResponse
            type: object
        '400':
          description: Invalid Request are provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - invalid_token
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: To get Claims details about the registered client.
      tags:
        - Client Info
  /end_session:
    get:
      description: End current session.
      operationId: end_session
      parameters:
        - description: >-
            Previously issued ID Token (id_token) passed to the logout endpoint
            as a hint about the End-User's current authenticated session with
            the Client. This is used as an indication of the identity of the
            End-User that the RP is requesting be logged out by the OP. The OP
            need not be listed as an audience of the ID Token when it is used as
            an id_token_hint value.
          in: query
          name: id_token_hint
          type: string
        - description: >-
            URL to which the RP is requesting that the End-User's User Agent be
            redirected after a logout has been performed. The value MUST have
            been previously registered with the OP, either using the
            post_logout_redirect_uris Registration parameter or via another
            mechanism. If supplied, the OP SHOULD honor this request following
            the logout.
          in: query
          name: post_logout_redirect_uri
          type: string
        - description: >-
            Opaque value used by the RP to maintain state between the logout
            request and the callback to the endpoint specified by the
            post_logout_redirect_uri parameter. If included in the logout
            request, the OP passes this value back to the RP using the state
            query parameter when redirecting the User Agent back to the RP.
          in: query
          name: state
          type: string
        - description: Session Id
          in: query
          name: session_id
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK - User redirected to logout page
        '302':
          description: Resource Found.
        '400':
          description: Error codes for end session endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_grant
                  - invalid_request
                  - invalid_grant_and_session
                  - session_not_passed
                  - post_logout_uri_not_passed
                  - post_logout_uri_not_associated_with_client
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            title: EndSessionError
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: End current session.
      tags:
        - Session Management
  /fido-configuration:
    get:
      description: Performs FIDO configuration data.
      operationId: fido-configuration
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: FIDO U2F Configuration.
            properties:
              authentication_endpoint:
                type: string
              issuer:
                description: A URI indicating the party operating the FIDO U2F server.
                type: string
              registration_endpoint:
                type: string
              version:
                description: >-
                  The version of the FIDO U2F core protocol to which this server
                  conforms. The value MUST be the string 1.0.
                type: string
            required:
              - version
              - issuer
            title: U2fConfiguration
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Performs FIDO configuration data.
      tags:
        - FIDO U2F
  /fido/u2f/authentication:
    get:
      description: Performs FIDO U2F authentication of end-user.
      operationId: get-fido-u2f-authentication
      parameters:
        - in: query
          name: username
          required: true
          type: string
        - description: >-
            Websafe-base64 encoding of the key handle obtained from the U2F
            token during registration.
          in: query
          name: keyhandle
          type: string
        - description: The application id that the RP would like to assert.
          in: query
          name: application
          type: string
        - in: query
          name: session_id
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: FIDO U2F device authentication request.
            properties:
              appId:
                description: The application id that the RP would like to assert.
                type: string
              challenge:
                description: The websafe-base64-encoded challenge.
                type: string
              keyHandle:
                description: >-
                  Websafe-base64 encoding of the key handle obtained from the
                  U2F token during registration.
                type: string
              version:
                description: >-
                  Version of the protocol that the to-be-registered U2F token
                  must speak.
                example: U2F_V2
                type: string
            required:
              - version
              - challenge
              - appId
              - keyHandle
            title: AuthenticateRequestMessage
            type: object
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - no_eligable_devices
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Performs FIDO U2F authentication of end-user.
      tags:
        - FIDO U2F
    post:
      consumes:
        - application/json
      description: Performs FIDO U2F authentication of end-user.
      operationId: post-fido-u2f-authentication
      parameters:
        - in: body
          name: body
          schema:
            properties:
              tokenResponse:
                properties:
                  clientData:
                    description: base64(UTF8(client data))
                    type: string
                  keyHandle:
                    description: keyHandle originally passed
                    type: string
                  signatureData:
                    description: base64(raw response from U2F device)
                    type: string
                type: object
              username:
                type: string
            required:
              - username
              - tokenResponse
            title: GetClientTokenParams
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: FIDO U2F device authentication status.
            properties:
              challenge:
                description: The websafe-base64-encoded challenge.
                type: string
              status:
                description: >-
                  Version of the protocol that the to-be-registered U2F token
                  must speak.
                example: U2F_V2
                type: string
            required:
              - status
              - challenge
            title: AuthenticateStatus
            type: object
        '403':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - session_expired
                  - invalid_request
                  - device_compromised
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Performs FIDO U2F authentication of end-user.
      tags:
        - FIDO U2F
  /fido/u2f/registration:
    get:
      description: U2F device registration.
      operationId: get-fido-u2f-registration
      parameters:
        - in: query
          name: username
          required: true
          type: string
        - description: The application id that the RP would like to assert.
          in: query
          name: application
          type: string
        - in: query
          name: session_id
          type: string
        - in: query
          name: enrollment_code
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: RegisterRequestMessage
            properties:
              authenticateRequests:
                items:
                  description: list of AuthenticateRequest
                  properties:
                    appId:
                      description: The application id that the RP would like to assert.
                      type: string
                    challenge:
                      description: The websafe-base64-encoded challenge.
                      type: string
                    keyHandle:
                      description: >-
                        websafe-base64 encoding of the key handle obtained from
                        the U2F token during registration
                      type: string
                    version:
                      description: >-
                        Version of the protocol that the to-be-registered U2F
                        token must speak.
                      example: U2F_V2
                      type: string
                  type: object
                type: array
              registerRequests:
                items:
                  description: list of RegisterRequest
                  properties:
                    appId:
                      description: The application id that the RP would like to assert.
                      type: string
                    challenge:
                      description: The websafe-base64-encoded challenge.
                      type: string
                    version:
                      description: >-
                        Version of the protocol that the to-be-registered U2F
                        token must speak.
                      example: U2F_V2
                      type: string
                  type: object
                type: array
            required:
              - authenticateRequests
              - registerRequests
            title: RegisterRequestMessage
            type: object
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - registration_not_allowed
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: U2F device registration.
      tags:
        - FIDO U2F
    post:
      consumes:
        - application/json
      description: U2F device registration.
      operationId: post-fido-u2f-registration
      parameters:
        - in: body
          name: body
          schema:
            properties:
              tokenResponse:
                description: FIDO U2F device registration details
                properties:
                  clientData:
                    type: string
                  deviceData:
                    type: string
                  registrationData:
                    type: string
                type: object
              username:
                type: string
            required:
              - username
            title: RegisterSiteParams
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: RegisterRequestMessage
            properties:
              challenge:
                type: string
              status:
                type: string
            title: RegisterStatus
            type: object
        '403':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - session_expired
                  - invalid_request
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '406':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - registration_not_allowed
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: U2F device registration.
      tags:
        - FIDO U2F
  /fido2/assertion/options:
    post:
      consumes:
        - application/json
      description: FIDO2 Assertion Options
      operationId: options
      parameters:
        - in: body
          name: body
          schema:
            properties:
              content:
                description: >-
                  An object that contains the extensions to enable, and the
                  options to use for each of them.
                properties:
                  authenticatorSelection:
                    items:
                      description: Set of parameters required for FIDO2 assertion option.
                      type: string
                    type: array
                  documentDomain:
                    type: string
                  extensions:
                    type: string
                  username:
                    type: string
                type: object
            title: AssertionOptions
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              allowCredentials:
                example:
                  - type
                  - transports
                  - id
                items:
                  type: string
                type: array
              challenge:
                description: Websafe-base64 encoding of the challenge.
                type: string
              extensions:
                type: string
              user:
                description: username
                type: string
              userVerification:
                type: string
            required:
              - challenge
              - user
              - allowCredentials
              - userVerification
              - extensions
            title: AssertionOptionsResponse
            type: object
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: FIDO2 Assertion Options
      tags:
        - FIDO2
  /fido2/assertion/result:
    post:
      consumes:
        - application/json
      description: FIDO2 Assertion Result.
      operationId: result
      parameters:
        - in: body
          name: body
          schema:
            properties:
              clientDataJSON:
                description: The base64url encoded clientDataJSON returned by the client
                example:
                  - challenge
                  - origin
                items:
                  type: string
                type: array
              id:
                description: The base64url encoded id returned by the client
                type: string
              rawId:
                description: >-
                  The base64url encoded rawId returned by the client. If
                  res.rawId is missing, res.id will be used instead. If both are
                  missing an error will be thrown.
                type: string
              type:
                example:
                  - public-key
                items:
                  type: string
                type: array
              userHandle:
                description: >-
                  The base64url encoded userHandle returned by the client. May
                  be null or an empty string.
                type: string
            required:
              - clientDataJSON
            title: AssertionOptions
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: >-
        FIDO2 Assertion Result - Parses and validates an assertion response from
        the client.
      tags:
        - FIDO2
  /fido2/attestation/options:
    post:
      consumes:
        - application/json
      description: Created new registration.
      operationId: attestation-options
      parameters:
        - in: body
          name: body
          schema:
            description: An object containing various options for the option creation
            properties:
              authenticatorSelection:
                items:
                  description: Set of parameters required for FIDO2 attestation option.
                  type: string
                type: array
              credentialType:
                type: string
              displayName:
                type: string
              documentDomain:
                type: string
              extensions:
                type: string
              username:
                type: string
            title: AttestationOptions
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              attestation:
                format: enum
                type: string
              authenticatorSelection:
                items:
                  description: Set of parameters required for FIDO2 attestation option.
                  type: string
                type: array
              challenge:
                description: >-
                  The base64url encoded challenge that was sent to the client,
                  as generated by assertionOptions.
                type: string
              excludeCredentials:
                items:
                  description: Set of parameters required for FIDO2 attestation option.
                  type: string
                type: array
              extensions:
                type: string
              pubKeyCredParams:
                example:
                  - public-key
                  - type
                  - alg
                items:
                  example: public-key
                  type: string
                type: array
              rp:
                description: RP credentials
                example:
                  - name
                  - id
                items:
                  type: string
                type: array
              user:
                description: User object
                properties:
                  displayName:
                    type: string
                  id:
                    type: string
                  name:
                    type: string
                required:
                  - id
                  - name
                  - displayName
                type: object
            required:
              - challenge
              - rp
              - user
              - attestation
              - pubKeyCredParams
              - authenticatorSelection
              - excludeCredentials
              - extensions
            title: CredentialCreationOptions
            type: object
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Created new registration.
      tags:
        - FIDO2
  /fido2/attestation/result:
    post:
      consumes:
        - application/json
      description: FIDO2 attestation result
      operationId: attestation-result
      parameters:
        - in: body
          name: body
          schema:
            description: An object containing various options for the option creation
            properties:
              clientDataJSON:
                description: The base64url encoded clientDataJSON returned by the client
                example:
                  - challenge
                  - origin
                items:
                  type: string
                type: array
              id:
                type: string
              type:
                type: string
            required:
              - _type
              - clientDataJSON
            title: AttestationOptions
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: FIDO2 attestation result.
      tags:
        - FIDO2
  /fido2/configuration:
    get:
      description: FIDO2 configuration
      operationId: get-fido2-configuration
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: FIDO2 configuration.
            properties:
              assertion:
                items:
                  description: list of fido2 assertion endpoints
                  properties:
                    base_path:
                      description: fido2 assertion endpoint
                      type: string
                    options_enpoint:
                      description: fido2 assertion options endpoint
                      type: string
                    result_enpoint:
                      description: fido2 assertion result endpoint
                      type: string
                  type: object
                type: array
              attestation:
                items:
                  description: list of fido2 attestation endpoints
                  properties:
                    base_path:
                      description: fido2 attestation endpoint
                      type: string
                    options_enpoint:
                      description: fido2 attestation options endpoint
                      type: string
                    result_enpoint:
                      description: fido2 attestation result endpoint
                      type: string
                  type: object
                type: array
              issuer:
                description: A URI indicating the party operating the FIDO U2F server.
                type: string
              version:
                description: >-
                  The version of the FIDO2 U2F core protocol to which this
                  server conforms. The value MUST be the string 1.0.
                type: string
            required:
              - version
              - issuer
              - attestation
            title: FIDO2 configuration
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '406':
          description: Request Not Acceptable.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: FIDO2 configuration
      tags:
        - FIDO2
  /host/rsrc/resource_set:
    delete:
      description: Deletes a previously registered resource.
      operationId: delete-host-rsrc-resource_set
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
        - description: Resource ID
          in: path
          name: rsid
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: OK
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Deletes a previously registered resource.
      tags:
        - UMA 2 Resource
    get:
      description: Lists all previously registered resource.
      operationId: get-host-rsrc-resource_set
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
        - description: Scope uri.
          in: query
          name: scope
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: Uma Resource details
            items:
              description: List of resource identifers
              example: '11'
              type: string
            title: Uma Resource indentifiers
            example:
              - '11'
              - '22'
            type: array
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Lists all previously registered resource.
      tags:
        - UMA 2 Resource
    post:
      consumes:
        - application/json
      description: Adds a new resource description.
      operationId: post-host-rsrc-resource_set
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          required: true
          type: string
        - in: body
          name: body
          schema:
            description: Resource description
            properties:
              description:
                description: A human-readable string describing the resource
                type: string
              exp:
                description: >-
                  number of seconds since January 1 1970 UTC, indicating when
                  this token will expire.
                example: 1419356238
                format: int64
                type: integer
              iat:
                description: >-
                  number of seconds since January 1 1970 UTC, indicating when
                  the token was issued at
                example: 1535709072
                format: int64
                type: integer
              icon_uri:
                description: >-
                  A URI for a graphic icon representing the resource set. The
                  referenced icon MAY be used by the authorization server in its
                  resource owner user interface for the resource owner.
                example: 'http://www.example.com/icons/sharesocial.png'
                type: string
              name:
                description: >-
                  A human-readable string describing a set of one or more
                  resources. This name MAY be used by the authorization server
                  in its resource owner user interface for the resource owner.
                type: string
              resource_scopes:
                description: >-
                  An array of strings, any of which MAY be a URI, indicating the
                  available scopes for this resource set. URIs MUST resolve to
                  scope descriptions as defined in Section 2.1. Published scope
                  descriptions MAY reside anywhere on the web; a resource server
                  is not required to self-host scope descriptions and may wish
                  to point to standardized scope descriptions residing
                  elsewhere. It is the resource server's responsibility to
                  ensure that scope description documents are accessible to
                  authorization servers through GET calls to support any user
                  interface requirements. The resource server and authorization
                  server are presumed to have separately negotiated any required
                  interpretation of scope handling not conveyed through scope
                  descriptions.
                example:
                  - "read-public"
                  - "post-updates"
                  - "read-private"
                items:
                  type: string
                type: array
              scope_expression:
                type: string
              type:
                description: >-
                  A string uniquely identifying the semantics of the resource
                  set. For example, if the resource set consists of a single
                  resource that is an identity claim that leverages standardized
                  claim semantics for \"verified email address\", the value of
                  this property could be an identifying URI for this claim.
                type: string
            required:
              - resource_scopes
            title: UmaResource
            type: object
      produces:
        - application/json
      responses:
        '201':
          description: OK
          schema:
            description: UmaResourceResponse Resource created.
            properties:
              _id:
                description: UMA Resource identifier
                example: KX3A-39WE
                type: string
              user_access_policy_uri:
                example: 'http://as.example.com/rs/222/resource/22/policy'
                type: string
            required:
              - _id
            title: UmaResourceResponse
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Adds a new resource description.
      tags:
        - UMA 2 Resource
    put:
      consumes:
        - application/json
      description: Updates a previously registered resource.
      operationId: 'put-host-rsrc-resource_set{rsid}'
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
        - description: Resource ID.
          in: path
          name: rsid
          required: true
          type: string
        - in: body
          name: body
          schema:
            description: Resource description
            properties:
              description:
                description: A human-readable string describing the resource
                type: string
              exp:
                description: >-
                  number of seconds since January 1 1970 UTC, indicating when
                  this token will expire.
                example: 1419356238
                format: int64
                type: integer
              iat:
                description: >-
                  number of seconds since January 1 1970 UTC, indicating when
                  the token was issued at
                example: 1535709072
                format: int64
                type: integer
              icon_uri:
                description: >-
                  A URI for a graphic icon representing the resource set. The
                  referenced icon MAY be used by the authorization server in its
                  resource owner user interface for the resource owner.
                example: 'http://www.example.com/icons/sharesocial.png'
                type: string
              name:
                description: >-
                  A human-readable string describing a set of one or more
                  resources. This name MAY be used by the authorization server
                  in its resource owner user interface for the resource owner.
                type: string
              resource_scopes:
                description: >-
                  An array of strings, any of which MAY be a URI, indicating the
                  available scopes for this resource set. URIs MUST resolve to
                  scope descriptions as defined in Section 2.1. Published scope
                  descriptions MAY reside anywhere on the web; a resource server
                  is not required to self-host scope descriptions and may wish
                  to point to standardized scope descriptions residing
                  elsewhere. It is the resource server's responsibility to
                  ensure that scope description documents are accessible to
                  authorization servers through GET calls to support any user
                  interface requirements. The resource server and authorization
                  server are presumed to have separately negotiated any required
                  interpretation of scope handling not conveyed through scope
                  descriptions.
                example:
                  - "read-public"
                  - "post-updates"
                  - "read-private"
                items:
                  type: string
                type: array
              scope_expression:
                type: string
              type:
                description: >-
                  A string uniquely identifying the semantics of the resource
                  set. For example, if the resource set consists of a single
                  resource that is an identity claim that leverages standardized
                  claim semantics for \"verified email address\", the value of
                  this property could be an identifying URI for this claim.
                type: string
            required:
              - resource_scopes
            title: UmaResource
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: UmaResourceResponse Resource created.
            properties:
              _id:
                description: UMA Resource identifier
                example: KX3A-39WE
                type: string
              user_access_policy_uri:
                example: 'http://as.example.com/rs/222/resource/22/policy'
                type: string
            required:
              - _id
            title: UmaResourceResponse
            type: object
        '404':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - not_found
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Updates a previously registered resource.
      tags:
        - UMA 2 Resource
  '/host/rsrc/resource_set/{rsid}':
    get:
      description: Reads a previously registered resource.
      operationId: 'get-host-rsrc-resource_set/{rsid}'
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          required: true
          type: string
        - description: Resource description ID.
          in: path
          name: rsid
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: Uma Resource details
            properties:
              _id:
                description: UMA Resource identifier
                example: KX3A-39WE
                type: string
              description:
                description: A human-readable string describing the resource
                type: string
              exp:
                description: >-
                  number of seconds since January 1 1970 UTC, indicating when
                  this token will expire.
                example: 1419356238
                format: int64
                type: integer
              iat:
                description: >-
                  number of seconds since January 1 1970 UTC, indicating when
                  the token was issued at
                example: 1535709072
                format: int64
                type: integer
              icon_uri:
                description: >-
                  A URI for a graphic icon representing the resource set. The
                  referenced icon MAY be used by the authorization server in its
                  resource owner user interface for the resource owner.
                example: 'http://www.example.com/icons/sharesocial.png'
                type: string
              name:
                description: >-
                  A human-readable string describing a set of one or more
                  resources. This name MAY be used by the authorization server
                  in its resource owner user interface for the resource owner.
                type: string
              scope_expression:
                type: string
              scopes:
                description: >-
                  An array of strings, any of which MAY be a URI, indicating the
                  available scopes for this resource set. URIs MUST resolve to
                  scope descriptions as defined in Section 2.1. Published scope
                  descriptions MAY reside anywhere on the web; a resource server
                  is not required to self-host scope descriptions and may wish
                  to point to standardized scope descriptions residing
                  elsewhere. It is the resource server's responsibility to
                  ensure that scope description documents are accessible to
                  authorization servers through GET calls to support any user
                  interface requirements. The resource server and authorization
                  server are presumed to have separately negotiated any required
                  interpretation of scope handling not conveyed through scope
                  descriptions.
                items:
                  type: string
                type: array
              type:
                description: >-
                  A string uniquely identifying the semantics of the resource
                  set. For example, if the resource set consists of a single
                  resource that is an identity claim that leverages standardized
                  claim semantics for \"verified email address\", the value of
                  this property could be an identifying URI for this claim.
                type: string
              uri:
                description: A human-readable string describing the resource
                type: string
            required:
              - _id
              - iat
              - exp
            title: UmaResourceWithId
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Reads a previously registered resource.
      tags:
        - UMA 2 Resource
  /host/rsrc_pr:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Registers permission.
      operationId: host-rsrc_pr
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          required: true
          type: string
        - description: >-
            The identifier for a resource to which this client is seeking
            access. The identifier MUST correspond to a resource that was
            previously registered.
          in: formData
          name: resource_id
          required: true
          type: string
        - collectionFormat: csv
          description: >-
            An array referencing zero or more strings representing scopes to
            which access was granted for this resource. Each string MUST
            correspond to a scope that was registered by this resource server
            for the referenced resource.
          in: formData
          items:
            type: string
          name: resource_scopes
          required: true
          type: array
        - additionalProperties:
            type: string
          description: A key/value map that can contain custom parameters.
          in: formData
          name: params
          type: object
      produces:
        - application/json
      responses:
        '201':
          description: OK
          schema:
            description: List of Uma Permission.
            items:
              properties:
                exp:
                  description: >-
                    Number of seconds since January 1 1970 UTC, indicating when
                    this token will expire.
                  example: 1256953732
                  format: int64
                  type: integer
                params:
                  additionalProperties:
                    type: string
                  description: A key/value map that can contain custom parameters.
                  type: object
                resource_id:
                  description: >-
                    The identifier for a resource to which this client is
                    seeking access. The identifier MUST correspond to a resource
                    that was previously registered.
                  example: 112210f47de98100
                  type: string
                resource_scopes:
                  description: >-
                    An array referencing zero or more strings representing
                    scopes to which access was granted for this resource. Each
                    string MUST correspond to a scope that was registered by
                    this resource server for the referenced resource.
                  example:
                    - 'http://photoz.example.com/dev/actions/add'
                    - 'http://photoz.example.com/dev/actions/internalClient'
                  items:
                    type: string
                  type: array
              required:
                - resource_id
                - resource_scopes
              type: object
            title: UmaPermissionList
            type: array
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Registers permission.
      tags:
        - UMA (User Managed Access)
  /introspection:
    get:
      description: The Introspection OAuth 2 Endpoint.
      operationId: get-introspection
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          required: true
          type: string
          x-example: Bearer 23410913-abewfq.123483
        - in: query
          name: token
          required: true
          type: string
          x-example: token=2YotnFZFEjr1zCsicMWpAA
        - description: >-
            ID Token previously issued by the Authorization Server being passed
            as a hint about the End-User.
          in: query
          name: token_type_hint
          type: string
        - description: >-
            OPTIONAL. Boolean value with default value false. If true, returns
            introspection response as JWT (signed based on client configuration
            used for authentication to Introspection Endpoint).
          in: query
          name: response_as_jwt
          type: boolean
          x-example: response_as_jwt=false
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: meta-information about token
            properties:
              acr_values:
                description: Authentication Context Class Reference values.
                type: string
              active:
                description: >-
                  Boolean indicator of whether or not the presented token is
                  currently active.
                example: true
                type: boolean
              aud:
                description: >-
                  Service-specific string identifier or list of string
                  identifiers representing the intended audience for this token,
                  as defined in JWT [RFC7519].
                example: 'https://protected.example.net/resource'
                type: string
              client_id:
                description: >-
                  Client identifier for the OAuth 2.0 client that requested this
                  token.
                example: 1238j323ds-23ij4
                type: string
              exp:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating when this permission will
                  expire.
                type: integer
              iat:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating when this permission was
                  originally issued.
                type: integer
              iss:
                description: >-
                  String representing the issuer of this token, as defined in
                  JWT [RFC7519].
                example: 'https://server.example.com/'
                type: string
              jti:
                description: 'String identifier for the token, as defined in JWT.'
                type: string
              scope:
                description: >-
                  Provide list of scopes to which access was granted for this
                  resource.
                example:
                  - read write dolphin
                items:
                  type: string
                type: array
              sub:
                description: 'Subject of the token, as defined in JWT [RFC7519].'
                example: Z5O3upPC88QrAjx00dis
                type: string
              token_type:
                description: >-
                  Type of the token as defined in Section 5.1 of OAuth 2.0
                  [RFC6749].
                example: 'bearer, mac'
                type: string
              username:
                description: >-
                  Human-readable identifier for the resource owner who
                  authorized this token.
                example: jdoe
                type: string
            required:
              - active
            title: IntrospectionResponse
            type: object
        '400':
          description: Error codes for introspection endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - unauthorized_client
                  - disabled_client
                  - access_denied
                  - retry
                  - unsupported_response_type
                  - invalid_scope
                  - server_error
                  - temporarily_unavailable
                  - invalid_request_redirect_uri
                  - login_required
                  - session_selection_required
                  - consent_required
                  - user_mismatched
                  - invalid_request_uri
                  - invalid_request_object
                  - authentication_session_invalid
                  - invalid_authentication_method
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            title: AuthorizeError
            type: object
        '401':
          description: Unauthorized access request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: The Introspection OAuth 2 Endpoint.
      tags:
        - Token
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: The Introspection OAuth 2 Endpoint.
      operationId: post-introspection
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          required: true
          type: string
          x-example: Bearer 23410913-abewfq.123483
        - description: Client access token.
          in: formData
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: meta-information about token
            properties:
              acr_values:
                description: Authentication Context Class Reference values.
                type: string
              active:
                description: >-
                  Boolean indicator of whether or not the presented token is
                  currently active.
                example: true
                type: boolean
              aud:
                description: >-
                  Service-specific string identifier or list of string
                  identifiers representing the intended audience for this token,
                  as defined in JWT [RFC7519].
                example: 'https://protected.example.net/resource'
                type: string
              client_id:
                description: >-
                  Client identifier for the OAuth 2.0 client that requested this
                  token.
                example: 1238j323ds-23ij4
                type: string
              exp:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating when this permission will
                  expire.
                type: integer
              iat:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating when this permission was
                  originally issued.
                type: integer
              iss:
                description: >-
                  String representing the issuer of this token, as defined in
                  JWT [RFC7519].
                example: 'https://server.example.com/'
                type: string
              jti:
                description: 'String identifier for the token, as defined in JWT.'
                type: string
              scope:
                description: >-
                  Provide list of scopes to which access was granted for this
                  resource.
                example:
                  - read write dolphin
                items:
                  type: string
                type: array
              sub:
                description: 'Subject of the token, as defined in JWT [RFC7519].'
                example: Z5O3upPC88QrAjx00dis
                type: string
              token_type:
                description: >-
                  Type of the token as defined in Section 5.1 of OAuth 2.0
                  [RFC6749].
                example: 'bearer, mac'
                type: string
              username:
                description: >-
                  Human-readable identifier for the resource owner who
                  authorized this token.
                example: jdoe
                type: string
            required:
              - active
            title: IntrospectionResponse
            type: object
        '400':
          description: Error codes for introspection endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                  - unauthorized_client
                  - disabled_client
                  - access_denied
                  - retry
                  - unsupported_response_type
                  - invalid_scope
                  - server_error
                  - temporarily_unavailable
                  - invalid_request_redirect_uri
                  - login_required
                  - session_selection_required
                  - consent_required
                  - user_mismatched
                  - invalid_request_uri
                  - invalid_request_object
                  - authentication_session_invalid
                  - invalid_authentication_method
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            title: AuthorizeError
            type: object
        '401':
          description: Unauthorized access request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: The Introspection OAuth 2 Endpoint.
      tags:
        - Token
  /jwks:
    get:
      description: Provides list of JWK used by server.
      operationId: jwks
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: >-
              JSON Web Key Set (JWKS) - A JSON object that represents a set of
              JWKs. The JSON object MUST have a keys member, which is an array
              of JWKs.
            properties:
              keys:
                description: >-
                  List of JSON Web Key (JWK) - A JSON object that represents a
                  cryptographic key. The members of the object represent
                  properties of the key, including its value.
                items:
                  $ref: '#/definitions/JsonWebKey'
                type: array
            required:
              - keys
            title: WebKeysConfiguration
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: >-
        A JSON Web Key (JWK) used by server. JWK is a JSON data structure that
        represents a set of public keys as a JSON object [RFC4627].
      tags:
        - JWK - JSON Web Key Set (JWKs)
  /register:
    delete:
      description: >-
        The Client Registration Endpoint removes the Client Metadata for a
        previously registered client.
      operationId: delete-register
      parameters:
        - description: Client ID that identifies client.
          in: query
          name: client_id
          required: true
          type: string
        - description: >-
            Authorization header carrying \"registration_access_token\" issued
            before as a Bearer token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        '204':
          description: OK
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_token
                  - invalid_client_metadata
                  - access_denied
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '401':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_token
                  - invalid_client_metadata
                  - access_denied
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Deletes the client info for a previously registered client.
      tags:
        - Client Registration
    get:
      description: Get client information for a previously registered client.
      operationId: get-register
      parameters:
        - description: Client ID that identifies client.
          in: query
          name: client_id
          required: true
          type: string
        - description: >-
            Authorization header carrying \"registration_access_token\" issued
            before as a Bearer token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              access_token_as_jwt:
                description: Specifies whether access token as signed JWT.
                type: boolean
              access_token_lifetime:
                description: Specifies the Client-specific access token expiration.
                example: 100000000
                type: integer
              access_token_signing_alg:
                description: >-
                  Specifies signing algorithm that has to be used during JWT
                  signing. If it's not specified, then the default OP signing
                  algorithm will be used .
                type: string
              allow_spontaneous_scopes:
                description: >-
                  Specifies whether to allow spontaneous scopes for client. The
                  default value is false.
                example: false
                type: boolean
              authorized_origins:
                description: specifies authorized JavaScript origins.
                items:
                  type: string
                type: array
              backchannel_authentication_request_signing_alg:
                description: >-
                  The JWS algorithm alg value that the Client will use for
                  signing authentication request, as described in Section 7.1.1.
                  of OAuth 2.0 [RFC6749]. When omitted, the Client will not send
                  signed authentication requests.
                type: string
              backchannel_client_notification_endpoint:
                description: >-
                  Client Initiated Backchannel Authentication (CIBA) enables a
                  Client to initiate the authentication of an end-user by means
                  of out-of-band mechanisms. Upon receipt of the notification,
                  the Client makes a request to the token endpoint to obtain the
                  tokens.
                type: string
              backchannel_logout_session_required:
                description: >-
                  Boolean value specifying whether the RP requires that a
                  session ID Claim be included in the Logout Token to identify
                  the RP session with the OP when the backchannel_logout_uri is
                  used. If omitted, the default value is false.
                type: boolean
              backchannel_logout_uri:
                description: >-
                  RP URL that will cause the RP to log itself out when sent a
                  Logout Token by the OP.
                type: string
              backchannel_token_delivery_mode:
                description: specifies how backchannel token will be deliveried.
                example: 'push, poll, ping'
                type: string
              backchannel_user_code_parameter:
                description: >-
                  Boolean value specifying whether the Client supports the
                  user_code parameter. If omitted, the default value is false.
                type: boolean
              claims:
                description: >-
                  String containing a space-separated list of claims that can be
                  requested individually.
                type: string
              claims_redirect_uri:
                description: >-
                  Array of The Claims Redirect URIs to which the client wishes
                  the authorization server to direct the requesting party's user
                  agent after completing its interaction.
                items:
                  type: string
                type: array
              client_name:
                description: Name of the Client to be presented to the user.
                type: string
              client_uri:
                description: >-
                  URL of the home page of the Client. The value of this field
                  must point to a valid Web page.
                type: string
              contacts:
                description: e-mail addresses of people responsible for this Client.
                items:
                  type: string
                type: array
              default_acr_values:
                description: >-
                  Array of default requested Authentication Context Class
                  Reference values that the Authorization Server must use for
                  processing requests from the Client.
                items:
                  type: string
                type: array
              default_max_age:
                description: Specifies the Default Maximum Authentication Age.
                example: 1000000
                type: integer
              frontchannel_logout_session_required:
                description: >-
                  Boolean value specifying whether the RP requires that a
                  session ID query parameter be included to identify the RP
                  session at the OP when the logout_uri is used. If omitted, the
                  default value is false.
                type: boolean
              frontchannel_logout_uri:
                description: >-
                  RP URL that will cause the RP to log itself out when rendered
                  in an iframe by the OP.
                type: string
              grant_types:
                description: >-
                  A list of the OAuth 2.0 Grant Types that the Client is
                  declaring that it will restrict itself to using.
                items:
                  type: string
                type: array
              id_token_encrypted_response_alg:
                description: >-
                  JWE alg algorithm (JWA) required for encrypting the ID Token
                  issued to this Client.
                type: string
              id_token_encrypted_response_enc:
                description: >-
                  JWE enc algorithm (JWA) required for encrypting the ID Token
                  issued to this Client.
                type: string
              id_token_signed_response_alg:
                description: >-
                  JWS alg algorithm (JWA) required for signing the ID Token
                  issued to this Client.
                type: string
              id_token_token_binding_cnf:
                description: >-
                  Specifies the JWT Confirmation Method member name (e.g. tbh)
                  that the Relying Party expects when receiving Token Bound ID
                  Tokens. The presence of this parameter indicates that the
                  Relying Party supports Token Binding of ID Tokens. If omitted,
                  the default is that the Relying Party does not support Token
                  Binding of ID Tokens.
                type: string
              initiate_login_uri:
                description: >-
                  Specifies the URI using the https scheme that the
                  authorization server can call to initiate a login at the
                  client.
                type: string
              jwks:
                description: >-
                  Client's JSON Web Key Set (JWK) document, passed by value. The
                  semantics of the jwks parameter are the same as the jwks_uri
                  parameter, other than that the JWK Set is passed by value,
                  rather than by reference. This parameter is intended only to
                  be used by Clients that, for some reason, are unable to use
                  the jwks_uri parameter, for instance, by native applications
                  that might not have a location to host the contents of the JWK
                  Set. If a Client can use jwks_uri, it must not use jwks. One
                  significant downside of jwks is that it does not enable key
                  rotation. The jwks_uri and jwks parameters must not be used
                  together. Example {"key1": "value1", "key2": "value2"}'
                example:
                  - key1: "value1"
                  - key2: "value2"
                type: object
              jwks_uri:
                description: >-
                  URL for the Client's JSON Web Key Set (JWK) document
                  containing key(s) that are used for signing requests to the
                  OP. The JWK Set may also contain the Client's encryption
                  keys(s) that are used by the OP to encrypt the responses to
                  the Client. When both signing and encryption keys are made
                  available, a use (Key Use) parameter value is required for all
                  keys in the document to indicate each key's intended usage .
                type: string
              keep_client_authorization_after_expiration:
                description: >-
                  Boolean value indicating if the client authorization will not
                  be removed afer expiration (expiration date is same as
                  client's expiration that created it). The default value is
                  false.
                type: boolean
              logo_uri:
                description: URL that references a logo for the Client application
                type: string
              policy_uri:
                description: >-
                  URL that the Relying Party Client provides to the End-User to
                  read about the how the profile data will be used.
                type: string
              post_logout_redirect_uris:
                description: >-
                  Provide the URLs supplied by the RP to request that the user
                  be redirected to this location after a logout has been
                  performed.
                example:
                  - 'https://client.example.org/logout/page1'
                  - 'https://client.example.org/logout/page2'
                  - 'https://client.example.org/logout/page3'
                items:
                  type: string
                type: array
              redirect_uris:
                description: >-
                  Redirection URI values used by the Client. One of these
                  registered Redirection URI values must exactly match the
                  redirect_uri parameter value used in each Authorization
                  Request
                example:
                  - 'https://client.example.org/cb'
                items:
                  type: string
                type: array
              request_object_encryption_alg:
                description: >-
                  JWE alg algorithm (JWA) the RP is declaring that it may use
                  for encrypting Request Objects sent to the OP.
                type: string
              request_object_encryption_enc:
                description: >-
                  JWE enc algorithm (JWA) the RP is declaring that it may use
                  for encrypting Request Objects sent to the OP.
                type: string
              request_object_signing_alg:
                description: >-
                  JWS alg algorithm (JWA) that must be used for signing Request
                  Objects sent to the OP.
                type: string
              request_uris:
                description: >-
                  Provide a list of request_uri values that are pre-registered
                  by the Client for use at the Authorization Server.
                items:
                  type: string
                type: array
              require_auth_time:
                description: >-
                  Boolean value specifying whether the auth_time Claim in the ID
                  Token is required. It is required when the value is true.
                type: boolean
              response_types:
                description: >-
                  A list of the OAuth 2.0 response_type values that the Client
                  is declaring that it will restrict itself to using. If
                  omitted, the default is that the Client will use only the code
                  Response Type. Allowed values are code, token, id_token.
                items:
                  type: string
                type: array
              rpt_as_jwt:
                description: Specifies whether RPT should be return as signed JWT.
                type: boolean
              run_introspection_script_before_access_token_as_jwt_creation_and_include_claims:
                description: >-
                  Boolean value with default value false. If true and
                  access_token_as_jwt=true then run introspection script and
                  transfer claims into JWT.
                type: boolean
              scope:
                description: >-
                  Provide list of scope which are used during authentication to
                  authorize access to resource.
                example:
                  - openid
                items:
                  type: string
                type: array
              scopes:
                description: >-
                  This param will be removed in a future version because the
                  correct is 'scope' not 'scopes', see (rfc7591).
                type: string
                x-deprecated: true
              sector_identifier_uri:
                description: >-
                  URL using the https scheme to be used in calculating
                  Pseudonymous Identifiers by the OP.
                type: string
              software_id:
                description: >-
                  Specifies a unique identifier string (UUID) assigned by the
                  client developer or software publisher used by registration
                  endpoints to identify the client software to be dynamically
                  registered.
                example: 4NRB1-0XZABZI9E6-5SM3R
                type: string
              software_statement:
                description: >-
                  specifies a software statement containing client metadata
                  values about the client software as claims. This is a string
                  value containing the entire signed JWT.
                type: string
              software_version:
                description: >-
                  Specifies a version identifier string for the client software
                  identified by 'software_id'. The value of the
                  'software_version' should change on any update to the client
                  software identified by the same 'software_id'.
                example: '2.1'
                type: string
              spontaneous_scopes:
                description: List of spontaneous scopes
                items:
                  type: string
                type: array
              subject_type:
                description: >-
                  Subject type requested for the Client ID. Valid types include
                  pairwise and public.
                type: string
              tls_client_auth_subject_dn:
                description: >-
                  An string representation of the expected subject distinguished
                  name of the certificate, which the OAuth client will use in
                  mutual TLS authentication.
                type: string
              token_endpoint_auth_method:
                description: Requested Client Authentication method for the Token Endpoint.
                type: string
              token_endpoint_auth_signing_alg:
                description: >-
                  JWS alg algorithm (JWA) that must be used for signing the JWT
                  used to authenticate the Client at the Token Endpoint for the
                  private_key_jwt and client_secret_jwt authentication methods.
                type: string
              tos_uri:
                description: >-
                  URL that the Relying Party Client provides to the End-User to
                  read about the Relying Party's terms of service.
                type: string
              userinfo_encrypted_response_alg:
                description: >-
                  JWE alg algorithm (JWA) required for encrypting UserInfo
                  Responses.
                type: string
              userinfo_encrypted_response_enc:
                description: >-
                  JWE enc algorithm (JWA) required for encrypting UserInfo
                  Responses.
                type: string
              userinfo_signed_response_alg:
                description: >-
                  JWS alg algorithm (JWA) required for signing UserInfo
                  Responses.
                type: string
            title: ClientResponse
            type: object
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_token
                  - invalid_client_metadata
                  - access_denied
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '401':
          description: Invalid parameters are provided to endpoint.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get client information for a previously registered client.
      tags:
        - Registration
    post:
      consumes:
        - application/json
      description: >-
        The Client Registration Endpoint is an OAuth 2.0 Protected Resource
        through which a new Client registration can be requested.
      operationId: post-register
      parameters:
        - in: body
          name: body
          schema:
            properties:
              access_token_as_jwt:
                description: Specifies whether access token as signed JWT.
                type: boolean
              access_token_lifetime:
                description: Specifies the Client-specific access token expiration.
                example: 100000000
                type: integer
              access_token_signing_alg:
                description: >-
                  Specifies signing algorithm that has to be used during JWT
                  signing. If it's not specified, then the default OP signing
                  algorithm will be used .
                type: string
              additional_audience:
                description: Additional audiences.
                items:
                  type: string
                type: array
              allow_spontaneous_scopes:
                description: >-
                  Specifies whether to allow spontaneous scopes for client. The
                  default value is false.
                example: false
                type: boolean
              authorized_origins:
                description: specifies authorized JavaScript origins.
                items:
                  type: string
                type: array
              backchannel_authentication_request_signing_alg:
                description: >-
                  The JWS algorithm alg value that the Client will use for
                  signing authentication request, as described in Section 7.1.1.
                  of OAuth 2.0 [RFC6749]. When omitted, the Client will not send
                  signed authentication requests.
                type: string
              backchannel_client_notification_endpoint:
                description: >-
                  Client Initiated Backchannel Authentication (CIBA) enables a
                  Client to initiate the authentication of an end-user by means
                  of out-of-band mechanisms. Upon receipt of the notification,
                  the Client makes a request to the token endpoint to obtain the
                  tokens.
                type: string
              backchannel_logout_session_required:
                description: >-
                  Boolean value specifying whether the RP requires that a
                  session ID Claim be included in the Logout Token to identify
                  the RP session with the OP when the backchannel_logout_uri is
                  used. If omitted, the default value is false.
                type: boolean
              backchannel_logout_uri:
                description: >-
                  RP URL that will cause the RP to log itself out when sent a
                  Logout Token by the OP.
                type: string
              backchannel_token_delivery_mode:
                description: specifies how backchannel token will be deliveried.
                example: 'push, poll, ping'
                type: string
              backchannel_user_code_parameter:
                description: >-
                  Boolean value specifying whether the Client supports the
                  user_code parameter. If omitted, the default value is false.
                type: boolean
              claims:
                description: >-
                  String containing a space-separated list of claims that can be
                  requested individually.
                type: string
              claims_redirect_uri:
                description: >-
                  Array of The Claims Redirect URIs to which the client wishes
                  the authorization server to direct the requesting party's user
                  agent after completing its interaction.
                items:
                  type: string
                type: array
              client_name:
                description: Name of the Client to be presented to the user.
                type: string
              client_uri:
                description: >-
                  URL of the home page of the Client. The value of this field
                  must point to a valid Web page.
                type: string
              contacts:
                description: e-mail addresses of people responsible for this Client.
                items:
                  type: string
                type: array
              default_acr_values:
                description: >-
                  Array of default requested Authentication Context Class
                  Reference values that the Authorization Server must use for
                  processing requests from the Client.
                items:
                  type: string
                type: array
              default_max_age:
                description: Specifies the Default Maximum Authentication Age.
                example: 1000000
                type: integer
              frontchannel_logout_session_required:
                description: >-
                  Boolean value specifying whether the RP requires that a
                  session ID query parameter be included to identify the RP
                  session at the OP when the logout_uri is used. If omitted, the
                  default value is false.
                type: boolean
              frontchannel_logout_uri:
                description: >-
                  RP URL that will cause the RP to log itself out when rendered
                  in an iframe by the OP.
                type: string
              grant_types:
                description: >-
                  A list of the OAuth 2.0 Grant Types that the Client is
                  declaring that it will restrict itself to using.
                items:
                  type: string
                type: array
              id_token_encrypted_response_alg:
                description: >-
                  JWE alg algorithm (JWA) required for encrypting the ID Token
                  issued to this Client.
                type: string
              id_token_encrypted_response_enc:
                description: >-
                  JWE enc algorithm (JWA) required for encrypting the ID Token
                  issued to this Client.
                type: string
              id_token_signed_response_alg:
                description: >-
                  JWS alg algorithm (JWA) required for signing the ID Token
                  issued to this Client.
                type: string
              id_token_token_binding_cnf:
                description: >-
                  Specifies the JWT Confirmation Method member name (e.g. tbh)
                  that the Relying Party expects when receiving Token Bound ID
                  Tokens. The presence of this parameter indicates that the
                  Relying Party supports Token Binding of ID Tokens. If omitted,
                  the default is that the Relying Party does not support Token
                  Binding of ID Tokens.
                type: string
              initiate_login_uri:
                description: >-
                  Specifies the URI using the https scheme that the
                  authorization server can call to initiate a login at the
                  client.
                type: string
              jwks:
                description: >-
                  List of JSON Web Key (JWK) - A JSON object that represents a
                  cryptographic key. The members of the object represent
                  properties of the key, including its value.
                example: '{ "keys" : [ { "e" : "AQAB", "n" : "gmlDX_mgMcHX.." ] }'
                items:
                  $ref: '#/definitions/JsonWebKey'
                type: array
              jwks_uri:
                description: >-
                  URL for the Client's JSON Web Key Set (JWK) document
                  containing key(s) that are used for signing requests to the
                  OP. The JWK Set may also contain the Client's encryption
                  keys(s) that are used by the OP to encrypt the responses to
                  the Client. When both signing and encryption keys are made
                  available, a use (Key Use) parameter value is required for all
                  keys in the document to indicate each key's intended usage .
                type: string
              keep_client_authorization_after_expiration:
                description: >-
                  Boolean value indicating if the client authorization will not
                  be removed afer expiration (expiration date is same as
                  client's expiration that created it). The default value is
                  false.
                type: boolean
              logo_uri:
                description: URL that references a logo for the Client application
                type: string
              policy_uri:
                description: >-
                  URL that the Relying Party Client provides to the End-User to
                  read about the how the profile data will be used.
                type: string
              post_logout_redirect_uris:
                description: >-
                  Provide the URLs supplied by the RP to request that the user
                  be redirected to this location after a logout has been
                  performed.
                example:
                  - 'https://client.example.org/logout/page1'
                  - 'https://client.example.org/logout/page2'
                  - 'https://client.example.org/logout/page3'
                items:
                  type: string
                type: array
              redirect_uris:
                description: >-
                  Redirection URI values used by the Client. One of these
                  registered Redirection URI values must exactly match the
                  redirect_uri parameter value used in each Authorization
                  Request
                example:
                  - 'https://client.example.org/cb'
                items:
                  type: string
                type: array
              request_object_encryption_alg:
                description: >-
                  JWE alg algorithm (JWA) the RP is declaring that it may use
                  for encrypting Request Objects sent to the OP.
                type: string
              request_object_encryption_enc:
                description: >-
                  JWE enc algorithm (JWA) the RP is declaring that it may use
                  for encrypting Request Objects sent to the OP.
                type: string
              request_object_signing_alg:
                description: >-
                  JWS alg algorithm (JWA) that must be used for signing Request
                  Objects sent to the OP.
                type: string
              request_uris:
                description: >-
                  Provide a list of request_uri values that are pre-registered
                  by the Client for use at the Authorization Server.
                items:
                  type: string
                type: array
              require_auth_time:
                description: >-
                  Boolean value specifying whether the auth_time Claim in the ID
                  Token is required. It is required when the value is true.
                type: boolean
              response_types:
                description: >-
                  A list of the OAuth 2.0 response_type values that the Client
                  is declaring that it will restrict itself to using. If
                  omitted, the default is that the Client will use only the code
                  Response Type. Allowed values are code, token, id_token.
                items:
                  type: string
                type: array
              rpt_as_jwt:
                description: Specifies whether RPT should be return as signed JWT.
                type: boolean
              run_introspection_script_before_access_token_as_jwt_creation_and_include_claims:
                description: >-
                  Boolean value with default value false. If true and
                  access_token_as_jwt=true then run introspection script and
                  transfer claims into JWT.
                type: boolean
              scope:
                description: >-
                  Provide list of scope which are used during authentication to
                  authorize access to resource.
                example:
                  - openid
                items:
                  type: string
                type: array
              scopes:
                description: >-
                  This param will be removed in a future version because the
                  correct is 'scope' not 'scopes', see (rfc7591).
                type: string
                x-deprecated: true
              sector_identifier_uri:
                description: >-
                  URL using the https scheme to be used in calculating
                  Pseudonymous Identifiers by the OP.
                type: string
              software_id:
                description: >-
                  Specifies a unique identifier string (UUID) assigned by the
                  client developer or software publisher used by registration
                  endpoints to identify the client software to be dynamically
                  registered.
                example: 4NRB1-0XZABZI9E6-5SM3R
                type: string
              software_statement:
                description: >-
                  specifies a software statement containing client metadata
                  values about the client software as claims. This is a string
                  value containing the entire signed JWT.
                type: string
              software_version:
                description: >-
                  Specifies a version identifier string for the client software
                  identified by 'software_id'. The value of the
                  'software_version' should change on any update to the client
                  software identified by the same 'software_id'.
                example: '2.1'
                type: string
              spontaneous_scopes:
                description: List of spontaneous scopes
                items:
                  type: string
                type: array
              subject_type:
                description: >-
                  Subject type requested for the Client ID. Valid types include
                  pairwise and public.
                type: string
              tls_client_auth_subject_dn:
                description: >-
                  An string representation of the expected subject distinguished
                  name of the certificate, which the OAuth client will use in
                  mutual TLS authentication.
                type: string
              token_endpoint_auth_method:
                description: Requested Client Authentication method for the Token Endpoint.
                type: string
              token_endpoint_auth_signing_alg:
                description: >-
                  JWS alg algorithm (JWA) that must be used for signing the JWT
                  used to authenticate the Client at the Token Endpoint for the
                  private_key_jwt and client_secret_jwt authentication methods.
                type: string
              tos_uri:
                description: >-
                  URL that the Relying Party Client provides to the End-User to
                  read about the Relying Party's terms of service.
                type: string
              userinfo_encrypted_response_alg:
                description: >-
                  JWE alg algorithm (JWA) required for encrypting UserInfo
                  Responses.
                type: string
              userinfo_encrypted_response_enc:
                description: >-
                  JWE enc algorithm (JWA) required for encrypting UserInfo
                  Responses.
                type: string
              userinfo_signed_response_alg:
                description: >-
                  JWS alg algorithm (JWA) required for signing UserInfo
                  Responses.
                type: string
            required:
              - redirect_uris
            title: RegisterParams
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              client_id:
                description: >-
                  Unique Client Identifier. It MUST NOT be currently valid for
                  any other registered Client.
                type: string
              client_id_issued_at:
                description: Time at which the Client Identifier was issued.
                type: integer
              client_secret:
                description: >-
                  This value is used by Confidential Clients to authenticate to
                  the Token Endpoint
                type: string
              client_secret_expires_at:
                description: >-
                  Time at which the client_secret will expire or 0 if it will
                  not expire.
                type: integer
              registration_access_token:
                description: >-
                  Registration Access Token that can be used at the Client
                  Configuration Endpoint to perform subsequent operations upon
                  the Client registration.
                type: string
              registration_client_uri:
                description: >-
                  Location of the Client Configuration Endpoint where the
                  Registration Access Token can be used to perform subsequent
                  operations upon the resulting Client registration.
                type: string
            required:
              - client_id
            title: RegisterResponseParam
            type: object
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_redirect_uri
                  - invalid_claims_redirect_uri
                  - invalid_client_metadata
                  - invalid_token
                  - invalid_logout_uri
                  - invalid_software_statement
                  - access_denied
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Registers new client dynamically.
      tags:
        - Registration
    put:
      consumes:
        - application/json
      description: Updates Client Metadata for a registered client.
      operationId: put-register
      parameters:
        - description: >-
            Client ID that identifies client that must be updated by this
            request.
          in: query
          name: client_id
          required: true
          type: string
        - description: >-
            Authorization header carrying \"registration_access_token\" issued
            before as a Bearer token
          in: header
          name: Authorization
          required: true
          type: string
        - in: body
          name: body
          schema:
            properties:
              access_token_as_jwt:
                description: Specifies whether access token as signed JWT.
                type: boolean
              access_token_lifetime:
                description: Specifies the Client-specific access token expiration.
                example: 100000000
                type: integer
              access_token_signing_alg:
                description: >-
                  Specifies signing algorithm that has to be used during JWT
                  signing. If it's not specified, then the default OP signing
                  algorithm will be used .
                type: string
              additional_audience:
                description: Additional audiences.
                items:
                  type: string
                type: array
              allow_spontaneous_scopes:
                description: >-
                  Specifies whether to allow spontaneous scopes for client. The
                  default value is false.
                example: false
                type: boolean
              authorized_origins:
                description: specifies authorized JavaScript origins.
                items:
                  type: string
                type: array
              backchannel_authentication_request_signing_alg:
                description: >-
                  The JWS algorithm alg value that the Client will use for
                  signing authentication request, as described in Section 7.1.1.
                  of OAuth 2.0 [RFC6749]. When omitted, the Client will not send
                  signed authentication requests.
                type: string
              backchannel_client_notification_endpoint:
                description: >-
                  Client Initiated Backchannel Authentication (CIBA) enables a
                  Client to initiate the authentication of an end-user by means
                  of out-of-band mechanisms. Upon receipt of the notification,
                  the Client makes a request to the token endpoint to obtain the
                  tokens.
                type: string
              backchannel_logout_session_required:
                description: >-
                  Boolean value specifying whether the RP requires that a
                  session ID Claim be included in the Logout Token to identify
                  the RP session with the OP when the backchannel_logout_uri is
                  used. If omitted, the default value is false.
                type: boolean
              backchannel_logout_uri:
                description: >-
                  RP URL that will cause the RP to log itself out when sent a
                  Logout Token by the OP.
                type: string
              backchannel_token_delivery_mode:
                description: specifies how backchannel token will be deliveried.
                example: 'push, poll, ping'
                type: string
              backchannel_user_code_parameter:
                description: >-
                  Boolean value specifying whether the Client supports the
                  user_code parameter. If omitted, the default value is false.
                type: boolean
              claims:
                description: >-
                  String containing a space-separated list of claims that can be
                  requested individually.
                type: string
              claims_redirect_uri:
                description: >-
                  Array of The Claims Redirect URIs to which the client wishes
                  the authorization server to direct the requesting party's user
                  agent after completing its interaction.
                items:
                  type: string
                type: array
              client_name:
                description: Name of the Client to be presented to the user.
                type: string
              client_uri:
                description: >-
                  URL of the home page of the Client. The value of this field
                  must point to a valid Web page.
                type: string
              contacts:
                description: e-mail addresses of people responsible for this Client.
                items:
                  type: string
                type: array
              default_acr_values:
                description: >-
                  Array of default requested Authentication Context Class
                  Reference values that the Authorization Server must use for
                  processing requests from the Client.
                items:
                  type: string
                type: array
              default_max_age:
                description: Specifies the Default Maximum Authentication Age.
                example: 1000000
                type: integer
              frontchannel_logout_session_required:
                description: >-
                  Boolean value specifying whether the RP requires that a
                  session ID query parameter be included to identify the RP
                  session at the OP when the logout_uri is used. If omitted, the
                  default value is false.
                type: boolean
              frontchannel_logout_uri:
                description: >-
                  RP URL that will cause the RP to log itself out when rendered
                  in an iframe by the OP.
                type: string
              grant_types:
                description: >-
                  A list of the OAuth 2.0 Grant Types that the Client is
                  declaring that it will restrict itself to using.
                items:
                  type: string
                type: array
              id_token_encrypted_response_alg:
                description: >-
                  JWE alg algorithm (JWA) required for encrypting the ID Token
                  issued to this Client.
                type: string
              id_token_encrypted_response_enc:
                description: >-
                  JWE enc algorithm (JWA) required for encrypting the ID Token
                  issued to this Client.
                type: string
              id_token_signed_response_alg:
                description: >-
                  JWS alg algorithm (JWA) required for signing the ID Token
                  issued to this Client.
                type: string
              id_token_token_binding_cnf:
                description: >-
                  Specifies the JWT Confirmation Method member name (e.g. tbh)
                  that the Relying Party expects when receiving Token Bound ID
                  Tokens. The presence of this parameter indicates that the
                  Relying Party supports Token Binding of ID Tokens. If omitted,
                  the default is that the Relying Party does not support Token
                  Binding of ID Tokens.
                type: string
              initiate_login_uri:
                description: >-
                  Specifies the URI using the https scheme that the
                  authorization server can call to initiate a login at the
                  client.
                type: string
              jwks:
                description: >-
                  List of JSON Web Key (JWK) - A JSON object that represents a
                  cryptographic key. The members of the object represent
                  properties of the key, including its value. Must have the keyword
                  keys (TODO check if this is correctly represented here?)
                items:
                  $ref: '#/definitions/JsonWebKey'
                  type: array
              jwks_uri:
                description: >-
                  URL for the Client's JSON Web Key Set (JWK) document
                  containing key(s) that are used for signing requests to the
                  OP. The JWK Set may also contain the Client's encryption
                  keys(s) that are used by the OP to encrypt the responses to
                  the Client. When both signing and encryption keys are made
                  available, a use (Key Use) parameter value is required for all
                  keys in the document to indicate each key's intended usage .
                type: string
              keep_client_authorization_after_expiration:
                description: >-
                  Boolean value indicating if the client authorization will not
                  be removed afer expiration (expiration date is same as
                  client's expiration that created it). The default value is
                  false.
                type: boolean
              logo_uri:
                description: URL that references a logo for the Client application
                type: string
              policy_uri:
                description: >-
                  URL that the Relying Party Client provides to the End-User to
                  read about the how the profile data will be used.
                type: string
              post_logout_redirect_uris:
                description: >-
                  Provide the URLs supplied by the RP to request that the user
                  be redirected to this location after a logout has been
                  performed.
                example:
                  - 'https://client.example.org/logout/page1'
                  - 'https://client.example.org/logout/page2'
                  - 'https://client.example.org/logout/page3'
                items:
                  type: string
                type: array
              redirect_uris:
                description: >-
                  Redirection URI values used by the Client. One of these
                  registered Redirection URI values must exactly match the
                  redirect_uri parameter value used in each Authorization
                  Request
                example:
                  - 'https://client.example.org/cb'
                items:
                  type: string
                type: array
              request_object_encryption_alg:
                description: >-
                  JWE alg algorithm (JWA) the RP is declaring that it may use
                  for encrypting Request Objects sent to the OP.
                type: string
              request_object_encryption_enc:
                description: >-
                  JWE enc algorithm (JWA) the RP is declaring that it may use
                  for encrypting Request Objects sent to the OP.
                type: string
              request_object_signing_alg:
                description: >-
                  JWS alg algorithm (JWA) that must be used for signing Request
                  Objects sent to the OP.
                type: string
              request_uris:
                description: >-
                  Provide a list of request_uri values that are pre-registered
                  by the Client for use at the Authorization Server.
                items:
                  type: string
                type: array
              require_auth_time:
                description: >-
                  Boolean value specifying whether the auth_time Claim in the ID
                  Token is required. It is required when the value is true.
                type: boolean
              response_types:
                description: >-
                  A list of the OAuth 2.0 response_type values that the Client
                  is declaring that it will restrict itself to using. If
                  omitted, the default is that the Client will use only the code
                  Response Type. Allowed values are code, token, id_token.
                items:
                  type: string
                type: array
              rpt_as_jwt:
                description: Specifies whether RPT should be return as signed JWT.
                type: boolean
              run_introspection_script_before_access_token_as_jwt_creation_and_include_claims:
                description: >-
                  Boolean value with default value false. If true and
                  access_token_as_jwt=true then run introspection script and
                  transfer claims into JWT.
                type: boolean
              scope:
                description: >-
                  Provide list of scope which are used during authentication to
                  authorize access to resource.
                example:
                  - openid
                items:
                  type: string
                type: array
              scopes:
                description: >-
                  This param will be removed in a future version because the
                  correct is 'scope' not 'scopes', see (rfc7591).
                type: string
                x-deprecated: true
              sector_identifier_uri:
                description: >-
                  URL using the https scheme to be used in calculating
                  Pseudonymous Identifiers by the OP.
                type: string
              software_id:
                description: >-
                  Specifies a unique identifier string (UUID) assigned by the
                  client developer or software publisher used by registration
                  endpoints to identify the client software to be dynamically
                  registered.
                example: 4NRB1-0XZABZI9E6-5SM3R
                type: string
              software_statement:
                description: >-
                  specifies a software statement containing client metadata
                  values about the client software as claims. This is a string
                  value containing the entire signed JWT.
                type: string
              software_version:
                description: >-
                  Specifies a version identifier string for the client software
                  identified by 'software_id'. The value of the
                  'software_version' should change on any update to the client
                  software identified by the same 'software_id'.
                example: '2.1'
                type: string
              spontaneous_scopes:
                description: List of spontaneous scopes
                items:
                  type: string
                type: array
              subject_type:
                description: >-
                  Subject type requested for the Client ID. Valid types include
                  pairwise and public.
                type: string
              tls_client_auth_subject_dn:
                description: >-
                  An string representation of the expected subject distinguished
                  name of the certificate, which the OAuth client will use in
                  mutual TLS authentication.
                type: string
              token_endpoint_auth_method:
                description: Requested Client Authentication method for the Token Endpoint.
                type: string
              token_endpoint_auth_signing_alg:
                description: >-
                  JWS alg algorithm (JWA) that must be used for signing the JWT
                  used to authenticate the Client at the Token Endpoint for the
                  private_key_jwt and client_secret_jwt authentication methods.
                type: string
              tos_uri:
                description: >-
                  URL that the Relying Party Client provides to the End-User to
                  read about the Relying Party's terms of service.
                type: string
              userinfo_encrypted_response_alg:
                description: >-
                  JWE alg algorithm (JWA) required for encrypting UserInfo
                  Responses.
                type: string
              userinfo_encrypted_response_enc:
                description: >-
                  JWE enc algorithm (JWA) required for encrypting UserInfo
                  Responses.
                type: string
              userinfo_signed_response_alg:
                description: >-
                  JWS alg algorithm (JWA) required for signing UserInfo
                  Responses.
                type: string
            required:
              - redirect_uris
            title: RegisterParams
            type: object
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              client_id:
                description: >-
                  Unique Client Identifier. It MUST NOT be currently valid for
                  any other registered Client.
                type: string
              client_id_issued_at:
                description: Time at which the Client Identifier was issued.
                type: integer
              client_secret:
                description: >-
                  This value is used by Confidential Clients to authenticate to
                  the Token Endpoint
                type: string
              client_secret_expires_at:
                description: >-
                  Time at which the client_secret will expire or 0 if it will
                  not expire.
                type: integer
              registration_access_token:
                description: >-
                  Registration Access Token that can be used at the Client
                  Configuration Endpoint to perform subsequent operations upon
                  the Client registration.
                type: string
              registration_client_uri:
                description: >-
                  Location of the Client Configuration Endpoint where the
                  Registration Access Token can be used to perform subsequent
                  operations upon the resulting Client registration.
                type: string
            required:
              - client_id
            title: RegisterResponseParam
            type: object
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_client_metadata
                  - invalid_token
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Updates Client Metadata for a registered client.
      tags:
        - Registration
  /revoke:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: 'Revoke an Access Token or a Refresh Token, the RP (Client).'
      operationId: revoke
      parameters:
        - description: The token that the client wants to get revoked.
          in: formData
          name: token
          required: true
          type: string
        - description: A hint about the type of the token submitted for revocation.
          in: formData
          name: token_type_hint
          type: string
      produces:
        - content
        - application/json
      responses:
        '200':
          description: OK
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - unsupported_token_type
                  - invalid_client
                  - invalid_request
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: 'Revoke an Access Token or a Refresh Token, the RP (Client).'
      tags:
        - Token
  /revoke_session:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Revoke all sessions for user (requires revoke_session scope).
      operationId: revoke-session
      parameters:
        - description: user criterion key (e.g. uid)
          in: formData
          name: user_criterion_key
          required: true
          type: string
        - description: user criterion value (e.g. chris)
          in: formData
          name: user_criterion_value
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: >-
            OK - Returned if request was processed successfully. Means it will
            return in case sessions are found as well as in case sessions are
            not found (error is not returned to not disclose internal
            information).
        '401':
          description: Unauthorized access request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Revoke all sessions for user.
      tags:
        - Session Management
  /rpt/status:
    get:
      description: The Introspection OAuth 2 Endpoint for RPT.
      operationId: get-rpt-status
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
        - in: query
          name: token
          required: true
          type: string
        - in: query
          name: token_type_hint
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              active:
                description: >-
                  Boolean indicator of whether or not the presented token is
                  currently active.
                type: boolean
              aud:
                description: >-
                  Service-specific string identifier or list of string
                  identifiers representing the intended audience for this token.
                type: string
              clientId:
                description: Client id used to obtain RPT.
                type: string
              exp:
                description: >-
                  Integer timestamp, in seconds since January 1 1970 UTC,
                  indicating when this token will expire.
                example: 1256953732
                format: int64
                type: integer
              iat:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating when this permission was
                  originally issued.
                example: 1256953732
                type: integer
              iss:
                description: >-
                  String representing the issuer of this token, as defined in
                  JWT [RFC7519].
                type: string
              jti:
                description: 'String identifier for the token, as defined in JWT [RFC7519].'
                type: string
              nbf:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating the time before which this
                  permission is not valid.
                type: integer
              pct_claims:
                additionalProperties:
                  type: string
                description: PCT token claims.
                type: object
              permissions:
                items:
                  description: >-
                    List of UmaPermission granted to RPT. A permission is
                    (requested or granted) authorized access to a particular
                    resource with some number of scopes  bound to that resource.
                  properties:
                    exp:
                      description: >-
                        Integer timestamp, measured in the number of seconds
                        since January 1 1970 UTC, indicating when this
                        permission will expire. If the token-level exp value
                        pre-dates a permission-level exp value, the token-level
                        value takes precedence.
                      type: integer
                    iat:
                      description: >-
                        Integer timestamp, measured in the number of seconds
                        since January 1 1970 UTC, indicating when this
                        permission was originally issued. If the token-level iat
                        value post-dates a permission-level iat value, the
                        token-level value takes precedence.
                      type: integer
                    nbf:
                      description: >-
                        Integer timestamp, measured in the number of seconds
                        since January 1 1970 UTC, indicating the time before
                        which this permission is not valid. If the token-level
                        nbf value post-dates a permission-level nbf value, the
                        token-level value takes precedence.
                      type: integer
                    resource_id:
                      description: >-
                        A string that uniquely identifies the protected
                        resource, access to which has been granted to this
                        client on behalf of this requesting party. The
                        identifier MUST correspond to a resource that was
                        previously registered as protected.
                      type: string
                    resource_scopes:
                      description: >-
                        An array referencing zero or more strings representing
                        scopes to which access was granted for this resource.
                        Each string MUST correspond to a scope that was
                        registered by this resource server for the referenced
                        resource.
                      items:
                        type: string
                      type: array
                  required:
                    - resource_id
                    - resource_scopes
                  type: object
                type: array
              resource_id:
                description: Resource ID.
                type: string
              resource_scopes:
                items:
                  type: string
                type: array
              sub:
                description: >-
                  Subject of the token. Usually a machine-readable identifier of
                  the resource owner who authorized this token.
                type: string
            required:
              - active
              - permissions
              - resource_id
              - resource_scopes
            title: RptIntrospectionResponse
            type: object
        '405':
          description: Introspection of RPT is not allowed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: The Introspection OAuth 2 Endpoint for RPT.
      tags:
        - Token Introspection
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: The Introspection OAuth 2 Endpoint for RPT.
      operationId: post-rpt-status
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          required: true
          type: string
        - description: Client access token.
          in: formData
          name: token
          required: true
          type: string
        - description: >-
            ID Token previously issued by the Authorization Server being passed
            as a hint about the End-User.
          in: formData
          name: token_type_hint
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              active:
                description: >-
                  Boolean indicator of whether or not the presented token is
                  currently active.
                type: boolean
              aud:
                description: >-
                  Service-specific string identifier or list of string
                  identifiers representing the intended audience for this token.
                type: string
              clientId:
                description: Client id used to obtain RPT.
                type: string
              exp:
                description: >-
                  Integer timestamp, in seconds since January 1 1970 UTC,
                  indicating when this token will expire.
                example: 1256953732
                format: int64
                type: integer
              iat:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating when this permission was
                  originally issued.
                example: 1256953732
                type: integer
              iss:
                description: >-
                  String representing the issuer of this token, as defined in
                  JWT [RFC7519].
                type: string
              jti:
                description: 'String identifier for the token, as defined in JWT [RFC7519].'
                type: string
              nbf:
                description: >-
                  Integer timestamp, measured in the number of seconds since
                  January 1 1970 UTC, indicating the time before which this
                  permission is not valid.
                type: integer
              pct_claims:
                additionalProperties:
                  description: PCT token claims.
                  example: '{name:["John"]}'
                  type: string
                type: object
              permissions:
                items:
                  description: >-
                    List of UmaPermission granted to RPT. A permission is
                    (requested or granted) authorized access to a particular
                    resource with some number of scopes  bound to that resource.
                  properties:
                    exp:
                      description: >-
                        Integer timestamp, measured in the number of seconds
                        since January 1 1970 UTC, indicating when this
                        permission will expire. If the token-level exp value
                        pre-dates a permission-level exp value, the token-level
                        value takes precedence.
                      type: integer
                    iat:
                      description: >-
                        Integer timestamp, measured in the number of seconds
                        since January 1 1970 UTC, indicating when this
                        permission was originally issued. If the token-level iat
                        value post-dates a permission-level iat value, the
                        token-level value takes precedence.
                      type: integer
                    nbf:
                      description: >-
                        Integer timestamp, measured in the number of seconds
                        since January 1 1970 UTC, indicating the time before
                        which this permission is not valid. If the token-level
                        nbf value post-dates a permission-level nbf value, the
                        token-level value takes precedence.
                      type: integer
                    resource_id:
                      description: >-
                        A string that uniquely identifies the protected
                        resource, access to which has been granted to this
                        client on behalf of this requesting party. The
                        identifier MUST correspond to a resource that was
                        previously registered as protected.
                      type: string
                    resource_scopes:
                      description: >-
                        An array referencing zero or more strings representing
                        scopes to which access was granted for this resource.
                        Each string MUST correspond to a scope that was
                        registered by this resource server for the referenced
                        resource.
                      items:
                        type: string
                      type: array
                  required:
                    - resource_id
                    - resource_scopes
                  type: object
                type: array
              resource_id:
                description: Resource ID.
                type: string
              resource_scopes:
                items:
                  type: string
                type: array
              sub:
                description: >-
                  Subject of the token. Usually a machine-readable identifier of
                  the resource owner who authorized this token.
                type: string
            required:
              - active
              - permissions
              - resource_id
              - resource_scopes
            title: RptIntrospectionResponse
            type: object
        '405':
          description: Introspection of RPT is not allowed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: The Introspection OAuth 2 Endpoint for RPT.
      tags:
        - Token Introspection
  /session_status:
    get:
      description: Determine current sesion status.
      operationId: session_status
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              auth_time:
                description: specifies the time at which session was authenticated.
                example: "100000000"
                format: date
                type: string
              custom_state:
                type: string
              state:
                description: >-
                  String that represents the End-User's login state at the OP.
                  It MUST NOT contain the space (\" \") character.
                type: string
            title: SessionStateObject
            type: object
      summary: Determine current sesion status.
      tags:
        - Session Management
  /token:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: >-
        To obtain an Access Token, an ID Token, and optionally a Refresh Token,
        the RP (Client).
      operationId: post-token
      parameters:
        - collectionFormat: csv
          description: >-
            Provide a list of the OAuth 2.0 grant types that the Client is
            declaring that it will restrict itself to using.
          in: formData
          items:
            type: string
          name: grant_type
          required: true
          type: array
        - description: >-
            Code which is returned by authorization endpoint. (For
            grant_type=authorization_code)
          in: formData
          name: code
          type: string
        - description: >-
            Redirection URI to which the response will be sent. This URI MUST
            exactly match one of the Redirection URI values for the Client
            pre-registered at the OpenID Provider.
          in: formData
          name: redirect_uri
          type: string
        - description: End-User username.
          in: formData
          name: username
          type: string
        - description: End-User password.
          in: formData
          name: password
          type: string
        - collectionFormat: csv
          description: >-
            OpenID Connect requests MUST contain the openid scope value. If the
            openid scope value is not present, the behavior is entirely
            unspecified. Other scope values MAY be present. Scope values used
            that are not understood by an implementation SHOULD be ignored.
          in: formData
          items:
            type: string
          name: scope
          type: array
        - description: Assertion.
          in: formData
          name: assertion
          type: string
        - description: Refresh token.
          in: formData
          name: refresh_token
          type: string
        - description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          in: formData
          name: client_id
          type: string
        - description: >-
            The client secret.  The client MAY omit the parameter if the client
            secret is an empty string.
          in: formData
          name: client_secret
          type: string
        - description: The client's PKCE code verifier.
          in: formData
          name: code_verifier
          type: string
        - in: formData
          name: ticket
          type: string
        - in: formData
          name: claim_token
          type: string
        - in: formData
          name: claim_token_format
          type: string
        - in: formData
          name: pct
          type: string
        - in: formData
          name: rpt
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: AccessTokenResponse.
            properties:
              access_token:
                description: The access token issued by the authorization server.
                type: string
              expires_in:
                description: >-
                  The lifetime in seconds of the access token. For example, the
                  value \"3600\" denotes that the access token will expire in
                  one hour from the time the response was generated.
                type: integer
              id_token:
                type: string
              refresh_token:
                description: >-
                  The refresh token, which can be used to obtain new access
                  tokens using the same authorization grant
                type: string
              scope:
                example:
                  - openid
                  - oxd
                items:
                  type: string
                type: array
              token_type:
                description: >-
                  The access token type provides the client with the information
                  required to successfully utilize the access token to make a
                  protected resource request (along with type-specific
                  attributes).
                type: string
            required:
              - access_token
              - token_type
            type: object
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_client_metadata
                  - invalid_token
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '401':
          description: Unauthorized access request.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Invalid details provided hence access denied.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: >-
        To obtain an Access Token, an ID Token, and optionally a Refresh Token,
        the RP (Client).
      tags:
        - Token
  /uma/gather_claims:
    get:
      description: UMA Claims Gathering Endpoint.
      operationId: get-uma-gather_claims
      parameters:
        - description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          in: query
          name: client_id
          type: string
        - in: query
          name: ticket
          type: string
        - in: query
          name: claims_redirect_uri
          type: string
        - in: query
          name: state
          type: string
        - in: query
          name: reset
          type: boolean
        - in: query
          name: authentication
          type: boolean
      produces:
        - application/json
      responses:
        '302':
          description: Resource Found.
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_session
                  - invalid_claims_gathering_script_name
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: UMA Claims Gathering Endpoint.
      tags:
        - UMA (User Managed Access)
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: UMA Claims Gathering Endpoint
      operationId: post-uma-gather_claims
      parameters:
        - description: OAuth 2.0 Client Identifier valid at the Authorization Server.
          in: formData
          name: client_id
          type: string
        - in: formData
          name: ticket
          type: string
        - in: formData
          name: claims_redirect_uri
          type: string
        - in: formData
          name: state
          type: string
        - in: formData
          name: reset
          type: boolean
        - in: formData
          name: authentication
          type: boolean
      produces:
        - application/json
      responses:
        '302':
          description: Resource Found.
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_session
                  - invalid_claims_gathering_script_name
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: UMA Claims Gathering Endpoint
      tags:
        - UMA (User Managed Access)
  /uma/scopes:
    get:
      description: Provides UMA Scope description by scope id.
      operationId: get-uma_scopes
      parameters:
        - description: Resource description ID.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              description:
                description: >-
                  A human-readable string describing the resource at length. The
                  authorization server MAY use this description in any user
                  interface it presents to a resource owner, for example, for
                  resource protection monitoring or policy setting.
                type: string
              iconUri:
                description: >-
                  A URI for a graphic icon representing the scope. The
                  referenced icon MAY be used by the authorization server in any
                  user interface it presents to the resource owner.
                type: string
              name:
                description: >-
                  A human-readable string describing some scope (extent) of
                  access. This name MAY be used by the authorization server in
                  any user interface it presents to the resource owner.
                type: string
            required:
              - name
            title: UmaScopeDescription
        '404':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - not_found
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Provides UMA Scope description by scope id.
      tags:
        - UMA Scope
  /uma2-configuration:
    get:
      description: Gets UMA configuration data.
      operationId: uma2-configuration
      parameters: []
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            description: UmaMetadata
            properties:
              authorization_endpoint:
                description: >-
                  URL of the authorization server's authorization endpoint.
                  example: https://sample.com/oxauth/restv1/authorize
                  token_endpoint: type: string description: URL of the
                  authorization server's token endpoint [RFC6749].  This is
                  REQUIRED unless only the implicit grant type is used. example:
                  https://sample.com/oxauth/restv1/token jwks_uri: type: string
                  description: URL of the authorization server's JWK Set [JWK]
                  document.  The referenced document contains the signing key(s)
                  the client uses to validate signatures from the authorization
                  server. This URL MUST use the "https" scheme.  The JWK Set MAY
                  also contain the server's encryption key(s), which are used by
                  clients to encrypt requests to the server.  When both signing
                  and encryption keys are made available, a "use" (public key
                  use) parameter value is REQUIRED for all keys in the
                  referenced JWK Set to indicate each key's intended usage.
                  example: https://sample.com/oxauth/restv1/jwks
                  registration_endpoint: type: string description: URL of the
                  authorization server's OAuth 2.0 Dynamic Client Registration
                  endpoint [RFC7591] example:
                  https://sample.com/oxauth/restv1/register
                  response_types_supported: type: array items: type: string
                  description: JSON array containing a list of the OAuth 2.0
                  "response_type" values that this authorization server
                  supports. The array values used are the same as those used
                  with the "response_types" parameter defined by "OAuth 2.0
                  Dynamic Client Registration Protocol" [RFC7591]. example: -
                  code - id_token - token grant_types_supported: type: array
                  items: type: string description: JSON array containing a list
                  of the OAuth 2.0 grant type values that this authorization
                  server supports.  The array values used are the same as those
                  used with the "grant_types" parameter defined by "OAuth 2.0
                  Dynamic Client Registration Protocol" [RFC7591].  If omitted,
                  the default value is "["authorization_code", "implicit"]".
                  example: - authorization_code - implicit - client_credentials
                  token_endpoint_auth_methods_supported: type: array items:
                  type: string description: JSON array containing a list of
                  client authentication methods supported by this token
                  endpoint.  Client authentication method values are used in the
                  "token_endpoint_auth_method" parameter defined in Section 2 of
                  [RFC7591].  If omitted, the default is "client_secret_basic"
                  -- the HTTP Basic Authentication Scheme specified in Section
                  2.3.1 of OAuth 2.0 [RFC6749]. example: - client_secret_basic -
                  client_secret_post - client_secret_jwt - private_key_jwt
                  token_endpoint_auth_signing_alg_values_supported: type: array
                  items: type: string description: JSON array containing a list
                  of the JWS signing algorithms ("alg" values) supported by the
                  token endpoint for the signature on the JWT [JWT] used to
                  authenticate the client at the token endpoint for the
                  "private_key_jwt" and "client_secret_jwt" authentication
                  methods.  Servers SHOULD support "RS256".  The value "none"
                  MUST NOT be used. example: - HS256 - HS384 - HS512 - RS256 -
                  RS384 - RS512 - ES256 - ES384 - ES512 service_documentation:
                  type: string description: URL of a page containing
                  human-readable information that developers might want or need
                  to know when using the authorization server.  In particular,
                  if the authorization server does not support Dynamic Client
                  Registration, then information on how to register clients
                  needs to be provided in this documentation. example:
                  http://<op_docs> ui_locales_supported: type: array items:
                  type: string description: Languages and scripts supported for
                  the user interface, represented as a JSON array of BCP47
                  [RFC5646] language tag values. example: - en - es
                  op_policy_uri: type: string description: URL that the
                  authorization server provides to the person registering the
                  client to read about the authorization server's requirements
                  on how the client can use the data provided by the
                  authorization server.  The registration process SHOULD display
                  this URL to the person registering the client if it is given. 
                  As described in Section 5, despite the identifier
                  "op_policy_uri", appearing to be OpenID-specific, its usage in
                  this specification is actually referring to a general OAuth
                  2.0 feature that is not specific to OpenID Connect. example:
                  http://ox.sample.com/doku.php?id=oxauth:policy op_tos_uri:
                  type: string description: URL that the authorization server
                  provides to the person registering the client to read about
                  the authorization server's terms of service.  The registration
                  process SHOULD display this URL to the person registering the
                  client if it is given.  As described in Section 5, despite the
                  identifier "op_tos_uri", appearing to be OpenID-specific, its
                  usage in this specification is actually referring to a general
                  OAuth 2.0 feature that is not specific to OpenID Connect.
                  example: http://ox.sample.com/doku.php?id=oxauth:tos
                  introspection_endpoint: type: string description: URL of the
                  authorization server's OAuth 2.0 introspection endpoint
                  [RFC7662]. example:
                  https://sample.com/oxauth/restv1/rpt/status
                  code_challenge_methods_supported: type: array items: type:
                  string description: JSON array containing a list of PKCE
                  [RFC7636] code challenge methods supported by this
                  authorization server.  Code challenge method values are used
                  in the "code_challenge_method" parameter defined in Section
                  4.3 of [RFC7636].  The valid code challenge method values are
                  those registered in the IANA "PKCE Code Challenge Methods"
                  registry [IANA.OAuth.Parameters] claims_interaction_endpoint:
                  type: string description: Static endpoint URI at which the
                  authorization server declares that it interacts with end-user
                  requesting parties to gather claims. If the authorization
                  server also provides a claims interaction endpoint URI as part
                  of its redirect_user hint in a need_info response to a client
                  on authorization failure (see Section 3.3.6), that value
                  overrides this metadata value. Providing the static endpoint
                  URI is useful for enabling interactive claims gathering prior
                  to any pushed-claims flows taking place, so that, for example,
                  it is possible to gather requesting party authorization
                  interactively for collecting all other claims in a "silent"
                  fashion.
                example: 'https://sample.com/oxauth/restv1/uma/gather_claims'
                type: string
              issuer:
                description: >-
                  The authorization server's issuer identifier, which is\n a URL
                  that uses the \"https\" scheme and has no query or fragment\n
                  components.  This is the location where \".well-known\" RFC
                  5785\n [RFC5785] resources containing information about the
                  authorization\n server are published.  Using these well-known
                  resources is\n described in Section 3.  The issuer identifier
                  is used to prevent\n authorization server mix-up attacks, as
                  described in \"OAuth 2.0 Mix-Up Mitigation\"
                example: 'https://sample.com'
                type: string
              permission_endpoint:
                description: >-
                  The endpoint URI at which the resource server requests
                  permissions on the client's behalf.
                example: 'https://sample.com/oxauth/restv1/host/rsrc_pr'
                type: string
              resource_registration_endpoint:
                description: >-
                  The endpoint URI at which the resource server registers
                  resources to put them under authorization manager protection.
                example: 'https://sample.com/oxauth/restv1/host/rsrc/resource_set'
                type: string
              scope_endpoint:
                description: The Scope endpoint URI.
                example: 'https://sample.com/oxauth/restv1/uma/scopes'
                type: string
              uma_profiles_supported:
                description: >-
                  UMA profiles supported by this authorization server. The value
                  is an array of string values, where each string value is a URI
                  identifying an UMA profile
                items:
                  type: string
                type: array
            required:
              - issuer
              - authorization_endpoint
              - token_endpoint
              - response_types_supported
            type: object
        '500':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - server_error
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
      summary: Gets UMA configuration data.
      tags:
        - UMA (User Managed Access)
  /userinfo:
    get:
      description: Returns Claims about the authenticated End-User.
      operationId: get-userinfo
      parameters:
        - description: OAuth 2.0 Access Token.
          in: query
          name: access_token
          required: true
          type: string
        - in: header
          name: Authorization
          type: string
      produces:
        - application/jwt
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              email:
                example: janedoe@example.com
                type: string
              family_name:
                example: Doe
                type: string
              given_name:
                example: Jane
                type: string
              name:
                example: Jane Doe
                type: string
              picture:
                example: 'http://example.com/janedoe/me.jpg'
                type: string
              preferred_username:
                example: j.doe
                type: string
              sub:
                example: 248289761001
                type: integer
            title: User Claims details
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '401':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_token
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '403':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - insufficient_scope
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns Claims about the authenticated End-User.
      tags:
        - User Info
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Returns Claims about the authenticated End-User.
      operationId: post-userinfo
      parameters:
        - description: >-
            Client Authorization details that contains the access token along
            with other details.
          in: header
          name: Authorization
          type: string
        - description: OAuth 2.0 Access Token.
          in: formData
          name: access_token
          required: true
          type: string
      produces:
        - application/jwt
        - application/json
      responses:
        '200':
          description: OK
          schema:
            properties:
              email:
                example: janedoe@example.com
                type: string
              family_name:
                example: Doe
                type: string
              given_name:
                example: Jane
                type: string
              name:
                example: Jane Doe
                type: string
              picture:
                example: 'http://example.com/janedoe/me.jpg'
                type: string
              preferred_username:
                example: j.doe
                type: string
              sub:
                example: 248289761001
                type: integer
            title: User Claims details
        '400':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_request
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '401':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - invalid_token
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '403':
          description: Invalid parameters provided to endpoint.
          schema:
            properties:
              details:
                type: string
              error:
                example:
                  - insufficient_scope
                format: enum
                type: string
              error_description:
                type: string
            required:
              - error
              - error_description
            type: object
        '500':
          description: Internal error occured. Please check log file for details.
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Returns Claims about the authenticated End-User.
      tags:
        - User Info
schemes:
  - https
swagger: '2.0'
tags:
  - description: >-
      oxAuth is an open source OpenID Connect Provider (OP) and UMA
      Authorization Server (AS). The project also includes OpenID Connect Client
      code which can be used by websites to validate tokens.oxAuth currently
      implements all required aspects of the OpenID Connect stack, including an
      OAuth 2.0 authorization server, Simple Web Discovery, Dynamic Client
      Registration, JSON Web Tokens, JSON Web Keys, and User Info
      Endpoint.oxAuth is tightly coupled with oxTrust.
    name: developers
x-components:
  responses:
    AccessDenied:
      content:
        application/json:
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Invalid details provided hence access denied.
    Found:
      content: {}
      description: Resource Found.
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Internal error occured. Please check log file for details.
    InvalidRequest:
      content:
        application/json:
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Invalid parameters are provided to endpoint.
    NotAcceptable:
      content:
        application/json:
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Request Not Acceptable.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Resource Not Found.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/definitions/ErrorResponse'
      description: Unauthorized access request.

