// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClientResponse ClientResponse
//
// swagger:model ClientResponse
type ClientResponse struct {

	// Specifies whether access token as signed JWT.
	AccessTokenAsJwt bool `json:"access_token_as_jwt,omitempty"`

	// Specifies the Client-specific access token expiration.
	AccessTokenLifetime int32 `json:"access_token_lifetime,omitempty"`

	// Specifies signing algorithm that has to be used during JWT signing. If it's not specified, then the default OP signing algorithm will be used .
	AccessTokenSigningAlg string `json:"access_token_signing_alg,omitempty"`

	// Specifies whether to allow spontaneous scopes for client. The default value is false.
	AllowSpontaneousScopes bool `json:"allow_spontaneous_scopes,omitempty"`

	// specifies authorized JavaScript origins.
	AuthorizedOrigins []string `json:"authorized_origins"`

	// The JWS algorithm alg value that the Client will use for signing authentication request, as described in Section 7.1.1. of OAuth 2.0 [RFC6749]. When omitted, the Client will not send signed authentication requests.
	BackchannelAuthenticationRequestSigningAlg string `json:"backchannel_authentication_request_signing_alg,omitempty"`

	// Client Initiated Backchannel Authentication (CIBA) enables a Client to initiate the authentication of an end-user by means of out-of-band mechanisms. Upon receipt of the notification, the Client makes a request to the token endpoint to obtain the tokens.
	BackchannelClientNotificationEndpoint string `json:"backchannel_client_notification_endpoint,omitempty"`

	// Boolean value specifying whether the RP requires that a session ID Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
	BackchannelLogoutSessionRequired bool `json:"backchannel_logout_session_required,omitempty"`

	// RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
	BackchannelLogoutURI string `json:"backchannel_logout_uri,omitempty"`

	// specifies how backchannel token will be deliveried.
	BackchannelTokenDeliveryMode string `json:"backchannel_token_delivery_mode,omitempty"`

	// Boolean value specifying whether the Client supports the user_code parameter. If omitted, the default value is false.
	BackchannelUserCodeParameter bool `json:"backchannel_user_code_parameter,omitempty"`

	// String containing a space-separated list of claims that can be requested individually.
	Claims string `json:"claims,omitempty"`

	// Array of The Claims Redirect URIs to which the client wishes the authorization server to direct the requesting party's user agent after completing its interaction.
	ClaimsRedirectURI []string `json:"claims_redirect_uri"`

	// Name of the Client to be presented to the user.
	ClientName string `json:"client_name,omitempty"`

	// URL of the home page of the Client. The value of this field must point to a valid Web page.
	ClientURI string `json:"client_uri,omitempty"`

	// e-mail addresses of people responsible for this Client.
	Contacts []string `json:"contacts"`

	// Array of default requested Authentication Context Class Reference values that the Authorization Server must use for processing requests from the Client.
	DefaultAcrValues []string `json:"default_acr_values"`

	// Specifies the Default Maximum Authentication Age.
	DefaultMaxAge int32 `json:"default_max_age,omitempty"`

	// Boolean value specifying whether the RP requires that a session ID query parameter be included to identify the RP session at the OP when the logout_uri is used. If omitted, the default value is false.
	FrontchannelLogoutSessionRequired bool `json:"frontchannel_logout_session_required,omitempty"`

	// RP URL that will cause the RP to log itself out when rendered in an iframe by the OP.
	FrontchannelLogoutURI string `json:"frontchannel_logout_uri,omitempty"`

	// A list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using.
	GrantTypes []string `json:"grant_types"`

	// JWE alg algorithm (JWA) required for encrypting the ID Token issued to this Client.
	IDTokenEncryptedResponseAlg string `json:"id_token_encrypted_response_alg,omitempty"`

	// JWE enc algorithm (JWA) required for encrypting the ID Token issued to this Client.
	IDTokenEncryptedResponseEnc string `json:"id_token_encrypted_response_enc,omitempty"`

	// JWS alg algorithm (JWA) required for signing the ID Token issued to this Client.
	IDTokenSignedResponseAlg string `json:"id_token_signed_response_alg,omitempty"`

	// Specifies the JWT Confirmation Method member name (e.g. tbh) that the Relying Party expects when receiving Token Bound ID Tokens. The presence of this parameter indicates that the Relying Party supports Token Binding of ID Tokens. If omitted, the default is that the Relying Party does not support Token Binding of ID Tokens.
	IDTokenTokenBindingCnf string `json:"id_token_token_binding_cnf,omitempty"`

	// Specifies the URI using the https scheme that the authorization server can call to initiate a login at the client.
	InitiateLoginURI string `json:"initiate_login_uri,omitempty"`

	// Client's JSON Web Key Set (JWK) document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it must not use jwks. One significant downside of jwks is that it does not enable key rotation. The jwks_uri and jwks parameters must not be used together.
	JWKS string `json:"jwks,omitempty"`

	// URL for the Client's JSON Web Key Set (JWK) document containing key(s) that are used for signing requests to the OP. The JWK Set may also contain the Client's encryption keys(s) that are used by the OP to encrypt the responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is required for all keys in the document to indicate each key's intended usage .
	JWKSURI string `json:"jwks_uri,omitempty"`

	// Boolean value indicating if the client authorization will not be removed afer expiration (expiration date is same as client's expiration that created it). The default value is false.
	KeepClientAuthorizationAfterExpiration bool `json:"keep_client_authorization_after_expiration,omitempty"`

	// URL that references a logo for the Client application
	LogoURI string `json:"logo_uri,omitempty"`

	// URL that the Relying Party Client provides to the End-User to read about the how the profile data will be used.
	PolicyURI string `json:"policy_uri,omitempty"`

	// Provide the URLs supplied by the RP to request that the user be redirected to this location after a logout has been performed.
	PostLogoutRedirectUris []string `json:"post_logout_redirect_uris"`

	// Redirection URI values used by the Client. One of these registered Redirection URI values must exactly match the redirect_uri parameter value used in each Authorization Request
	RedirectUris []string `json:"redirect_uris"`

	// JWE alg algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
	RequestObjectEncryptionAlg string `json:"request_object_encryption_alg,omitempty"`

	// JWE enc algorithm (JWA) the RP is declaring that it may use for encrypting Request Objects sent to the OP.
	RequestObjectEncryptionEnc string `json:"request_object_encryption_enc,omitempty"`

	// JWS alg algorithm (JWA) that must be used for signing Request Objects sent to the OP.
	RequestObjectSigningAlg string `json:"request_object_signing_alg,omitempty"`

	// Provide a list of request_uri values that are pre-registered by the Client for use at the Authorization Server.
	RequestUris []string `json:"request_uris"`

	// Boolean value specifying whether the auth_time Claim in the ID Token is required. It is required when the value is true.
	RequireAuthTime bool `json:"require_auth_time,omitempty"`

	// A list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type. Allowed values are code, token, id_token.
	ResponseTypes []string `json:"response_types"`

	// Specifies whether RPT should be return as signed JWT.
	RptAsJwt bool `json:"rpt_as_jwt,omitempty"`

	// Boolean value with default value false. If true and access_token_as_jwt=true then run introspection script and transfer claims into JWT.
	RunIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims bool `json:"run_introspection_script_before_access_token_as_jwt_creation_and_include_claims,omitempty"`

	// Provide list of scope which are used during authentication to authorize access to resource.
	Scope []string `json:"scope"`

	// This param will be removed in a future version because the correct is 'scope' not 'scopes', see (rfc7591).
	Scopes string `json:"scopes,omitempty"`

	// URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP.
	SectorIdentifierURI string `json:"sector_identifier_uri,omitempty"`

	// Specifies a unique identifier string (UUID) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
	SoftwareID string `json:"software_id,omitempty"`

	// specifies a software statement containing client metadata values about the client software as claims. This is a string value containing the entire signed JWT.
	SoftwareStatement string `json:"software_statement,omitempty"`

	// Specifies a version identifier string for the client software identified by 'software_id'. The value of the 'software_version' should change on any update to the client software identified by the same 'software_id'.
	SoftwareVersion string `json:"software_version,omitempty"`

	// List of spontaneous scopes
	SpontaneousScopes []string `json:"spontaneous_scopes"`

	// Subject type requested for the Client ID. Valid types include pairwise and public.
	SubjectType string `json:"subject_type,omitempty"`

	// An string representation of the expected subject distinguished name of the certificate, which the OAuth client will use in mutual TLS authentication.
	TLSClientAuthSubjectDn string `json:"tls_client_auth_subject_dn,omitempty"`

	// Requested Client Authentication method for the Token Endpoint.
	TokenEndpointAuthMethod string `json:"token_endpoint_auth_method,omitempty"`

	// JWS alg algorithm (JWA) that must be used for signing the JWT used to authenticate the Client at the Token Endpoint for the private_key_jwt and client_secret_jwt authentication methods.
	TokenEndpointAuthSigningAlg string `json:"token_endpoint_auth_signing_alg,omitempty"`

	// URL that the Relying Party Client provides to the End-User to read about the Relying Party's terms of service.
	TosURI string `json:"tos_uri,omitempty"`

	// JWE alg algorithm (JWA) required for encrypting UserInfo Responses.
	UserinfoEncryptedResponseAlg string `json:"userinfo_encrypted_response_alg,omitempty"`

	// JWE enc algorithm (JWA) required for encrypting UserInfo Responses.
	UserinfoEncryptedResponseEnc string `json:"userinfo_encrypted_response_enc,omitempty"`

	// JWS alg algorithm (JWA) required for signing UserInfo Responses.
	UserinfoSignedResponseAlg string `json:"userinfo_signed_response_alg,omitempty"`
}

// Validate validates this client response
func (m *ClientResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClientResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClientResponse) UnmarshalBinary(b []byte) error {
	var res ClientResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
