// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntrospectionResponse IntrospectionResponse
//
// meta-information about token
//
// swagger:model IntrospectionResponse
type IntrospectionResponse struct {

	// Authentication Context Class Reference values.
	AcrValues string `json:"acr_values,omitempty"`

	// Boolean indicator of whether or not the presented token is currently active.
	// Required: true
	Active *bool `json:"active"`

	// Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].
	Aud string `json:"aud,omitempty"`

	// Client identifier for the OAuth 2.0 client that requested this token.
	ClientID string `json:"client_id,omitempty"`

	// Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission will expire.
	Exp int32 `json:"exp,omitempty"`

	// iat
	Iat int32 `json:"iat,omitempty"`

	// String representing the issuer of this token, as defined in JWT [RFC7519].
	Iss string `json:"iss,omitempty"`

	// String identifier for the token, as defined in JWT.
	Jti string `json:"jti,omitempty"`

	// Provide list of scopes to which access was granted for this resource.
	Scope []string `json:"scope"`

	// Subject of the token, as defined in JWT [RFC7519].
	Sub string `json:"sub,omitempty"`

	// Type of the token as defined in Section 5.1 of OAuth 2.0 [RFC6749].
	TokenType string `json:"token_type,omitempty"`

	// Human-readable identifier for the resource owner who authorized this token.
	Username string `json:"username,omitempty"`
}

// Validate validates this introspection response
func (m *IntrospectionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntrospectionResponse) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntrospectionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntrospectionResponse) UnmarshalBinary(b []byte) error {
	var res IntrospectionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
