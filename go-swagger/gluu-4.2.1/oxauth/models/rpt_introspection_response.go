// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RptIntrospectionResponse RptIntrospectionResponse
//
// swagger:model RptIntrospectionResponse
type RptIntrospectionResponse struct {

	// Boolean indicator of whether or not the presented token is currently active.
	// Required: true
	Active *bool `json:"active"`

	// Service-specific string identifier or list of string identifiers representing the intended audience for this token.
	Aud string `json:"aud,omitempty"`

	// Client id used to obtain RPT.
	ClientID string `json:"clientId,omitempty"`

	// Integer timestamp, in seconds since January 1 1970 UTC, indicating when this token will expire.
	Exp int64 `json:"exp,omitempty"`

	// Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this permission was originally issued.
	Iat int32 `json:"iat,omitempty"`

	// String representing the issuer of this token, as defined in JWT [RFC7519].
	Iss string `json:"iss,omitempty"`

	// String identifier for the token, as defined in JWT [RFC7519].
	Jti string `json:"jti,omitempty"`

	// Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating the time before which this permission is not valid.
	Nbf int32 `json:"nbf,omitempty"`

	// PCT token claims.
	PctClaims map[string]string `json:"pct_claims,omitempty"`

	// permissions
	// Required: true
	Permissions []*Permission `json:"permissions"`

	// Resource ID.
	// Required: true
	ResourceID *string `json:"resource_id"`

	// resource scopes
	// Required: true
	ResourceScopes []string `json:"resource_scopes"`

	// Subject of the token. Usually a machine-readable identifier of the resource owner who authorized this token.
	Sub string `json:"sub,omitempty"`
}

// Validate validates this rpt introspection response
func (m *RptIntrospectionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceScopes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RptIntrospectionResponse) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *RptIntrospectionResponse) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	for i := 0; i < len(m.Permissions); i++ {
		if swag.IsZero(m.Permissions[i]) { // not required
			continue
		}

		if m.Permissions[i] != nil {
			if err := m.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RptIntrospectionResponse) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resource_id", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *RptIntrospectionResponse) validateResourceScopes(formats strfmt.Registry) error {

	if err := validate.Required("resource_scopes", "body", m.ResourceScopes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RptIntrospectionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RptIntrospectionResponse) UnmarshalBinary(b []byte) error {
	var res RptIntrospectionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
