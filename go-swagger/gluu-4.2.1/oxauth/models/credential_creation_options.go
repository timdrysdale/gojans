// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialCreationOptions CredentialCreationOptions
//
// swagger:model CredentialCreationOptions
type CredentialCreationOptions struct {

	// attestation
	// Required: true
	Attestation *string `json:"attestation"`

	// authenticator selection
	// Required: true
	AuthenticatorSelection []string `json:"authenticatorSelection"`

	// The base64url encoded challenge that was sent to the client, as generated by assertionOptions.
	// Required: true
	Challenge *string `json:"challenge"`

	// exclude credentials
	// Required: true
	ExcludeCredentials []string `json:"excludeCredentials"`

	// extensions
	// Required: true
	Extensions *string `json:"extensions"`

	// pub key cred params
	// Required: true
	PubKeyCredParams []string `json:"pubKeyCredParams"`

	// RP credentials
	// Required: true
	Rp []string `json:"rp"`

	// user
	// Required: true
	User *User `json:"user"`
}

// Validate validates this credential creation options
func (m *CredentialCreationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticatorSelection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChallenge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExcludeCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePubKeyCredParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialCreationOptions) validateAttestation(formats strfmt.Registry) error {

	if err := validate.Required("attestation", "body", m.Attestation); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validateAuthenticatorSelection(formats strfmt.Registry) error {

	if err := validate.Required("authenticatorSelection", "body", m.AuthenticatorSelection); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validateChallenge(formats strfmt.Registry) error {

	if err := validate.Required("challenge", "body", m.Challenge); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validateExcludeCredentials(formats strfmt.Registry) error {

	if err := validate.Required("excludeCredentials", "body", m.ExcludeCredentials); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validateExtensions(formats strfmt.Registry) error {

	if err := validate.Required("extensions", "body", m.Extensions); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validatePubKeyCredParams(formats strfmt.Registry) error {

	if err := validate.Required("pubKeyCredParams", "body", m.PubKeyCredParams); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validateRp(formats strfmt.Registry) error {

	if err := validate.Required("rp", "body", m.Rp); err != nil {
		return err
	}

	return nil
}

func (m *CredentialCreationOptions) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialCreationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialCreationOptions) UnmarshalBinary(b []byte) error {
	var res CredentialCreationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
