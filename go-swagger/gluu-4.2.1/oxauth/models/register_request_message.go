// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterRequestMessage RegisterRequestMessage
//
// RegisterRequestMessage
//
// swagger:model RegisterRequestMessage
type RegisterRequestMessage struct {

	// authenticate requests
	// Required: true
	AuthenticateRequests []*AuthenticateRequest `json:"authenticateRequests"`

	// register requests
	// Required: true
	RegisterRequests []*RegisterRequest `json:"registerRequests"`
}

// Validate validates this register request message
func (m *RegisterRequestMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticateRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisterRequests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterRequestMessage) validateAuthenticateRequests(formats strfmt.Registry) error {

	if err := validate.Required("authenticateRequests", "body", m.AuthenticateRequests); err != nil {
		return err
	}

	for i := 0; i < len(m.AuthenticateRequests); i++ {
		if swag.IsZero(m.AuthenticateRequests[i]) { // not required
			continue
		}

		if m.AuthenticateRequests[i] != nil {
			if err := m.AuthenticateRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authenticateRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RegisterRequestMessage) validateRegisterRequests(formats strfmt.Registry) error {

	if err := validate.Required("registerRequests", "body", m.RegisterRequests); err != nil {
		return err
	}

	for i := 0; i < len(m.RegisterRequests); i++ {
		if swag.IsZero(m.RegisterRequests[i]) { // not required
			continue
		}

		if m.RegisterRequests[i] != nil {
			if err := m.RegisterRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registerRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterRequestMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterRequestMessage) UnmarshalBinary(b []byte) error {
	var res RegisterRequestMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
