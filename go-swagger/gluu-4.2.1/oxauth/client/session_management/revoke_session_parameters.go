// Code generated by go-swagger; DO NOT EDIT.

package session_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRevokeSessionParams creates a new RevokeSessionParams object
// with the default values initialized.
func NewRevokeSessionParams() *RevokeSessionParams {
	var ()
	return &RevokeSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRevokeSessionParamsWithTimeout creates a new RevokeSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRevokeSessionParamsWithTimeout(timeout time.Duration) *RevokeSessionParams {
	var ()
	return &RevokeSessionParams{

		timeout: timeout,
	}
}

// NewRevokeSessionParamsWithContext creates a new RevokeSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewRevokeSessionParamsWithContext(ctx context.Context) *RevokeSessionParams {
	var ()
	return &RevokeSessionParams{

		Context: ctx,
	}
}

// NewRevokeSessionParamsWithHTTPClient creates a new RevokeSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRevokeSessionParamsWithHTTPClient(client *http.Client) *RevokeSessionParams {
	var ()
	return &RevokeSessionParams{
		HTTPClient: client,
	}
}

/*RevokeSessionParams contains all the parameters to send to the API endpoint
for the revoke session operation typically these are written to a http.Request
*/
type RevokeSessionParams struct {

	/*UserCriterionKey
	  user criterion key (e.g. uid)

	*/
	UserCriterionKey string
	/*UserCriterionValue
	  user criterion value (e.g. chris)

	*/
	UserCriterionValue string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the revoke session params
func (o *RevokeSessionParams) WithTimeout(timeout time.Duration) *RevokeSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the revoke session params
func (o *RevokeSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the revoke session params
func (o *RevokeSessionParams) WithContext(ctx context.Context) *RevokeSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the revoke session params
func (o *RevokeSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the revoke session params
func (o *RevokeSessionParams) WithHTTPClient(client *http.Client) *RevokeSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the revoke session params
func (o *RevokeSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserCriterionKey adds the userCriterionKey to the revoke session params
func (o *RevokeSessionParams) WithUserCriterionKey(userCriterionKey string) *RevokeSessionParams {
	o.SetUserCriterionKey(userCriterionKey)
	return o
}

// SetUserCriterionKey adds the userCriterionKey to the revoke session params
func (o *RevokeSessionParams) SetUserCriterionKey(userCriterionKey string) {
	o.UserCriterionKey = userCriterionKey
}

// WithUserCriterionValue adds the userCriterionValue to the revoke session params
func (o *RevokeSessionParams) WithUserCriterionValue(userCriterionValue string) *RevokeSessionParams {
	o.SetUserCriterionValue(userCriterionValue)
	return o
}

// SetUserCriterionValue adds the userCriterionValue to the revoke session params
func (o *RevokeSessionParams) SetUserCriterionValue(userCriterionValue string) {
	o.UserCriterionValue = userCriterionValue
}

// WriteToRequest writes these params to a swagger request
func (o *RevokeSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param user_criterion_key
	frUserCriterionKey := o.UserCriterionKey
	fUserCriterionKey := frUserCriterionKey
	if fUserCriterionKey != "" {
		if err := r.SetFormParam("user_criterion_key", fUserCriterionKey); err != nil {
			return err
		}
	}

	// form param user_criterion_value
	frUserCriterionValue := o.UserCriterionValue
	fUserCriterionValue := frUserCriterionValue
	if fUserCriterionValue != "" {
		if err := r.SetFormParam("user_criterion_value", fUserCriterionValue); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
