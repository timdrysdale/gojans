// Code generated by go-swagger; DO NOT EDIT.

package session_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewEndSessionParams creates a new EndSessionParams object
// with the default values initialized.
func NewEndSessionParams() *EndSessionParams {
	var ()
	return &EndSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEndSessionParamsWithTimeout creates a new EndSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEndSessionParamsWithTimeout(timeout time.Duration) *EndSessionParams {
	var ()
	return &EndSessionParams{

		timeout: timeout,
	}
}

// NewEndSessionParamsWithContext creates a new EndSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewEndSessionParamsWithContext(ctx context.Context) *EndSessionParams {
	var ()
	return &EndSessionParams{

		Context: ctx,
	}
}

// NewEndSessionParamsWithHTTPClient creates a new EndSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEndSessionParamsWithHTTPClient(client *http.Client) *EndSessionParams {
	var ()
	return &EndSessionParams{
		HTTPClient: client,
	}
}

/*EndSessionParams contains all the parameters to send to the API endpoint
for the end session operation typically these are written to a http.Request
*/
type EndSessionParams struct {

	/*IDTokenHint
	  Previously issued ID Token (id_token) passed to the logout endpoint as a hint about the End-User's current authenticated session with the Client. This is used as an indication of the identity of the End-User that the RP is requesting be logged out by the OP. The OP need not be listed as an audience of the ID Token when it is used as an id_token_hint value.

	*/
	IDTokenHint *string
	/*PostLogoutRedirectURI
	  URL to which the RP is requesting that the End-User's User Agent be redirected after a logout has been performed. The value MUST have been previously registered with the OP, either using the post_logout_redirect_uris Registration parameter or via another mechanism. If supplied, the OP SHOULD honor this request following the logout.

	*/
	PostLogoutRedirectURI *string
	/*SessionID
	  Session Id

	*/
	SessionID *string
	/*State
	  Opaque value used by the RP to maintain state between the logout request and the callback to the endpoint specified by the post_logout_redirect_uri parameter. If included in the logout request, the OP passes this value back to the RP using the state query parameter when redirecting the User Agent back to the RP.

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the end session params
func (o *EndSessionParams) WithTimeout(timeout time.Duration) *EndSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the end session params
func (o *EndSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the end session params
func (o *EndSessionParams) WithContext(ctx context.Context) *EndSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the end session params
func (o *EndSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the end session params
func (o *EndSessionParams) WithHTTPClient(client *http.Client) *EndSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the end session params
func (o *EndSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDTokenHint adds the iDTokenHint to the end session params
func (o *EndSessionParams) WithIDTokenHint(iDTokenHint *string) *EndSessionParams {
	o.SetIDTokenHint(iDTokenHint)
	return o
}

// SetIDTokenHint adds the idTokenHint to the end session params
func (o *EndSessionParams) SetIDTokenHint(iDTokenHint *string) {
	o.IDTokenHint = iDTokenHint
}

// WithPostLogoutRedirectURI adds the postLogoutRedirectURI to the end session params
func (o *EndSessionParams) WithPostLogoutRedirectURI(postLogoutRedirectURI *string) *EndSessionParams {
	o.SetPostLogoutRedirectURI(postLogoutRedirectURI)
	return o
}

// SetPostLogoutRedirectURI adds the postLogoutRedirectUri to the end session params
func (o *EndSessionParams) SetPostLogoutRedirectURI(postLogoutRedirectURI *string) {
	o.PostLogoutRedirectURI = postLogoutRedirectURI
}

// WithSessionID adds the sessionID to the end session params
func (o *EndSessionParams) WithSessionID(sessionID *string) *EndSessionParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the end session params
func (o *EndSessionParams) SetSessionID(sessionID *string) {
	o.SessionID = sessionID
}

// WithState adds the state to the end session params
func (o *EndSessionParams) WithState(state *string) *EndSessionParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the end session params
func (o *EndSessionParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *EndSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IDTokenHint != nil {

		// query param id_token_hint
		var qrIDTokenHint string
		if o.IDTokenHint != nil {
			qrIDTokenHint = *o.IDTokenHint
		}
		qIDTokenHint := qrIDTokenHint
		if qIDTokenHint != "" {
			if err := r.SetQueryParam("id_token_hint", qIDTokenHint); err != nil {
				return err
			}
		}

	}

	if o.PostLogoutRedirectURI != nil {

		// query param post_logout_redirect_uri
		var qrPostLogoutRedirectURI string
		if o.PostLogoutRedirectURI != nil {
			qrPostLogoutRedirectURI = *o.PostLogoutRedirectURI
		}
		qPostLogoutRedirectURI := qrPostLogoutRedirectURI
		if qPostLogoutRedirectURI != "" {
			if err := r.SetQueryParam("post_logout_redirect_uri", qPostLogoutRedirectURI); err != nil {
				return err
			}
		}

	}

	if o.SessionID != nil {

		// query param session_id
		var qrSessionID string
		if o.SessionID != nil {
			qrSessionID = *o.SessionID
		}
		qSessionID := qrSessionID
		if qSessionID != "" {
			if err := r.SetQueryParam("session_id", qSessionID); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
