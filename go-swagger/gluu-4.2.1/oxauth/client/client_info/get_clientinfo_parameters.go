// Code generated by go-swagger; DO NOT EDIT.

package client_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetClientinfoParams creates a new GetClientinfoParams object
// with the default values initialized.
func NewGetClientinfoParams() *GetClientinfoParams {
	var ()
	return &GetClientinfoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetClientinfoParamsWithTimeout creates a new GetClientinfoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetClientinfoParamsWithTimeout(timeout time.Duration) *GetClientinfoParams {
	var ()
	return &GetClientinfoParams{

		timeout: timeout,
	}
}

// NewGetClientinfoParamsWithContext creates a new GetClientinfoParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetClientinfoParamsWithContext(ctx context.Context) *GetClientinfoParams {
	var ()
	return &GetClientinfoParams{

		Context: ctx,
	}
}

// NewGetClientinfoParamsWithHTTPClient creates a new GetClientinfoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetClientinfoParamsWithHTTPClient(client *http.Client) *GetClientinfoParams {
	var ()
	return &GetClientinfoParams{
		HTTPClient: client,
	}
}

/*GetClientinfoParams contains all the parameters to send to the API endpoint
for the get clientinfo operation typically these are written to a http.Request
*/
type GetClientinfoParams struct {

	/*Authorization*/
	Authorization *string
	/*AccessToken*/
	AccessToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get clientinfo params
func (o *GetClientinfoParams) WithTimeout(timeout time.Duration) *GetClientinfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get clientinfo params
func (o *GetClientinfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get clientinfo params
func (o *GetClientinfoParams) WithContext(ctx context.Context) *GetClientinfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get clientinfo params
func (o *GetClientinfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get clientinfo params
func (o *GetClientinfoParams) WithHTTPClient(client *http.Client) *GetClientinfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get clientinfo params
func (o *GetClientinfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get clientinfo params
func (o *GetClientinfoParams) WithAuthorization(authorization *string) *GetClientinfoParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get clientinfo params
func (o *GetClientinfoParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithAccessToken adds the accessToken to the get clientinfo params
func (o *GetClientinfoParams) WithAccessToken(accessToken *string) *GetClientinfoParams {
	o.SetAccessToken(accessToken)
	return o
}

// SetAccessToken adds the accessToken to the get clientinfo params
func (o *GetClientinfoParams) SetAccessToken(accessToken *string) {
	o.AccessToken = accessToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetClientinfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	if o.AccessToken != nil {

		// query param access_token
		var qrAccessToken string
		if o.AccessToken != nil {
			qrAccessToken = *o.AccessToken
		}
		qAccessToken := qrAccessToken
		if qAccessToken != "" {
			if err := r.SetQueryParam("access_token", qAccessToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
