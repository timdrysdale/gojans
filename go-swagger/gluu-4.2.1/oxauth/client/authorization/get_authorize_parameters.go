// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAuthorizeParams creates a new GetAuthorizeParams object
// with the default values initialized.
func NewGetAuthorizeParams() *GetAuthorizeParams {
	var ()
	return &GetAuthorizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuthorizeParamsWithTimeout creates a new GetAuthorizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAuthorizeParamsWithTimeout(timeout time.Duration) *GetAuthorizeParams {
	var ()
	return &GetAuthorizeParams{

		timeout: timeout,
	}
}

// NewGetAuthorizeParamsWithContext creates a new GetAuthorizeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAuthorizeParamsWithContext(ctx context.Context) *GetAuthorizeParams {
	var ()
	return &GetAuthorizeParams{

		Context: ctx,
	}
}

// NewGetAuthorizeParamsWithHTTPClient creates a new GetAuthorizeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAuthorizeParamsWithHTTPClient(client *http.Client) *GetAuthorizeParams {
	var ()
	return &GetAuthorizeParams{
		HTTPClient: client,
	}
}

/*GetAuthorizeParams contains all the parameters to send to the API endpoint
for the get authorize operation typically these are written to a http.Request
*/
type GetAuthorizeParams struct {

	/*AcrValues
	  Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference.

	*/
	AcrValues *string
	/*AmrValues
	  AMR Values.

	*/
	AmrValues *string
	/*AuthReqID
	  CIBA authentication request Id.

	*/
	AuthReqID *string
	/*Claims
	  Requested Claims.

	*/
	Claims *string
	/*ClientID
	  OAuth 2.0 Client Identifier valid at the Authorization Server.

	*/
	ClientID string
	/*CodeChallenge
	  PKCE code challenge.

	*/
	CodeChallenge *string
	/*CodeChallengeMethod
	  PKCE code challenge method.

	*/
	CodeChallengeMethod *string
	/*CustomResponseHeaders
	  Custom Response Headers.

	*/
	CustomResponseHeaders *string
	/*Display
	  ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User.

	*/
	Display *string
	/*IDTokenHint
	  ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client. If the End-User identified by the ID Token is logged in or is logged in by the request, then the Authorization Server returns a positive response.

	*/
	IDTokenHint *string
	/*LoginHint
	  Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary).

	*/
	LoginHint *string
	/*MaxAge
	  Maximum Authentication Age. Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated by the OP.

	*/
	MaxAge *int32
	/*Nonce
	  String value used to associate a Client session with an ID Token, and to mitigate replay attacks.

	*/
	Nonce *string
	/*OriginHeaders
	  Origin headers. Used in custom workflows.

	*/
	OriginHeaders *string
	/*Prompt
	  Space delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The defined values are - none, login, consent, select_account.

	*/
	Prompt *string
	/*RedirectURI
	  Redirection URI to which the response will be sent. This URI MUST exactly match one of the Redirection URI values for the Client pre-registered at the OpenID Provider.

	*/
	RedirectURI string
	/*Request
	  This parameter enables OpenID Connect requests to be passed in a single, self-contained parameter and to be optionally signed and/or encrypted. The parameter value is a Request Object value. It represents the request as a JWT whose Claims are the request parameters.

	*/
	Request *string
	/*RequestSessionID
	  Request session id.

	*/
	RequestSessionID *string
	/*RequestURI
	  This parameter enables OpenID Connect requests to be passed by reference, rather than by value. The request_uri value is a URL using the https scheme referencing a resource containing a Request Object value, which is a JWT containing the request parameters.

	*/
	RequestURI *string
	/*ResponseMode
	  Informs the Authorization Server of the mechanism to be used for returning parameters from the Authorization Endpoint.

	*/
	ResponseMode *string
	/*ResponseType
	  OAuth 2.0 Response Type value that determines the authorization processing flow to be used, including what parameters are returned from the endpoints used.

	*/
	ResponseType string
	/*Scope
	  OpenID Connect requests MUST contain the openid scope value. If the openid scope value is not present, the behavior is entirely unspecified. Other scope values MAY be present.

	*/
	Scope string
	/*SessionID
	  Session id of this call.

	*/
	SessionID *string
	/*State
	  Opaque value used to maintain state between the request and the callback.

	*/
	State *string
	/*UILocales
	  End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference.

	*/
	UILocales *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get authorize params
func (o *GetAuthorizeParams) WithTimeout(timeout time.Duration) *GetAuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get authorize params
func (o *GetAuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get authorize params
func (o *GetAuthorizeParams) WithContext(ctx context.Context) *GetAuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get authorize params
func (o *GetAuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get authorize params
func (o *GetAuthorizeParams) WithHTTPClient(client *http.Client) *GetAuthorizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get authorize params
func (o *GetAuthorizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcrValues adds the acrValues to the get authorize params
func (o *GetAuthorizeParams) WithAcrValues(acrValues *string) *GetAuthorizeParams {
	o.SetAcrValues(acrValues)
	return o
}

// SetAcrValues adds the acrValues to the get authorize params
func (o *GetAuthorizeParams) SetAcrValues(acrValues *string) {
	o.AcrValues = acrValues
}

// WithAmrValues adds the amrValues to the get authorize params
func (o *GetAuthorizeParams) WithAmrValues(amrValues *string) *GetAuthorizeParams {
	o.SetAmrValues(amrValues)
	return o
}

// SetAmrValues adds the amrValues to the get authorize params
func (o *GetAuthorizeParams) SetAmrValues(amrValues *string) {
	o.AmrValues = amrValues
}

// WithAuthReqID adds the authReqID to the get authorize params
func (o *GetAuthorizeParams) WithAuthReqID(authReqID *string) *GetAuthorizeParams {
	o.SetAuthReqID(authReqID)
	return o
}

// SetAuthReqID adds the authReqId to the get authorize params
func (o *GetAuthorizeParams) SetAuthReqID(authReqID *string) {
	o.AuthReqID = authReqID
}

// WithClaims adds the claims to the get authorize params
func (o *GetAuthorizeParams) WithClaims(claims *string) *GetAuthorizeParams {
	o.SetClaims(claims)
	return o
}

// SetClaims adds the claims to the get authorize params
func (o *GetAuthorizeParams) SetClaims(claims *string) {
	o.Claims = claims
}

// WithClientID adds the clientID to the get authorize params
func (o *GetAuthorizeParams) WithClientID(clientID string) *GetAuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get authorize params
func (o *GetAuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithCodeChallenge adds the codeChallenge to the get authorize params
func (o *GetAuthorizeParams) WithCodeChallenge(codeChallenge *string) *GetAuthorizeParams {
	o.SetCodeChallenge(codeChallenge)
	return o
}

// SetCodeChallenge adds the codeChallenge to the get authorize params
func (o *GetAuthorizeParams) SetCodeChallenge(codeChallenge *string) {
	o.CodeChallenge = codeChallenge
}

// WithCodeChallengeMethod adds the codeChallengeMethod to the get authorize params
func (o *GetAuthorizeParams) WithCodeChallengeMethod(codeChallengeMethod *string) *GetAuthorizeParams {
	o.SetCodeChallengeMethod(codeChallengeMethod)
	return o
}

// SetCodeChallengeMethod adds the codeChallengeMethod to the get authorize params
func (o *GetAuthorizeParams) SetCodeChallengeMethod(codeChallengeMethod *string) {
	o.CodeChallengeMethod = codeChallengeMethod
}

// WithCustomResponseHeaders adds the customResponseHeaders to the get authorize params
func (o *GetAuthorizeParams) WithCustomResponseHeaders(customResponseHeaders *string) *GetAuthorizeParams {
	o.SetCustomResponseHeaders(customResponseHeaders)
	return o
}

// SetCustomResponseHeaders adds the customResponseHeaders to the get authorize params
func (o *GetAuthorizeParams) SetCustomResponseHeaders(customResponseHeaders *string) {
	o.CustomResponseHeaders = customResponseHeaders
}

// WithDisplay adds the display to the get authorize params
func (o *GetAuthorizeParams) WithDisplay(display *string) *GetAuthorizeParams {
	o.SetDisplay(display)
	return o
}

// SetDisplay adds the display to the get authorize params
func (o *GetAuthorizeParams) SetDisplay(display *string) {
	o.Display = display
}

// WithIDTokenHint adds the iDTokenHint to the get authorize params
func (o *GetAuthorizeParams) WithIDTokenHint(iDTokenHint *string) *GetAuthorizeParams {
	o.SetIDTokenHint(iDTokenHint)
	return o
}

// SetIDTokenHint adds the idTokenHint to the get authorize params
func (o *GetAuthorizeParams) SetIDTokenHint(iDTokenHint *string) {
	o.IDTokenHint = iDTokenHint
}

// WithLoginHint adds the loginHint to the get authorize params
func (o *GetAuthorizeParams) WithLoginHint(loginHint *string) *GetAuthorizeParams {
	o.SetLoginHint(loginHint)
	return o
}

// SetLoginHint adds the loginHint to the get authorize params
func (o *GetAuthorizeParams) SetLoginHint(loginHint *string) {
	o.LoginHint = loginHint
}

// WithMaxAge adds the maxAge to the get authorize params
func (o *GetAuthorizeParams) WithMaxAge(maxAge *int32) *GetAuthorizeParams {
	o.SetMaxAge(maxAge)
	return o
}

// SetMaxAge adds the maxAge to the get authorize params
func (o *GetAuthorizeParams) SetMaxAge(maxAge *int32) {
	o.MaxAge = maxAge
}

// WithNonce adds the nonce to the get authorize params
func (o *GetAuthorizeParams) WithNonce(nonce *string) *GetAuthorizeParams {
	o.SetNonce(nonce)
	return o
}

// SetNonce adds the nonce to the get authorize params
func (o *GetAuthorizeParams) SetNonce(nonce *string) {
	o.Nonce = nonce
}

// WithOriginHeaders adds the originHeaders to the get authorize params
func (o *GetAuthorizeParams) WithOriginHeaders(originHeaders *string) *GetAuthorizeParams {
	o.SetOriginHeaders(originHeaders)
	return o
}

// SetOriginHeaders adds the originHeaders to the get authorize params
func (o *GetAuthorizeParams) SetOriginHeaders(originHeaders *string) {
	o.OriginHeaders = originHeaders
}

// WithPrompt adds the prompt to the get authorize params
func (o *GetAuthorizeParams) WithPrompt(prompt *string) *GetAuthorizeParams {
	o.SetPrompt(prompt)
	return o
}

// SetPrompt adds the prompt to the get authorize params
func (o *GetAuthorizeParams) SetPrompt(prompt *string) {
	o.Prompt = prompt
}

// WithRedirectURI adds the redirectURI to the get authorize params
func (o *GetAuthorizeParams) WithRedirectURI(redirectURI string) *GetAuthorizeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the get authorize params
func (o *GetAuthorizeParams) SetRedirectURI(redirectURI string) {
	o.RedirectURI = redirectURI
}

// WithRequest adds the request to the get authorize params
func (o *GetAuthorizeParams) WithRequest(request *string) *GetAuthorizeParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the get authorize params
func (o *GetAuthorizeParams) SetRequest(request *string) {
	o.Request = request
}

// WithRequestSessionID adds the requestSessionID to the get authorize params
func (o *GetAuthorizeParams) WithRequestSessionID(requestSessionID *string) *GetAuthorizeParams {
	o.SetRequestSessionID(requestSessionID)
	return o
}

// SetRequestSessionID adds the requestSessionId to the get authorize params
func (o *GetAuthorizeParams) SetRequestSessionID(requestSessionID *string) {
	o.RequestSessionID = requestSessionID
}

// WithRequestURI adds the requestURI to the get authorize params
func (o *GetAuthorizeParams) WithRequestURI(requestURI *string) *GetAuthorizeParams {
	o.SetRequestURI(requestURI)
	return o
}

// SetRequestURI adds the requestUri to the get authorize params
func (o *GetAuthorizeParams) SetRequestURI(requestURI *string) {
	o.RequestURI = requestURI
}

// WithResponseMode adds the responseMode to the get authorize params
func (o *GetAuthorizeParams) WithResponseMode(responseMode *string) *GetAuthorizeParams {
	o.SetResponseMode(responseMode)
	return o
}

// SetResponseMode adds the responseMode to the get authorize params
func (o *GetAuthorizeParams) SetResponseMode(responseMode *string) {
	o.ResponseMode = responseMode
}

// WithResponseType adds the responseType to the get authorize params
func (o *GetAuthorizeParams) WithResponseType(responseType string) *GetAuthorizeParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the get authorize params
func (o *GetAuthorizeParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the get authorize params
func (o *GetAuthorizeParams) WithScope(scope string) *GetAuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get authorize params
func (o *GetAuthorizeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithSessionID adds the sessionID to the get authorize params
func (o *GetAuthorizeParams) WithSessionID(sessionID *string) *GetAuthorizeParams {
	o.SetSessionID(sessionID)
	return o
}

// SetSessionID adds the sessionId to the get authorize params
func (o *GetAuthorizeParams) SetSessionID(sessionID *string) {
	o.SessionID = sessionID
}

// WithState adds the state to the get authorize params
func (o *GetAuthorizeParams) WithState(state *string) *GetAuthorizeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get authorize params
func (o *GetAuthorizeParams) SetState(state *string) {
	o.State = state
}

// WithUILocales adds the uILocales to the get authorize params
func (o *GetAuthorizeParams) WithUILocales(uILocales *string) *GetAuthorizeParams {
	o.SetUILocales(uILocales)
	return o
}

// SetUILocales adds the uiLocales to the get authorize params
func (o *GetAuthorizeParams) SetUILocales(uILocales *string) {
	o.UILocales = uILocales
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcrValues != nil {

		// query param acr_values
		var qrAcrValues string
		if o.AcrValues != nil {
			qrAcrValues = *o.AcrValues
		}
		qAcrValues := qrAcrValues
		if qAcrValues != "" {
			if err := r.SetQueryParam("acr_values", qAcrValues); err != nil {
				return err
			}
		}

	}

	if o.AmrValues != nil {

		// query param amr_values
		var qrAmrValues string
		if o.AmrValues != nil {
			qrAmrValues = *o.AmrValues
		}
		qAmrValues := qrAmrValues
		if qAmrValues != "" {
			if err := r.SetQueryParam("amr_values", qAmrValues); err != nil {
				return err
			}
		}

	}

	if o.AuthReqID != nil {

		// query param auth_req_id
		var qrAuthReqID string
		if o.AuthReqID != nil {
			qrAuthReqID = *o.AuthReqID
		}
		qAuthReqID := qrAuthReqID
		if qAuthReqID != "" {
			if err := r.SetQueryParam("auth_req_id", qAuthReqID); err != nil {
				return err
			}
		}

	}

	if o.Claims != nil {

		// query param claims
		var qrClaims string
		if o.Claims != nil {
			qrClaims = *o.Claims
		}
		qClaims := qrClaims
		if qClaims != "" {
			if err := r.SetQueryParam("claims", qClaims); err != nil {
				return err
			}
		}

	}

	// query param client_id
	qrClientID := o.ClientID
	qClientID := qrClientID
	if qClientID != "" {
		if err := r.SetQueryParam("client_id", qClientID); err != nil {
			return err
		}
	}

	if o.CodeChallenge != nil {

		// query param code_challenge
		var qrCodeChallenge string
		if o.CodeChallenge != nil {
			qrCodeChallenge = *o.CodeChallenge
		}
		qCodeChallenge := qrCodeChallenge
		if qCodeChallenge != "" {
			if err := r.SetQueryParam("code_challenge", qCodeChallenge); err != nil {
				return err
			}
		}

	}

	if o.CodeChallengeMethod != nil {

		// query param code_challenge_method
		var qrCodeChallengeMethod string
		if o.CodeChallengeMethod != nil {
			qrCodeChallengeMethod = *o.CodeChallengeMethod
		}
		qCodeChallengeMethod := qrCodeChallengeMethod
		if qCodeChallengeMethod != "" {
			if err := r.SetQueryParam("code_challenge_method", qCodeChallengeMethod); err != nil {
				return err
			}
		}

	}

	if o.CustomResponseHeaders != nil {

		// query param custom_response_headers
		var qrCustomResponseHeaders string
		if o.CustomResponseHeaders != nil {
			qrCustomResponseHeaders = *o.CustomResponseHeaders
		}
		qCustomResponseHeaders := qrCustomResponseHeaders
		if qCustomResponseHeaders != "" {
			if err := r.SetQueryParam("custom_response_headers", qCustomResponseHeaders); err != nil {
				return err
			}
		}

	}

	if o.Display != nil {

		// query param display
		var qrDisplay string
		if o.Display != nil {
			qrDisplay = *o.Display
		}
		qDisplay := qrDisplay
		if qDisplay != "" {
			if err := r.SetQueryParam("display", qDisplay); err != nil {
				return err
			}
		}

	}

	if o.IDTokenHint != nil {

		// query param id_token_hint
		var qrIDTokenHint string
		if o.IDTokenHint != nil {
			qrIDTokenHint = *o.IDTokenHint
		}
		qIDTokenHint := qrIDTokenHint
		if qIDTokenHint != "" {
			if err := r.SetQueryParam("id_token_hint", qIDTokenHint); err != nil {
				return err
			}
		}

	}

	if o.LoginHint != nil {

		// query param login_hint
		var qrLoginHint string
		if o.LoginHint != nil {
			qrLoginHint = *o.LoginHint
		}
		qLoginHint := qrLoginHint
		if qLoginHint != "" {
			if err := r.SetQueryParam("login_hint", qLoginHint); err != nil {
				return err
			}
		}

	}

	if o.MaxAge != nil {

		// query param max_age
		var qrMaxAge int32
		if o.MaxAge != nil {
			qrMaxAge = *o.MaxAge
		}
		qMaxAge := swag.FormatInt32(qrMaxAge)
		if qMaxAge != "" {
			if err := r.SetQueryParam("max_age", qMaxAge); err != nil {
				return err
			}
		}

	}

	if o.Nonce != nil {

		// query param nonce
		var qrNonce string
		if o.Nonce != nil {
			qrNonce = *o.Nonce
		}
		qNonce := qrNonce
		if qNonce != "" {
			if err := r.SetQueryParam("nonce", qNonce); err != nil {
				return err
			}
		}

	}

	if o.OriginHeaders != nil {

		// query param origin_headers
		var qrOriginHeaders string
		if o.OriginHeaders != nil {
			qrOriginHeaders = *o.OriginHeaders
		}
		qOriginHeaders := qrOriginHeaders
		if qOriginHeaders != "" {
			if err := r.SetQueryParam("origin_headers", qOriginHeaders); err != nil {
				return err
			}
		}

	}

	if o.Prompt != nil {

		// query param prompt
		var qrPrompt string
		if o.Prompt != nil {
			qrPrompt = *o.Prompt
		}
		qPrompt := qrPrompt
		if qPrompt != "" {
			if err := r.SetQueryParam("prompt", qPrompt); err != nil {
				return err
			}
		}

	}

	// query param redirect_uri
	qrRedirectURI := o.RedirectURI
	qRedirectURI := qrRedirectURI
	if qRedirectURI != "" {
		if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
			return err
		}
	}

	if o.Request != nil {

		// query param request
		var qrRequest string
		if o.Request != nil {
			qrRequest = *o.Request
		}
		qRequest := qrRequest
		if qRequest != "" {
			if err := r.SetQueryParam("request", qRequest); err != nil {
				return err
			}
		}

	}

	if o.RequestSessionID != nil {

		// query param request_session_id
		var qrRequestSessionID string
		if o.RequestSessionID != nil {
			qrRequestSessionID = *o.RequestSessionID
		}
		qRequestSessionID := qrRequestSessionID
		if qRequestSessionID != "" {
			if err := r.SetQueryParam("request_session_id", qRequestSessionID); err != nil {
				return err
			}
		}

	}

	if o.RequestURI != nil {

		// query param request_uri
		var qrRequestURI string
		if o.RequestURI != nil {
			qrRequestURI = *o.RequestURI
		}
		qRequestURI := qrRequestURI
		if qRequestURI != "" {
			if err := r.SetQueryParam("request_uri", qRequestURI); err != nil {
				return err
			}
		}

	}

	if o.ResponseMode != nil {

		// query param response_mode
		var qrResponseMode string
		if o.ResponseMode != nil {
			qrResponseMode = *o.ResponseMode
		}
		qResponseMode := qrResponseMode
		if qResponseMode != "" {
			if err := r.SetQueryParam("response_mode", qResponseMode); err != nil {
				return err
			}
		}

	}

	// query param response_type
	qrResponseType := o.ResponseType
	qResponseType := qrResponseType
	if qResponseType != "" {
		if err := r.SetQueryParam("response_type", qResponseType); err != nil {
			return err
		}
	}

	// query param scope
	qrScope := o.Scope
	qScope := qrScope
	if qScope != "" {
		if err := r.SetQueryParam("scope", qScope); err != nil {
			return err
		}
	}

	if o.SessionID != nil {

		// query param session_id
		var qrSessionID string
		if o.SessionID != nil {
			qrSessionID = *o.SessionID
		}
		qSessionID := qrSessionID
		if qSessionID != "" {
			if err := r.SetQueryParam("session_id", qSessionID); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.UILocales != nil {

		// query param ui_locales
		var qrUILocales string
		if o.UILocales != nil {
			qrUILocales = *o.UILocales
		}
		qUILocales := qrUILocales
		if qUILocales != "" {
			if err := r.SetQueryParam("ui_locales", qUILocales); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
