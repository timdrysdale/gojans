// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetIntrospectionParams creates a new GetIntrospectionParams object
// with the default values initialized.
func NewGetIntrospectionParams() *GetIntrospectionParams {
	var ()
	return &GetIntrospectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIntrospectionParamsWithTimeout creates a new GetIntrospectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIntrospectionParamsWithTimeout(timeout time.Duration) *GetIntrospectionParams {
	var ()
	return &GetIntrospectionParams{

		timeout: timeout,
	}
}

// NewGetIntrospectionParamsWithContext creates a new GetIntrospectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIntrospectionParamsWithContext(ctx context.Context) *GetIntrospectionParams {
	var ()
	return &GetIntrospectionParams{

		Context: ctx,
	}
}

// NewGetIntrospectionParamsWithHTTPClient creates a new GetIntrospectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIntrospectionParamsWithHTTPClient(client *http.Client) *GetIntrospectionParams {
	var ()
	return &GetIntrospectionParams{
		HTTPClient: client,
	}
}

/*GetIntrospectionParams contains all the parameters to send to the API endpoint
for the get introspection operation typically these are written to a http.Request
*/
type GetIntrospectionParams struct {

	/*Authorization
	  Client Authorization details that contains the access token along with other details.

	*/
	Authorization string
	/*ResponseAsJwt
	  OPTIONAL. Boolean value with default value false. If true, returns introspection response as JWT (signed based on client configuration used for authentication to Introspection Endpoint).

	*/
	ResponseAsJwt *bool
	/*Token*/
	Token string
	/*TokenTypeHint
	  ID Token previously issued by the Authorization Server being passed as a hint about the End-User.

	*/
	TokenTypeHint *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get introspection params
func (o *GetIntrospectionParams) WithTimeout(timeout time.Duration) *GetIntrospectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get introspection params
func (o *GetIntrospectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get introspection params
func (o *GetIntrospectionParams) WithContext(ctx context.Context) *GetIntrospectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get introspection params
func (o *GetIntrospectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get introspection params
func (o *GetIntrospectionParams) WithHTTPClient(client *http.Client) *GetIntrospectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get introspection params
func (o *GetIntrospectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get introspection params
func (o *GetIntrospectionParams) WithAuthorization(authorization string) *GetIntrospectionParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get introspection params
func (o *GetIntrospectionParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithResponseAsJwt adds the responseAsJwt to the get introspection params
func (o *GetIntrospectionParams) WithResponseAsJwt(responseAsJwt *bool) *GetIntrospectionParams {
	o.SetResponseAsJwt(responseAsJwt)
	return o
}

// SetResponseAsJwt adds the responseAsJwt to the get introspection params
func (o *GetIntrospectionParams) SetResponseAsJwt(responseAsJwt *bool) {
	o.ResponseAsJwt = responseAsJwt
}

// WithToken adds the token to the get introspection params
func (o *GetIntrospectionParams) WithToken(token string) *GetIntrospectionParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get introspection params
func (o *GetIntrospectionParams) SetToken(token string) {
	o.Token = token
}

// WithTokenTypeHint adds the tokenTypeHint to the get introspection params
func (o *GetIntrospectionParams) WithTokenTypeHint(tokenTypeHint *string) *GetIntrospectionParams {
	o.SetTokenTypeHint(tokenTypeHint)
	return o
}

// SetTokenTypeHint adds the tokenTypeHint to the get introspection params
func (o *GetIntrospectionParams) SetTokenTypeHint(tokenTypeHint *string) {
	o.TokenTypeHint = tokenTypeHint
}

// WriteToRequest writes these params to a swagger request
func (o *GetIntrospectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.ResponseAsJwt != nil {

		// query param response_as_jwt
		var qrResponseAsJwt bool
		if o.ResponseAsJwt != nil {
			qrResponseAsJwt = *o.ResponseAsJwt
		}
		qResponseAsJwt := swag.FormatBool(qrResponseAsJwt)
		if qResponseAsJwt != "" {
			if err := r.SetQueryParam("response_as_jwt", qResponseAsJwt); err != nil {
				return err
			}
		}

	}

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {
		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if o.TokenTypeHint != nil {

		// query param token_type_hint
		var qrTokenTypeHint string
		if o.TokenTypeHint != nil {
			qrTokenTypeHint = *o.TokenTypeHint
		}
		qTokenTypeHint := qrTokenTypeHint
		if qTokenTypeHint != "" {
			if err := r.SetQueryParam("token_type_hint", qTokenTypeHint); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
