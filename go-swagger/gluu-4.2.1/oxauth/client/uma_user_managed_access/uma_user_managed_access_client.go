// Code generated by go-swagger; DO NOT EDIT.

package uma_user_managed_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new uma user managed access API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for uma user managed access API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetUMAGatherClaims(params *GetUMAGatherClaimsParams) (*GetUMAGatherClaimsOK, error)

	HostRsrcPr(params *HostRsrcPrParams) (*HostRsrcPrCreated, error)

	PostUMAGatherClaims(params *PostUMAGatherClaimsParams) (*PostUMAGatherClaimsOK, error)

	UMA2Configuration(params *UMA2ConfigurationParams) (*UMA2ConfigurationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetUMAGatherClaims gets uma gather claims

  UMA Claims Gathering Endpoint.
*/
func (a *Client) GetUMAGatherClaims(params *GetUMAGatherClaimsParams) (*GetUMAGatherClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUMAGatherClaimsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get-uma-gather_claims",
		Method:             "GET",
		PathPattern:        "/uma/gather_claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUMAGatherClaimsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUMAGatherClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get-uma-gather_claims: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  HostRsrcPr hosts rsrc pr

  Registers permission.
*/
func (a *Client) HostRsrcPr(params *HostRsrcPrParams) (*HostRsrcPrCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHostRsrcPrParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "host-rsrc_pr",
		Method:             "POST",
		PathPattern:        "/host/rsrc_pr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HostRsrcPrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HostRsrcPrCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for host-rsrc_pr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostUMAGatherClaims posts uma gather claims

  UMA Claims Gathering Endpoint
*/
func (a *Client) PostUMAGatherClaims(params *PostUMAGatherClaimsParams) (*PostUMAGatherClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUMAGatherClaimsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post-uma-gather_claims",
		Method:             "POST",
		PathPattern:        "/uma/gather_claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUMAGatherClaimsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUMAGatherClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for post-uma-gather_claims: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UMA2Configuration uma2s configuration

  Gets UMA configuration data.
*/
func (a *Client) UMA2Configuration(params *UMA2ConfigurationParams) (*UMA2ConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUMA2ConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uma2-configuration",
		Method:             "GET",
		PathPattern:        "/uma2-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UMA2ConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UMA2ConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uma2-configuration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
