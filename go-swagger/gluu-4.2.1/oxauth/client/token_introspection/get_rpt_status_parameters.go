// Code generated by go-swagger; DO NOT EDIT.

package token_introspection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetRptStatusParams creates a new GetRptStatusParams object
// with the default values initialized.
func NewGetRptStatusParams() *GetRptStatusParams {
	var ()
	return &GetRptStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRptStatusParamsWithTimeout creates a new GetRptStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRptStatusParamsWithTimeout(timeout time.Duration) *GetRptStatusParams {
	var ()
	return &GetRptStatusParams{

		timeout: timeout,
	}
}

// NewGetRptStatusParamsWithContext creates a new GetRptStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRptStatusParamsWithContext(ctx context.Context) *GetRptStatusParams {
	var ()
	return &GetRptStatusParams{

		Context: ctx,
	}
}

// NewGetRptStatusParamsWithHTTPClient creates a new GetRptStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRptStatusParamsWithHTTPClient(client *http.Client) *GetRptStatusParams {
	var ()
	return &GetRptStatusParams{
		HTTPClient: client,
	}
}

/*GetRptStatusParams contains all the parameters to send to the API endpoint
for the get rpt status operation typically these are written to a http.Request
*/
type GetRptStatusParams struct {

	/*Authorization*/
	Authorization string
	/*Token*/
	Token string
	/*TokenTypeHint*/
	TokenTypeHint *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get rpt status params
func (o *GetRptStatusParams) WithTimeout(timeout time.Duration) *GetRptStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get rpt status params
func (o *GetRptStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get rpt status params
func (o *GetRptStatusParams) WithContext(ctx context.Context) *GetRptStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get rpt status params
func (o *GetRptStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get rpt status params
func (o *GetRptStatusParams) WithHTTPClient(client *http.Client) *GetRptStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get rpt status params
func (o *GetRptStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get rpt status params
func (o *GetRptStatusParams) WithAuthorization(authorization string) *GetRptStatusParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get rpt status params
func (o *GetRptStatusParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithToken adds the token to the get rpt status params
func (o *GetRptStatusParams) WithToken(token string) *GetRptStatusParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the get rpt status params
func (o *GetRptStatusParams) SetToken(token string) {
	o.Token = token
}

// WithTokenTypeHint adds the tokenTypeHint to the get rpt status params
func (o *GetRptStatusParams) WithTokenTypeHint(tokenTypeHint *string) *GetRptStatusParams {
	o.SetTokenTypeHint(tokenTypeHint)
	return o
}

// SetTokenTypeHint adds the tokenTypeHint to the get rpt status params
func (o *GetRptStatusParams) SetTokenTypeHint(tokenTypeHint *string) {
	o.TokenTypeHint = tokenTypeHint
}

// WriteToRequest writes these params to a swagger request
func (o *GetRptStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// query param token
	qrToken := o.Token
	qToken := qrToken
	if qToken != "" {
		if err := r.SetQueryParam("token", qToken); err != nil {
			return err
		}
	}

	if o.TokenTypeHint != nil {

		// query param token_type_hint
		var qrTokenTypeHint string
		if o.TokenTypeHint != nil {
			qrTokenTypeHint = *o.TokenTypeHint
		}
		qTokenTypeHint := qrTokenTypeHint
		if qTokenTypeHint != "" {
			if err := r.SetQueryParam("token_type_hint", qTokenTypeHint); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
